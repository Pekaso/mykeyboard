
gh60_lufa.elf:     ファイル形式 elf32-avr

セクション:
索引名          サイズ      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005560  000055f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800138  00800138  0000562c  2**0
                  ALLOC
  3 .noinit       00000004  008001ec  008001ec  0000562c  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  0000562c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005f57  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f68  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000928  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000febf  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004278  00000000  00000000  0001678f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007885  00000000  00000000  0001aa07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a40  00000000  00000000  0002228c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041ff  00000000  00000000  00023ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007d45  00000000  00000000  00027ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING

セクション .text の逆アセンブル:

00000000 <__vectors>:
       0:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__ctors_end>
       4:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
       8:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
       c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      10:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      14:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      18:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      1c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      20:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      24:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      28:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_10>
      2c:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_11>
      30:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__vector_12>
      34:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      38:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      3c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      40:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      44:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      48:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      4c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      50:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      54:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__vector_21>
      58:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      5c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      60:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      64:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      68:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      6c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      70:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      74:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      78:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      7c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      80:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      84:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      88:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      8c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      90:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      94:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      98:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      9c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      a0:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      a4:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      a8:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__bad_interrupt>
      ac:	80 0f       	add	r24, r16
      ae:	a2 0f       	add	r26, r18
      b0:	95 10       	cpse	r9, r5
      b2:	a2 0f       	add	r26, r18
      b4:	95 10       	cpse	r9, r5
      b6:	e7 0f       	add	r30, r23
      b8:	0a 10       	cpse	r0, r10
      ba:	95 10       	cpse	r9, r5
      bc:	5f 10       	cpse	r5, r15
      be:	72 10       	cpse	r7, r2
      c0:	ca 13       	cpse	r28, r26
      c2:	ca 13       	cpse	r28, r26
      c4:	f8 13       	cpse	r31, r24
      c6:	f8 13       	cpse	r31, r24
      c8:	55 14       	cp	r5, r5
      ca:	8f 14       	cp	r8, r15
      cc:	8c 16       	cp	r8, r28
      ce:	8c 16       	cp	r8, r28
      d0:	a8 14       	cp	r10, r8
      d2:	8c 16       	cp	r8, r28
      d4:	9d 15       	cp	r25, r13
      d6:	9d 15       	cp	r25, r13
      d8:	60 16       	cp	r6, r16
      da:	8c 16       	cp	r8, r28
      dc:	8c 16       	cp	r8, r28
      de:	77 16       	cp	r7, r23

000000e0 <__trampolines_end>:
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21
      e2:	04 8a       	std	Z+20, r0	; 0x14

000000e4 <keymaps>:
      e4:	29 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 c1 4c 35     ):;<=>?@ABCDE.L5
      f4:	1e 1f 20 21 22 23 24 25 26 27 2d 2e 00 2a 2b 14     .. !"#$%&'-..*+.
     104:	1a 08 15 17 1c 18 0c 12 13 2f 30 00 31 e0 04 16     ........./0.1...
     114:	07 09 0a 0b 0d 0e 0f 33 34 00 28 00 e1 1d 1b 06     .......34.(.....
     124:	19 05 11 10 36 37 38 00 e5 00 00 00 e3 e2 00 00     ....678.........
     134:	2c 00 00 00 c0 e6 00 00 00 00 01 01 01 01 01 01     ,...............
     144:	01 ac b0 ab a8 aa a9 01 01 01 01 01 01 01 01 01     ................
     154:	01 01 01 01 01 01 00 01 01 01 01 01 01 01 01 01     ................
     164:	46 47 48 52 01 00 01 01 01 01 01 01 01 01 01 4a     FGHR...........J
     174:	4b 50 4f 00 01 00 01 01 01 01 01 01 01 01 4d 4e     KPO...........MN
     184:	51 00 01 00 00 00 01 01 00 00 01 00 00 00 01 01     Q...............
     194:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1a4:	01 01 01 01 13 14 0e 25 1f 1b 17 04 22 0d 01 01     .......%...."...
     1b4:	00 01 01 08 0f 12 0c 06 0b 21 27 18 07 01 01 00     .........!'.....
     1c4:	01 01 0a 1c 15 1a 20 27 11 23 10 01 01 00 01 00     ...... '.#......
     1d4:	01 05 09 1e 1d 16 1d 24 01 01 01 00 01 00 00 00     .......$........
     1e4:	01 01 00 00 01 00 00 00 01 01 00 00 00 00           ..............

000001f2 <__c.2030>:
     1f2:	0a 00                                               ..

000001f4 <__c.2028>:
     1f4:	25 30 31 36 62 00                                   %016b.

000001fa <__c.2026>:
     1fa:	3a 20 00                                            : .

000001fd <__c.2024>:
     1fd:	25 30 32 58 00                                      %02X.

00000202 <__c.2021>:
     202:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     212:	42 43 44 45 46 0a 00                                BCDEF..

00000219 <__c.1999>:
     219:	0a 00                                               ..

0000021b <__c.1997>:
     21b:	25 30 32 58 00                                      %02X.

00000220 <__c.1995>:
     220:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000022a <__c.4977>:
     22a:	5b 73 5d 00                                         [s].

0000022e <__c.4975>:
     22e:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     23e:	00                                                  .

0000023f <__c.4973>:
     23f:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     24f:	00                                                  .

00000250 <__c.4871>:
     250:	5b 57 5d 00                                         [W].

00000254 <__c.4867>:
     254:	5b 53 5d 00                                         [S].

00000258 <__c.4863>:
     258:	5b 52 5d 00                                         [R].

0000025c <__c.4858>:
     25c:	5b 44 5d 00                                         [D].

00000260 <__c.4853>:
     260:	5b 43 5d 00                                         [C].

00000264 <ProductString>:
     264:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

00000270 <ManufacturerString>:
     270:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     280:	6b 00 00 00                                         k...

00000284 <LanguageString>:
     284:	04 03 09 04                                         ....

00000288 <ConfigurationDescriptor>:
     288:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     298:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     2a8:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     2b8:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     2c8:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     2d8:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     2e8:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     2f8:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     308:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000315 <DeviceDescriptor>:
     315:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     325:	00 01                                               ..

00000327 <NKROReport>:
     327:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     337:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     347:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     357:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000360 <ConsoleReport>:
     360:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     370:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     380:	02 c0                                               ..

00000382 <ExtrakeyReport>:
     382:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     392:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     3a2:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     3b2:	10 95 01 81 00 c0                                   ......

000003b8 <MouseReport>:
     3b8:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     3c8:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3d8:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3e8:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3f8:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000405 <KeyboardReport>:
     405:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     415:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     425:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     435:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000445 <__c.4591>:
     445:	0a 00                                               ..

00000447 <__c.4586>:
     447:	25 30 32 58 20 00                                   %02X .

0000044d <__c.4583>:
     44d:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     45d:	20 00                                                .

0000045f <__c.4946>:
     45f:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

0000046a <__c.4731>:
     46a:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     47a:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000488 <__c.4726>:
     488:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     498:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000004a6 <__c.4896>:
     4a6:	64 6f 6e 65 2e 0a 00                                done...

000004ad <__c.4890>:
     4ad:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     4bd:	2e 2e 2e 20 00                                      ... .

000004c2 <__c.4663>:
     4c2:	29 0a 00                                            )..

000004c5 <__c.4661>:
     4c5:	25 75 00                                            %u.

000004c8 <__c.4659>:
     4c8:	2f 00                                               /.

000004ca <__c.4657>:
     4ca:	25 75 00                                            %u.

000004cd <__c.4655>:
     4cd:	5d 28 00                                            ](.

000004d0 <__c.4653>:
     4d0:	25 64 00                                            %d.

000004d3 <__c.4651>:
     4d3:	20 00                                                .

000004d5 <__c.4649>:
     4d5:	25 64 00                                            %d.

000004d8 <__c.4647>:
     4d8:	20 00                                                .

000004da <__c.4645>:
     4da:	25 64 00                                            %d.

000004dd <__c.4643>:
     4dd:	20 00                                                .

000004df <__c.4641>:
     4df:	25 64 00                                            %d.

000004e2 <__c.4639>:
     4e2:	7c 00                                               |.

000004e4 <__c.4637>:
     4e4:	25 30 32 58 00                                      %02X.

000004e9 <__c.4635>:
     4e9:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     4f9:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     509:	20 5b 00                                             [.

0000050c <__c.5260>:
     50c:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     51c:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000527 <__c.5257>:
     527:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     537:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000540 <__c.5254>:
     540:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     550:	20 25 64 0a 00                                       %d..

00000555 <__c.5251>:
     555:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     565:	64 0a 00                                            d..

00000568 <__c.5248>:
     568:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     578:	0a 00                                               ..

0000057a <__c.5244>:
     57a:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000589 <__c.5237>:
     589:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     599:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000005a4 <__c.5234>:
     5a4:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5b4:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005bd <__c.5231>:
     5bd:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5cd:	20 25 64 0a 00                                       %d..

000005d2 <__c.5228>:
     5d2:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5e2:	64 0a 00                                            d..

000005e5 <__c.5225>:
     5e5:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     5f5:	0a 00                                               ..

000005f7 <__c.5221>:
     5f7:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000606 <__c.5214>:
     606:	0a 00                                               ..

00000608 <__c.5212>:
     608:	25 75 00                                            %u.

0000060b <__c.5210>:
     60b:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     61b:	5f 6d 61 78 3a 20 00                                _max: .

00000622 <__c.5208>:
     622:	0a 00                                               ..

00000624 <__c.5206>:
     624:	25 75 00                                            %u.

00000627 <__c.5204>:
     627:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     637:	65 64 3a 20 00                                      ed: .

0000063c <__c.5202>:
     63c:	0a 00                                               ..

0000063e <__c.5200>:
     63e:	25 75 00                                            %u.

00000641 <__c.5198>:
     641:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     651:	00                                                  .

00000652 <__c.5196>:
     652:	0a 00                                               ..

00000654 <__c.5194>:
     654:	25 75 00                                            %u.

00000657 <__c.5192>:
     657:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000666 <__c.5190>:
     666:	0a 00                                               ..

00000668 <__c.5188>:
     668:	25 75 00                                            %u.

0000066b <__c.5186>:
     66b:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     67b:	20 00                                                .

0000067d <__c.5184>:
     67d:	0a 00                                               ..

0000067f <__c.5182>:
     67f:	25 75 00                                            %u.

00000682 <__c.5180>:
     682:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     692:	20 00                                                .

00000694 <__c.5178>:
     694:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000006a2 <__c.5298>:
     6a2:	4d 3e 00                                            M>.

000006a5 <__c.5296>:
     6a5:	4d 25 64 3e 20 00                                   M%d> .

000006ab <__c.5294>:
     6ab:	3f 00                                               ?.

000006ad <__c.5291>:
     6ad:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000006ba <__c.5277>:
     6ba:	43 3e 20 00                                         C> .

000006be <__c.5267>:
     6be:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6ce:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6de:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     6ee:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     6fe:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000070c <__c.5265>:
     70c:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     71c:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     72c:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     73c:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     74c:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     75c:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     76c:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     77c:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     78c:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     79c:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     7ac:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     7bc:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7cc:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7dc:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7ec:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     7fc:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000807 <__c.5170>:
     807:	3f 00                                               ?.

00000809 <__c.5167>:
     809:	4d 3e 20 00                                         M> .

0000080d <__c.5172>:
     80d:	43 3e 20 00                                         C> .

00000811 <__c.5316>:
     811:	4c 25 64 0a 00                                      L%d..

00000816 <__c.5156>:
     816:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     826:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     836:	73 65 6b 65 79 0a 00                                sekey..

0000083d <__c.4981>:
     83d:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     84d:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     85d:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     86d:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     87d:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     88d:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     89d:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     8ad:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     8bd:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8cd:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8dd:	4b 52 4f 0a 00                                      KRO..

000008e2 <__c.5076>:
     8e2:	0a 00                                               ..

000008e4 <__c.5074>:
     8e4:	25 75 00                                            %u.

000008e7 <__c.5072>:
     8e7:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000008ef <__c.5070>:
     8ef:	0a 00                                               ..

000008f1 <__c.5068>:
     8f1:	25 75 00                                            %u.

000008f4 <__c.5066>:
     8f4:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     904:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000910 <__c.5064>:
     910:	0a 00                                               ..

00000912 <__c.5062>:
     912:	25 75 00                                            %u.

00000915 <__c.5060>:
     915:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     925:	20 00                                                .

00000927 <__c.5058>:
     927:	0a 00                                               ..

00000929 <__c.5056>:
     929:	25 75 00                                            %u.

0000092c <__c.5054>:
     92c:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000936 <__c.5052>:
     936:	0a 00                                               ..

00000938 <__c.5050>:
     938:	25 75 00                                            %u.

0000093b <__c.5048>:
     93b:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     94b:	20 00                                                .

0000094d <__c.5046>:
     94d:	0a 00                                               ..

0000094f <__c.5044>:
     94f:	25 75 00                                            %u.

00000952 <__c.5042>:
     952:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     962:	20 00                                                .

00000964 <__c.5040>:
     964:	0a 00                                               ..

00000966 <__c.5038>:
     966:	25 75 00                                            %u.

00000969 <__c.5036>:
     969:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     979:	74 72 6f 6c 3a 20 00                                trol: .

00000980 <__c.5034>:
     980:	0a 00                                               ..

00000982 <__c.5032>:
     982:	25 75 00                                            %u.

00000985 <__c.5030>:
     985:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     995:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000099e <__c.5028>:
     99e:	0a 00                                               ..

000009a0 <__c.5026>:
     9a0:	25 30 32 58 00                                      %02X.

000009a5 <__c.5024>:
     9a5:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     9b5:	77 3a 20 00                                         w: .

000009b9 <__c.5021>:
     9b9:	0a 00                                               ..

000009bb <__c.5019>:
     9bb:	25 75 00                                            %u.

000009be <__c.5017>:
     9be:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000009c7 <__c.5015>:
     9c7:	0a 00                                               ..

000009c9 <__c.5013>:
     9c9:	25 75 00                                            %u.

000009cc <__c.5011>:
     9cc:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000009d8 <__c.5009>:
     9d8:	0a 00                                               ..

000009da <__c.5007>:
     9da:	25 75 00                                            %u.

000009dd <__c.5005>:
     9dd:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000009e7 <__c.5003>:
     9e7:	0a 00                                               ..

000009e9 <__c.5001>:
     9e9:	25 75 00                                            %u.

000009ec <__c.4999>:
     9ec:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000009f6 <__c.4997>:
     9f6:	0a 00                                               ..

000009f8 <__c.4995>:
     9f8:	25 30 32 58 00                                      %02X.

000009fd <__c.4993>:
     9fd:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     a0d:	3a 20 00                                            : .

00000a10 <__c.4990>:
     a10:	0a 00                                               ..

00000a12 <__c.4988>:
     a12:	25 75 00                                            %u.

00000a15 <__c.4986>:
     a15:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000a25 <__c.5151>:
     a25:	3f 00                                               ?.

00000a27 <__c.5142>:
     a27:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000a32 <__c.5140>:
     a32:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a3c <__c.5137>:
     a3c:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     a4c:	25 30 34 6c 58 0a 00                                %04lX..

00000a53 <__c.5135>:
     a53:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a63:	58 0a 00                                            X..

00000a66 <__c.5133>:
     a66:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a76:	58 0a 00                                            X..

00000a79 <__c.5131>:
     a79:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     a89:	6c 3a 20 25 58 0a 00                                l: %X..

00000a90 <__c.5129>:
     a90:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     aa0:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000aaa <__c.5127>:
     aaa:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000ab8 <__c.5124>:
     ab8:	47 43 43 3a 20 35 2e 33 2e 30 20 41 56 52 2d 4c     GCC: 5.3.0 AVR-L
     ac8:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     ad8:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000ae3 <__c.5122>:
     ae3:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     af3:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     b03:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     b13:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     b23:	30 39 36 0a 00                                      096..

00000b28 <__c.5120>:
     b28:	42 55 49 4c 44 3a 20 32 39 38 33 61 66 34 2d 64     BUILD: 2983af4-d
     b38:	69 72 74 79 20 28 30 38 3a 34 36 3a 35 36 20 4a     irty (08:46:56 J
     b48:	75 6c 20 20 36 20 32 30 31 36 29 0a 00              ul  6 2016)..

00000b55 <__c.5118>:
     b55:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     b65:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     b75:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     b85:	30 30 31 0a 00                                      001..

00000b8a <__c.5116>:
     b8a:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     b9a:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     baa:	6f 72 20 50 65 6b 61 73 6f 0a 00                    or Pekaso..

00000bb5 <__c.5114>:
     bb5:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000bc4 <__c.5111>:
     bc4:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000bd1 <__c.5109>:
     bd1:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000bdd <__c.5106>:
     bdd:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000bed <__c.5104>:
     bed:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000bfc <__c.5101>:
     bfc:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000c0a <__c.5099>:
     c0a:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000c17 <__c.5096>:
     c17:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000c23 <__c.5094>:
     c23:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c30 <__c.5091>:
     c30:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c40:	00                                                  .

00000c41 <__c.5088>:
     c41:	43 3e 20 00                                         C> .

00000c45 <__c.5082>:
     c45:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000c50 <__ctors_end>:
     c50:	11 24       	eor	r1, r1
     c52:	1f be       	out	0x3f, r1	; 63
     c54:	cf ef       	ldi	r28, 0xFF	; 255
     c56:	da e0       	ldi	r29, 0x0A	; 10
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	cd bf       	out	0x3d, r28	; 61

00000c5c <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c5c:	04 b6       	in	r0, 0x34	; 52
     c5e:	03 fe       	sbrs	r0, 3
     c60:	27 c0       	rjmp	.+78     	; 0xcb0 <__do_copy_data>
     c62:	80 91 ec 01 	lds	r24, 0x01EC
     c66:	90 91 ed 01 	lds	r25, 0x01ED
     c6a:	a0 91 ee 01 	lds	r26, 0x01EE
     c6e:	b0 91 ef 01 	lds	r27, 0x01EF
     c72:	87 30       	cpi	r24, 0x07	; 7
     c74:	90 4b       	sbci	r25, 0xB0	; 176
     c76:	a7 40       	sbci	r26, 0x07	; 7
     c78:	b0 4b       	sbci	r27, 0xB0	; 176
     c7a:	d1 f4       	brne	.+52     	; 0xcb0 <__do_copy_data>
        reset_key = 0;
     c7c:	10 92 ec 01 	sts	0x01EC, r1
     c80:	10 92 ed 01 	sts	0x01ED, r1
     c84:	10 92 ee 01 	sts	0x01EE, r1
     c88:	10 92 ef 01 	sts	0x01EF, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c8c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c8e:	84 b7       	in	r24, 0x34	; 52
     c90:	87 7f       	andi	r24, 0xF7	; 247
     c92:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	a8 95       	wdr
     c9a:	80 91 60 00 	lds	r24, 0x0060
     c9e:	88 61       	ori	r24, 0x18	; 24
     ca0:	80 93 60 00 	sts	0x0060, r24
     ca4:	10 92 60 00 	sts	0x0060, r1
     ca8:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     caa:	e0 e0       	ldi	r30, 0x00	; 0
     cac:	f8 e3       	ldi	r31, 0x38	; 56
     cae:	09 95       	icall

00000cb0 <__do_copy_data>:
     cb0:	11 e0       	ldi	r17, 0x01	; 1
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b1 e0       	ldi	r27, 0x01	; 1
     cb6:	e0 e6       	ldi	r30, 0x60	; 96
     cb8:	f5 e5       	ldi	r31, 0x55	; 85
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__do_copy_data+0x10>
     cbc:	05 90       	lpm	r0, Z+
     cbe:	0d 92       	st	X+, r0
     cc0:	a8 33       	cpi	r26, 0x38	; 56
     cc2:	b1 07       	cpc	r27, r17
     cc4:	d9 f7       	brne	.-10     	; 0xcbc <__do_copy_data+0xc>

00000cc6 <__do_clear_bss>:
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	a8 e3       	ldi	r26, 0x38	; 56
     cca:	b1 e0       	ldi	r27, 0x01	; 1
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <.do_clear_bss_start>

00000cce <.do_clear_bss_loop>:
     cce:	1d 92       	st	X+, r1

00000cd0 <.do_clear_bss_start>:
     cd0:	ac 3e       	cpi	r26, 0xEC	; 236
     cd2:	b2 07       	cpc	r27, r18
     cd4:	e1 f7       	brne	.-8      	; 0xcce <.do_clear_bss_loop>
     cd6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <main>
     cda:	0c 94 ae 2a 	jmp	0x555c	; 0x555c <_exit>

00000cde <__bad_interrupt>:
     cde:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ce2 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     ce2:	ff 93       	push	r31
	push	ZL
     ce4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     ce6:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     cea:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     cee:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <xputc+0x12>
	icall
     cf2:	09 95       	icall
2:	pop	ZL
     cf4:	ef 91       	pop	r30
	pop	ZH
     cf6:	ff 91       	pop	r31
	ret
     cf8:	08 95       	ret

00000cfa <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     cfa:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     cfc:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     cfe:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     d00:	11 f0       	breq	.+4      	; 0xd06 <xputs+0xc>
	rcall	xputc
     d02:	ef df       	rcall	.-34     	; 0xce2 <xputc>
	rjmp	1b
     d04:	fb cf       	rjmp	.-10     	; 0xcfc <xputs+0x2>
2:	ret
     d06:	08 95       	ret

00000d08 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     d08:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     d0a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     d0c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     d0e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     d10:	0c c0       	rjmp	.+24     	; 0xd2a <xitoa+0x22>
	neg	r20		;
     d12:	41 95       	neg	r20
	sbrs	r25, 7		;
     d14:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <xitoa+0x22>
	ldi	r30, '-'	;
     d18:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     d1a:	60 95       	com	r22
	com	r23		;
     d1c:	70 95       	com	r23
	com	r24		;
     d1e:	80 95       	com	r24
	com	r25		;
     d20:	90 95       	com	r25
	adc	r22, r1		;
     d22:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     d24:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d26:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d28:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d2a:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <xitoa+0x2a>
	neg	r18		;
     d2e:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d30:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d32:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d34:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d36:	66 0f       	add	r22, r22
	rol	r23		;
     d38:	77 1f       	adc	r23, r23
	rol	r24		;
     d3a:	88 1f       	adc	r24, r24
	rol	r25		;
     d3c:	99 1f       	adc	r25, r25
	rol	r26		;
     d3e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d40:	a4 17       	cp	r26, r20
	brcs	3f		;
     d42:	10 f0       	brcs	.+4      	; 0xd48 <xitoa+0x40>
	sub	r26, r20	;
     d44:	a4 1b       	sub	r26, r20
	inc	r22		;
     d46:	63 95       	inc	r22
3:	dec	r21		;
     d48:	5a 95       	dec	r21
	brne	2b		;/
     d4a:	a9 f7       	brne	.-22     	; 0xd36 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d4c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <xitoa+0x4a>
	subi	r26, -7		;
     d50:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d52:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d54:	af 93       	push	r26
	inc	r31		;/
     d56:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d58:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d5a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d5c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d5e:	91 05       	cpc	r25, r1
	brne	1b		;/
     d60:	41 f7       	brne	.-48     	; 0xd32 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d62:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d64:	11 f4       	brne	.+4      	; 0xd6a <xitoa+0x62>
	push	r30		;
     d66:	ef 93       	push	r30
	inc	r31		;/
     d68:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d6a:	f2 17       	cp	r31, r18
	brcc	6f		;
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <xitoa+0x6c>
	push	r19		;
     d6e:	3f 93       	push	r19
	inc	r31		;
     d70:	f3 95       	inc	r31
	rjmp	5b		;/
     d72:	fb cf       	rjmp	.-10     	; 0xd6a <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d74:	8f 91       	pop	r24
	rcall	xputc		;
     d76:	b5 df       	rcall	.-150    	; 0xce2 <xputc>
	dec	r31		;
     d78:	fa 95       	dec	r31
	brne	6b		;/
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <xitoa+0x6c>

	ret
     d7c:	08 95       	ret

00000d7e <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d7e:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d80:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d82:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d84:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d86:	21 f0       	breq	.+8      	; 0xd90 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d88:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d8a:	19 f0       	breq	.+6      	; 0xd92 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d8c:	aa df       	rcall	.-172    	; 0xce2 <xputc>
	rjmp	0b		;/
     d8e:	f9 cf       	rjmp	.-14     	; 0xd82 <xvprintf+0x4>
90:	ret
     d90:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d92:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d94:	e8 94       	clt
	_LPMI	r21		;Get flags
     d96:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d98:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d9a:	c1 f3       	breq	.-16     	; 0xd8c <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d9c:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d9e:	11 f4       	brne	.+4      	; 0xda4 <xvprintf+0x26>
	set			;/
     da0:	68 94       	set
22:	_LPMI	r21		;Get width
     da2:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     da4:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     da6:	48 f4       	brcc	.+18     	; 0xdba <xvprintf+0x3c>
	subi	r21, '0'	;
     da8:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     daa:	90 f3       	brcs	.-28     	; 0xd90 <xvprintf+0x12>
	lsl	r18		;
     dac:	22 0f       	add	r18, r18
	mov	r0, r18		;
     dae:	02 2e       	mov	r0, r18
	lsl	r18		;
     db0:	22 0f       	add	r18, r18
	lsl	r18		;
     db2:	22 0f       	add	r18, r18
	add	r18, r0		;
     db4:	20 0d       	add	r18, r0
	add	r18, r21	;
     db6:	25 0f       	add	r18, r21
	rjmp	22b		;/
     db8:	f4 cf       	rjmp	.-24     	; 0xda2 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     dba:	0e f4       	brtc	.+2      	; 0xdbe <xvprintf+0x40>
	neg	r18		;
     dbc:	21 95       	neg	r18
25:	ld	r24, Y+		;
     dbe:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     dc0:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     dc2:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     dc4:	19 f3       	breq	.-58     	; 0xd8c <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     dc6:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     dc8:	29 f1       	breq	.+74     	; 0xe14 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     dca:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     dcc:	59 f1       	breq	.+86     	; 0xe24 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     dce:	bc 01       	movw	r22, r24
	clr	r24		;
     dd0:	88 27       	eor	r24, r24
	clr	r25		;
     dd2:	99 27       	eor	r25, r25
	clt			;/
     dd4:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     dd6:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     dd8:	21 f4       	brne	.+8      	; 0xde2 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     dda:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ddc:	99 91       	ld	r25, Y+
	set			;
     dde:	68 94       	set
	_LPMI	r21		;/
     de0:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     de2:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     de4:	39 f4       	brne	.+14     	; 0xdf4 <xvprintf+0x76>
	ldi	r20, -10	;
     de6:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     de8:	7e f0       	brts	.+30     	; 0xe08 <xvprintf+0x8a>
	sbrs	r23, 7		;
     dea:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <xvprintf+0x8a>
	ldi	r24, -1		;
     dee:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     df0:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     df2:	0a c0       	rjmp	.+20     	; 0xe08 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     df4:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     df6:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     df8:	39 f0       	breq	.+14     	; 0xe08 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     dfa:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     dfc:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     dfe:	21 f0       	breq	.+8      	; 0xe08 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     e00:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     e02:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     e04:	09 f0       	breq	.+2      	; 0xe08 <xvprintf+0x8a>
	ret			;abort
     e06:	08 95       	ret
40:	push	ZH		;Output the value
     e08:	ff 93       	push	r31
	push	ZL		;
     e0a:	ef 93       	push	r30
	rcall	xitoa		;
     e0c:	7d df       	rcall	.-262    	; 0xd08 <xitoa>
42:	pop	ZL		;
     e0e:	ef 91       	pop	r30
	pop	ZH		;
     e10:	ff 91       	pop	r31
	rjmp	0b		;/
     e12:	b7 cf       	rjmp	.-146    	; 0xd82 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     e14:	ff 93       	push	r31
	push	ZL
     e16:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     e18:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     e1a:	81 91       	ld	r24, Z+
	cpi	r24, 0
     e1c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     e1e:	b9 f3       	breq	.-18     	; 0xe0e <xvprintf+0x90>
	rcall	xputc
     e20:	60 df       	rcall	.-320    	; 0xce2 <xputc>
	rjmp	51b
     e22:	fb cf       	rjmp	.-10     	; 0xe1a <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     e24:	ff 93       	push	r31
	push	ZL
     e26:	ef 93       	push	r30
	rcall	xputs
     e28:	68 df       	rcall	.-304    	; 0xcfa <xputs>
	rjmp	42b
     e2a:	f1 cf       	rjmp	.-30     	; 0xe0e <xvprintf+0x90>

00000e2c <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e2c:	df 93       	push	r29
	push	YL
     e2e:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e30:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e32:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e34:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e36:	a3 df       	rcall	.-186    	; 0xd7e <xvprintf>
	pop	YL
     e38:	cf 91       	pop	r28
	pop	YH
     e3a:	df 91       	pop	r29
	ret
     e3c:	08 95       	ret

00000e3e <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     e3e:	2a e5       	ldi	r18, 0x5A	; 90
     e40:	82 9f       	mul	r24, r18
     e42:	c0 01       	movw	r24, r0
     e44:	11 24       	eor	r1, r1
     e46:	fc 01       	movw	r30, r24
     e48:	2f e0       	ldi	r18, 0x0F	; 15
     e4a:	72 9f       	mul	r23, r18
     e4c:	e0 0d       	add	r30, r0
     e4e:	f1 1d       	adc	r31, r1
     e50:	11 24       	eor	r1, r1
     e52:	e6 0f       	add	r30, r22
     e54:	f1 1d       	adc	r31, r1
     e56:	ec 51       	subi	r30, 0x1C	; 28
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	84 91       	lpm	r24, Z
}
     e5c:	08 95       	ret

00000e5e <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     e5e:	e8 2f       	mov	r30, r24
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	e0 5a       	subi	r30, 0xA0	; 160
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	85 91       	lpm	r24, Z+
     e6c:	94 91       	lpm	r25, Z
}
     e6e:	08 95       	ret

00000e70 <unselect_rows>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
     e70:	80 b3       	in	r24, 0x10	; 16
     e72:	8c 70       	andi	r24, 0x0C	; 12
     e74:	80 bb       	out	0x10, r24	; 16
     e76:	81 b3       	in	r24, 0x11	; 17
     e78:	8c 70       	andi	r24, 0x0C	; 12
     e7a:	81 bb       	out	0x11, r24	; 17
     e7c:	08 95       	ret

00000e7e <matrix_init>:
     e7e:	0e 94 38 07 	call	0xe70	; 0xe70 <unselect_rows>
     e82:	84 b1       	in	r24, 0x04	; 4
     e84:	81 70       	andi	r24, 0x01	; 1
     e86:	84 b9       	out	0x04, r24	; 4
     e88:	85 b1       	in	r24, 0x05	; 5
     e8a:	8e 6f       	ori	r24, 0xFE	; 254
     e8c:	85 b9       	out	0x05, r24	; 5
     e8e:	8a b1       	in	r24, 0x0a	; 10
     e90:	80 73       	andi	r24, 0x30	; 48
     e92:	8a b9       	out	0x0a, r24	; 10
     e94:	8b b1       	in	r24, 0x0b	; 11
     e96:	8f 6c       	ori	r24, 0xCF	; 207
     e98:	8b b9       	out	0x0b, r24	; 11
     e9a:	87 b1       	in	r24, 0x07	; 7
     e9c:	8f 73       	andi	r24, 0x3F	; 63
     e9e:	87 b9       	out	0x07, r24	; 7
     ea0:	88 b1       	in	r24, 0x08	; 8
     ea2:	80 6c       	ori	r24, 0xC0	; 192
     ea4:	88 b9       	out	0x08, r24	; 8
     ea6:	e6 e4       	ldi	r30, 0x46	; 70
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	aa e3       	ldi	r26, 0x3A	; 58
     eac:	b1 e0       	ldi	r27, 0x01	; 1
     eae:	11 92       	st	Z+, r1
     eb0:	11 92       	st	Z+, r1
     eb2:	1d 92       	st	X+, r1
     eb4:	1d 92       	st	X+, r1
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	e2 35       	cpi	r30, 0x52	; 82
     eba:	f8 07       	cpc	r31, r24
     ebc:	c1 f7       	brne	.-16     	; 0xeae <matrix_init+0x30>
     ebe:	08 95       	ret

00000ec0 <matrix_scan>:
     ec0:	af 92       	push	r10
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	aa e3       	ldi	r26, 0x3A	; 58
     ed6:	aa 2e       	mov	r10, r26
     ed8:	a1 e0       	ldi	r26, 0x01	; 1
     eda:	ba 2e       	mov	r11, r26
     edc:	e5 01       	movw	r28, r10
     ede:	10 e0       	ldi	r17, 0x00	; 0
     ee0:	01 e0       	ldi	r16, 0x01	; 1
     ee2:	bb e1       	ldi	r27, 0x1B	; 27
     ee4:	cb 2e       	mov	r12, r27
     ee6:	b2 e0       	ldi	r27, 0x02	; 2
     ee8:	db 2e       	mov	r13, r27
     eea:	13 30       	cpi	r17, 0x03	; 3
     eec:	99 f0       	breq	.+38     	; 0xf14 <matrix_scan+0x54>
     eee:	28 f4       	brcc	.+10     	; 0xefa <matrix_scan+0x3a>
     ef0:	11 30       	cpi	r17, 0x01	; 1
     ef2:	51 f0       	breq	.+20     	; 0xf08 <matrix_scan+0x48>
     ef4:	12 30       	cpi	r17, 0x02	; 2
     ef6:	59 f0       	breq	.+22     	; 0xf0e <matrix_scan+0x4e>
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <matrix_scan+0x42>
     efa:	14 30       	cpi	r17, 0x04	; 4
     efc:	71 f0       	breq	.+28     	; 0xf1a <matrix_scan+0x5a>
     efe:	15 30       	cpi	r17, 0x05	; 5
     f00:	79 f0       	breq	.+30     	; 0xf20 <matrix_scan+0x60>
     f02:	80 9a       	sbi	0x10, 0	; 16
     f04:	88 98       	cbi	0x11, 0	; 17
     f06:	0e c0       	rjmp	.+28     	; 0xf24 <matrix_scan+0x64>
     f08:	81 9a       	sbi	0x10, 1	; 16
     f0a:	89 98       	cbi	0x11, 1	; 17
     f0c:	0b c0       	rjmp	.+22     	; 0xf24 <matrix_scan+0x64>
     f0e:	84 9a       	sbi	0x10, 4	; 16
     f10:	8c 98       	cbi	0x11, 4	; 17
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <matrix_scan+0x64>
     f14:	85 9a       	sbi	0x10, 5	; 16
     f16:	8d 98       	cbi	0x11, 5	; 17
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <matrix_scan+0x64>
     f1a:	86 9a       	sbi	0x10, 6	; 16
     f1c:	8e 98       	cbi	0x11, 6	; 17
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <matrix_scan+0x64>
     f20:	87 9a       	sbi	0x10, 7	; 16
     f22:	8f 98       	cbi	0x11, 7	; 17
     f24:	80 ea       	ldi	r24, 0xA0	; 160
     f26:	8a 95       	dec	r24
     f28:	f1 f7       	brne	.-4      	; 0xf26 <matrix_scan+0x66>
     f2a:	83 b1       	in	r24, 0x03	; 3
     f2c:	82 95       	swap	r24
     f2e:	86 95       	lsr	r24
     f30:	86 95       	lsr	r24
     f32:	83 70       	andi	r24, 0x03	; 3
     f34:	80 27       	eor	r24, r16
     f36:	80 fb       	bst	r24, 0
     f38:	ee 24       	eor	r14, r14
     f3a:	e0 f8       	bld	r14, 0
     f3c:	f1 2c       	mov	r15, r1
     f3e:	1d 99       	sbic	0x03, 5	; 3
     f40:	03 c0       	rjmp	.+6      	; 0xf48 <matrix_scan+0x88>
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <matrix_scan+0x8c>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	97 01       	movw	r18, r14
     f4e:	28 2b       	or	r18, r24
     f50:	39 2b       	or	r19, r25
     f52:	1c 99       	sbic	0x03, 4	; 3
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <matrix_scan+0x9c>
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <matrix_scan+0xa0>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	82 2b       	or	r24, r18
     f62:	93 2b       	or	r25, r19
     f64:	49 b1       	in	r20, 0x09	; 9
     f66:	04 2e       	mov	r0, r20
     f68:	00 0c       	add	r0, r0
     f6a:	55 0b       	sbc	r21, r21
     f6c:	40 95       	com	r20
     f6e:	50 95       	com	r21
     f70:	9a 01       	movw	r18, r20
     f72:	22 27       	eor	r18, r18
     f74:	33 0f       	add	r19, r19
     f76:	22 1f       	adc	r18, r18
     f78:	33 27       	eor	r19, r19
     f7a:	f3 e0       	ldi	r31, 0x03	; 3
     f7c:	22 0f       	add	r18, r18
     f7e:	33 1f       	adc	r19, r19
     f80:	fa 95       	dec	r31
     f82:	e1 f7       	brne	.-8      	; 0xf7c <matrix_scan+0xbc>
     f84:	28 2b       	or	r18, r24
     f86:	39 2b       	or	r19, r25
     f88:	4e 99       	sbic	0x09, 6	; 9
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <matrix_scan+0xd2>
     f8c:	80 e1       	ldi	r24, 0x10	; 16
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <matrix_scan+0xd6>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	48 2b       	or	r20, r24
     f9a:	59 2b       	or	r21, r25
     f9c:	26 b1       	in	r18, 0x06	; 6
     f9e:	02 2e       	mov	r0, r18
     fa0:	00 0c       	add	r0, r0
     fa2:	33 0b       	sbc	r19, r19
     fa4:	20 95       	com	r18
     fa6:	30 95       	com	r19
     fa8:	c9 01       	movw	r24, r18
     faa:	88 27       	eor	r24, r24
     fac:	99 0f       	add	r25, r25
     fae:	88 1f       	adc	r24, r24
     fb0:	99 27       	eor	r25, r25
     fb2:	75 e0       	ldi	r23, 0x05	; 5
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	7a 95       	dec	r23
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <matrix_scan+0xf4>
     fbc:	84 2b       	or	r24, r20
     fbe:	95 2b       	or	r25, r21
     fc0:	36 99       	sbic	0x06, 6	; 6
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <matrix_scan+0x10a>
     fc4:	20 e4       	ldi	r18, 0x40	; 64
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <matrix_scan+0x10e>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	82 2b       	or	r24, r18
     fd0:	93 2b       	or	r25, r19
     fd2:	4b 99       	sbic	0x09, 3	; 9
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <matrix_scan+0x11c>
     fd6:	20 e8       	ldi	r18, 0x80	; 128
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <matrix_scan+0x120>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	82 2b       	or	r24, r18
     fe2:	93 2b       	or	r25, r19
     fe4:	4a 99       	sbic	0x09, 2	; 9
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <matrix_scan+0x12e>
     fe8:	e0 e0       	ldi	r30, 0x00	; 0
     fea:	f1 e0       	ldi	r31, 0x01	; 1
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <matrix_scan+0x132>
     fee:	e0 e0       	ldi	r30, 0x00	; 0
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8e 2b       	or	r24, r30
     ff4:	9f 2b       	or	r25, r31
     ff6:	49 99       	sbic	0x09, 1	; 9
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <matrix_scan+0x140>
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	72 e0       	ldi	r23, 0x02	; 2
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <matrix_scan+0x144>
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	86 2b       	or	r24, r22
    1006:	97 2b       	or	r25, r23
    1008:	48 99       	sbic	0x09, 0	; 9
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <matrix_scan+0x152>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	34 e0       	ldi	r19, 0x04	; 4
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <matrix_scan+0x156>
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	ac 01       	movw	r20, r24
    1018:	42 2b       	or	r20, r18
    101a:	53 2b       	or	r21, r19
    101c:	23 b1       	in	r18, 0x03	; 3
    101e:	02 2e       	mov	r0, r18
    1020:	00 0c       	add	r0, r0
    1022:	33 0b       	sbc	r19, r19
    1024:	20 95       	com	r18
    1026:	30 95       	com	r19
    1028:	c9 01       	movw	r24, r18
    102a:	88 27       	eor	r24, r24
    102c:	99 0f       	add	r25, r25
    102e:	88 1f       	adc	r24, r24
    1030:	99 27       	eor	r25, r25
    1032:	98 2f       	mov	r25, r24
    1034:	88 27       	eor	r24, r24
    1036:	99 0f       	add	r25, r25
    1038:	99 0f       	add	r25, r25
    103a:	99 0f       	add	r25, r25
    103c:	84 2b       	or	r24, r20
    103e:	95 2b       	or	r25, r21
    1040:	1b 99       	sbic	0x03, 3	; 3
    1042:	03 c0       	rjmp	.+6      	; 0x104a <matrix_scan+0x18a>
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e1       	ldi	r19, 0x10	; 16
    1048:	02 c0       	rjmp	.+4      	; 0x104e <matrix_scan+0x18e>
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	82 2b       	or	r24, r18
    1050:	93 2b       	or	r25, r19
    1052:	1a 99       	sbic	0x03, 2	; 3
    1054:	03 c0       	rjmp	.+6      	; 0x105c <matrix_scan+0x19c>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e2       	ldi	r19, 0x20	; 32
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <matrix_scan+0x1a0>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	82 2b       	or	r24, r18
    1062:	93 2b       	or	r25, r19
    1064:	19 99       	sbic	0x03, 1	; 3
    1066:	03 c0       	rjmp	.+6      	; 0x106e <matrix_scan+0x1ae>
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e4       	ldi	r19, 0x40	; 64
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <matrix_scan+0x1b2>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	82 2b       	or	r24, r18
    1074:	93 2b       	or	r25, r19
    1076:	28 81       	ld	r18, Y
    1078:	39 81       	ldd	r19, Y+1	; 0x01
    107a:	28 17       	cp	r18, r24
    107c:	39 07       	cpc	r19, r25
    107e:	49 f1       	breq	.+82     	; 0x10d2 <matrix_scan+0x212>
    1080:	99 83       	std	Y+1, r25	; 0x01
    1082:	88 83       	st	Y, r24
    1084:	80 91 00 01 	lds	r24, 0x0100
    1088:	88 23       	and	r24, r24
    108a:	01 f1       	breq	.+64     	; 0x10cc <matrix_scan+0x20c>
    108c:	80 91 cd 01 	lds	r24, 0x01CD
    1090:	80 ff       	sbrs	r24, 0
    1092:	04 c0       	rjmp	.+8      	; 0x109c <matrix_scan+0x1dc>
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    109c:	80 91 cd 01 	lds	r24, 0x01CD
    10a0:	80 ff       	sbrs	r24, 0
    10a2:	0c c0       	rjmp	.+24     	; 0x10bc <matrix_scan+0x1fc>
    10a4:	80 91 00 01 	lds	r24, 0x0100
    10a8:	1f 92       	push	r1
    10aa:	8f 93       	push	r24
    10ac:	df 92       	push	r13
    10ae:	cf 92       	push	r12
    10b0:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	80 91 cd 01 	lds	r24, 0x01CD
    10c0:	80 ff       	sbrs	r24, 0
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <matrix_scan+0x20c>
    10c4:	89 e1       	ldi	r24, 0x19	; 25
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    10cc:	85 e0       	ldi	r24, 0x05	; 5
    10ce:	80 93 00 01 	sts	0x0100, r24
    10d2:	0e 94 38 07 	call	0xe70	; 0xe70 <unselect_rows>
    10d6:	1f 5f       	subi	r17, 0xFF	; 255
    10d8:	22 96       	adiw	r28, 0x02	; 2
    10da:	16 30       	cpi	r17, 0x06	; 6
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <matrix_scan+0x220>
    10de:	05 cf       	rjmp	.-502    	; 0xeea <matrix_scan+0x2a>
    10e0:	80 91 00 01 	lds	r24, 0x0100
    10e4:	88 23       	and	r24, r24
    10e6:	c9 f0       	breq	.+50     	; 0x111a <matrix_scan+0x25a>
    10e8:	81 50       	subi	r24, 0x01	; 1
    10ea:	80 93 00 01 	sts	0x0100, r24
    10ee:	88 23       	and	r24, r24
    10f0:	39 f0       	breq	.+14     	; 0x1100 <matrix_scan+0x240>
    10f2:	af e9       	ldi	r26, 0x9F	; 159
    10f4:	bf e0       	ldi	r27, 0x0F	; 15
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <matrix_scan+0x236>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <matrix_scan+0x23c>
    10fc:	00 00       	nop
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <matrix_scan+0x25a>
    1100:	e6 e4       	ldi	r30, 0x46	; 70
    1102:	f1 e0       	ldi	r31, 0x01	; 1
    1104:	d5 01       	movw	r26, r10
    1106:	8d 91       	ld	r24, X+
    1108:	9d 91       	ld	r25, X+
    110a:	5d 01       	movw	r10, r26
    110c:	81 93       	st	Z+, r24
    110e:	91 93       	st	Z+, r25
    1110:	b6 e4       	ldi	r27, 0x46	; 70
    1112:	ab 16       	cp	r10, r27
    1114:	b1 e0       	ldi	r27, 0x01	; 1
    1116:	bb 06       	cpc	r11, r27
    1118:	a9 f7       	brne	.-22     	; 0x1104 <matrix_scan+0x244>
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	08 95       	ret

00001132 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1132:	e8 2f       	mov	r30, r24
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ea 5b       	subi	r30, 0xBA	; 186
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
}
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	08 95       	ret

00001144 <matrix_print>:

void matrix_print(void)
{
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    115c:	86 e4       	ldi	r24, 0x46	; 70
    115e:	e8 2e       	mov	r14, r24
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	f8 2e       	mov	r15, r24
    1164:	c0 e0       	ldi	r28, 0x00	; 0
    1166:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1168:	9d ef       	ldi	r25, 0xFD	; 253
    116a:	c9 2e       	mov	r12, r25
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    1170:	04 ef       	ldi	r16, 0xF4	; 244
    1172:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	df 92       	push	r13
    117a:	cf 92       	push	r12
    117c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    1180:	8a ef       	ldi	r24, 0xFA	; 250
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
        pbin_reverse16(matrix_get_row(row));
    1188:	f7 01       	movw	r30, r14
    118a:	81 91       	ld	r24, Z+
    118c:	91 91       	ld	r25, Z+
    118e:	7f 01       	movw	r14, r30
    1190:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <bitrev16>
    1194:	9f 93       	push	r25
    1196:	8f 93       	push	r24
    1198:	1f 93       	push	r17
    119a:	0f 93       	push	r16
    119c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
        print("\n");
    11a0:	82 ef       	ldi	r24, 0xF2	; 242
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    11a8:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    11aa:	8d b7       	in	r24, 0x3d	; 61
    11ac:	9e b7       	in	r25, 0x3e	; 62
    11ae:	08 96       	adiw	r24, 0x08	; 8
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	9e bf       	out	0x3e, r25	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	8d bf       	out	0x3d, r24	; 61
    11ba:	c6 30       	cpi	r28, 0x06	; 6
    11bc:	d1 05       	cpc	r29, r1
    11be:	d1 f6       	brne	.-76     	; 0x1174 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	08 95       	ret

000011d2 <led_layer_set>:
#include "stdint.h"
#include "led.h"


void led_layer_set(uint32_t state) {
  DDRB |= (1<<0);
    11d2:	20 9a       	sbi	0x04, 0	; 4

  /* Led for Layer 2 */
  if ((1<<2 & state) != 0) {
    11d4:	62 ff       	sbrs	r22, 2
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <led_layer_set+0xa>
    PORTB |= (1<<0);
    11d8:	28 9a       	sbi	0x05, 0	; 5
    11da:	08 95       	ret
  } else {
    PORTB &= ~(1<<0);
    11dc:	28 98       	cbi	0x05, 0	; 5
    11de:	08 95       	ret

000011e0 <led_set>:
  }
}

void led_set(uint8_t usb_led)
{
    11e0:	08 95       	ret

000011e2 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    11e2:	80 91 65 01 	lds	r24, 0x0165
    11e6:	08 95       	ret

000011e8 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    11e8:	9f b7       	in	r25, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	10 92 54 01 	sts	0x0154, r1
    11f0:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11f2:	90 91 e2 01 	lds	r25, 0x01E2
    11f6:	94 30       	cpi	r25, 0x04	; 4
    11f8:	09 f0       	breq	.+2      	; 0x11fc <sendchar+0x14>
    11fa:	57 c0       	rjmp	.+174    	; 0x12aa <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11fc:	90 91 e9 00 	lds	r25, 0x00E9
    1200:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1202:	30 91 ec 00 	lds	r19, 0x00EC
    1206:	23 2f       	mov	r18, r19
    1208:	21 70       	andi	r18, 0x01	; 1
    120a:	30 fd       	sbrc	r19, 0
    120c:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    120e:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1210:	24 e0       	ldi	r18, 0x04	; 4
    1212:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1216:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    121a:	20 ff       	sbrs	r18, 0
    121c:	43 c0       	rjmp	.+134    	; 0x12a4 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    121e:	20 91 ee 00 	lds	r18, 0x00EE
    1222:	27 ff       	sbrs	r18, 7
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1226:	20 91 52 01 	lds	r18, 0x0152
    122a:	22 23       	and	r18, r18
    122c:	21 f0       	breq	.+8      	; 0x1236 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    122e:	20 91 e8 00 	lds	r18, 0x00E8
    1232:	25 ff       	sbrs	r18, 5
    1234:	37 c0       	rjmp	.+110    	; 0x12a4 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1236:	10 92 52 01 	sts	0x0152, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    123a:	26 e0       	ldi	r18, 0x06	; 6
    123c:	30 91 e8 00 	lds	r19, 0x00E8
    1240:	35 fd       	sbrc	r19, 5
    1242:	15 c0       	rjmp	.+42     	; 0x126e <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1244:	30 91 e2 01 	lds	r19, 0x01E2
    1248:	34 30       	cpi	r19, 0x04	; 4
    124a:	61 f5       	brne	.+88     	; 0x12a4 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    124c:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1250:	35 fd       	sbrc	r19, 5
    1252:	28 c0       	rjmp	.+80     	; 0x12a4 <sendchar+0xbc>
    1254:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1256:	21 f4       	brne	.+8      	; 0x1260 <sendchar+0x78>
            timeouted = true;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 52 01 	sts	0x0152, r24
            goto ERROR_EXIT;
    125e:	22 c0       	rjmp	.+68     	; 0x12a4 <sendchar+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1260:	ef e9       	ldi	r30, 0x9F	; 159
    1262:	ff e0       	ldi	r31, 0x0F	; 15
    1264:	31 97       	sbiw	r30, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <sendchar+0x7c>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <sendchar+0x82>
    126a:	00 00       	nop
    126c:	e7 cf       	rjmp	.-50     	; 0x123c <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    126e:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1272:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1276:	85 fd       	sbrc	r24, 5
    1278:	0a c0       	rjmp	.+20     	; 0x128e <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    127a:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    127e:	80 ff       	sbrs	r24, 0
    1280:	fc cf       	rjmp	.-8      	; 0x127a <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1282:	80 91 e8 00 	lds	r24, 0x00E8
    1286:	8e 77       	andi	r24, 0x7E	; 126
    1288:	80 93 e8 00 	sts	0x00E8, r24
    128c:	06 c0       	rjmp	.+12     	; 0x129a <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    128e:	8f b7       	in	r24, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	20 93 54 01 	sts	0x0154, r18
    1298:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    129a:	9f 70       	andi	r25, 0x0F	; 15
    129c:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret
    12a4:	9f 70       	andi	r25, 0x0F	; 15
    12a6:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    12ac:	08 95       	ret

000012ae <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <send_consumer+0x6>
    12b4:	1f 92       	push	r1
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12bc:	80 91 e2 01 	lds	r24, 0x01E2
    12c0:	84 30       	cpi	r24, 0x04	; 4
    12c2:	19 f5       	brne	.+70     	; 0x130a <send_consumer+0x5c>
        return;

    report_extra_t r = {
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    12c6:	99 83       	std	Y+1, r25	; 0x01
    12c8:	3b 83       	std	Y+3, r19	; 0x03
    12ca:	2a 83       	std	Y+2, r18	; 0x02
    12cc:	90 93 e9 00 	sts	0x00E9, r25
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12d2:	90 91 e8 00 	lds	r25, 0x00E8
    12d6:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12d8:	95 fd       	sbrc	r25, 5
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12dc:	95 ed       	ldi	r25, 0xD5	; 213
    12de:	9a 95       	dec	r25
    12e0:	f1 f7       	brne	.-4      	; 0x12de <send_consumer+0x30>
    12e2:	00 00       	nop
    12e4:	81 11       	cpse	r24, r1
    12e6:	f5 cf       	rjmp	.-22     	; 0x12d2 <send_consumer+0x24>
    12e8:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12ec:	85 ff       	sbrs	r24, 5
    12ee:	0d c0       	rjmp	.+26     	; 0x130a <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	63 e0       	ldi	r22, 0x03	; 3
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	0e 94 35 0c 	call	0x186a	; 0x186a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1300:	80 91 e8 00 	lds	r24, 0x00E8
    1304:	8e 77       	andi	r24, 0x7E	; 126
    1306:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	00 d0       	rcall	.+0      	; 0x131c <send_system+0x6>
    131c:	1f 92       	push	r1
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1322:	20 91 e2 01 	lds	r18, 0x01E2
    1326:	24 30       	cpi	r18, 0x04	; 4
    1328:	21 f5       	brne	.+72     	; 0x1372 <send_system+0x5c>
        return;

    report_extra_t r = {
    132a:	22 e0       	ldi	r18, 0x02	; 2
    132c:	29 83       	std	Y+1, r18	; 0x01
    132e:	9b 83       	std	Y+3, r25	; 0x03
    1330:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	80 93 e9 00 	sts	0x00E9, r24
    1338:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    133a:	90 91 e8 00 	lds	r25, 0x00E8
    133e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1340:	95 fd       	sbrc	r25, 5
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <send_system+0x3a>
    1344:	95 ed       	ldi	r25, 0xD5	; 213
    1346:	9a 95       	dec	r25
    1348:	f1 f7       	brne	.-4      	; 0x1346 <send_system+0x30>
    134a:	00 00       	nop
    134c:	81 11       	cpse	r24, r1
    134e:	f5 cf       	rjmp	.-22     	; 0x133a <send_system+0x24>
    1350:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1354:	85 ff       	sbrs	r24, 5
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	63 e0       	ldi	r22, 0x03	; 3
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	0e 94 35 0c 	call	0x186a	; 0x186a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1368:	80 91 e8 00 	lds	r24, 0x00E8
    136c:	8e 77       	andi	r24, 0x7E	; 126
    136e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
    137e:	9c 01       	movw	r18, r24
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1380:	80 91 e2 01 	lds	r24, 0x01E2
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	f9 f4       	brne	.+62     	; 0x13c6 <send_mouse+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	80 93 e9 00 	sts	0x00E9, r24
    138e:	9f ef       	ldi	r25, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1390:	80 91 e8 00 	lds	r24, 0x00E8
    1394:	91 50       	subi	r25, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1396:	85 fd       	sbrc	r24, 5
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <send_mouse+0x28>
    139a:	85 ed       	ldi	r24, 0xD5	; 213
    139c:	8a 95       	dec	r24
    139e:	f1 f7       	brne	.-4      	; 0x139c <send_mouse+0x1e>
    13a0:	00 00       	nop
    13a2:	91 11       	cpse	r25, r1
    13a4:	f5 cf       	rjmp	.-22     	; 0x1390 <send_mouse+0x12>
    13a6:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    13aa:	85 ff       	sbrs	r24, 5
    13ac:	0c c0       	rjmp	.+24     	; 0x13c6 <send_mouse+0x48>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	65 e0       	ldi	r22, 0x05	; 5
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	c9 01       	movw	r24, r18
    13b8:	0e 94 35 0c 	call	0x186a	; 0x186a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13bc:	80 91 e8 00 	lds	r24, 0x00E8
    13c0:	8e 77       	andi	r24, 0x7E	; 126
    13c2:	80 93 e8 00 	sts	0x00E8, r24
    13c6:	08 95       	ret

000013c8 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13ce:	80 91 e2 01 	lds	r24, 0x01E2
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <send_keyboard+0x10>
    13d6:	47 c0       	rjmp	.+142    	; 0x1466 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    13d8:	80 91 0b 01 	lds	r24, 0x010B
    13dc:	88 23       	and	r24, r24
    13de:	e1 f0       	breq	.+56     	; 0x1418 <send_keyboard+0x50>
    13e0:	80 91 0c 01 	lds	r24, 0x010C
    13e4:	88 23       	and	r24, r24
    13e6:	c1 f0       	breq	.+48     	; 0x1418 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13e8:	85 e0       	ldi	r24, 0x05	; 5
    13ea:	80 93 e9 00 	sts	0x00E9, r24
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13f0:	90 91 e8 00 	lds	r25, 0x00E8
    13f4:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    13f6:	95 fd       	sbrc	r25, 5
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <send_keyboard+0x3e>
    13fa:	95 e1       	ldi	r25, 0x15	; 21
    13fc:	9a 95       	dec	r25
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <send_keyboard+0x34>
    1400:	00 00       	nop
    1402:	81 11       	cpse	r24, r1
    1404:	f5 cf       	rjmp	.-22     	; 0x13f0 <send_keyboard+0x28>
    1406:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    140a:	85 ff       	sbrs	r24, 5
    140c:	2c c0       	rjmp	.+88     	; 0x1466 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	60 e1       	ldi	r22, 0x10	; 16
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	17 c0       	rjmp	.+46     	; 0x1446 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	80 93 e9 00 	sts	0x00E9, r24
    141e:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1420:	90 91 e8 00 	lds	r25, 0x00E8
    1424:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1426:	95 fd       	sbrc	r25, 5
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <send_keyboard+0x6e>
    142a:	95 ed       	ldi	r25, 0xD5	; 213
    142c:	9a 95       	dec	r25
    142e:	f1 f7       	brne	.-4      	; 0x142c <send_keyboard+0x64>
    1430:	00 00       	nop
    1432:	81 11       	cpse	r24, r1
    1434:	f5 cf       	rjmp	.-22     	; 0x1420 <send_keyboard+0x58>
    1436:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    143a:	85 ff       	sbrs	r24, 5
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	68 e0       	ldi	r22, 0x08	; 8
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	ce 01       	movw	r24, r28
    1448:	0e 94 35 0c 	call	0x186a	; 0x186a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    144c:	80 91 e8 00 	lds	r24, 0x00E8
    1450:	8e 77       	andi	r24, 0x7E	; 126
    1452:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1456:	80 e1       	ldi	r24, 0x10	; 16
    1458:	fe 01       	movw	r30, r28
    145a:	a5 e5       	ldi	r26, 0x55	; 85
    145c:	b1 e0       	ldi	r27, 0x01	; 1
    145e:	01 90       	ld	r0, Z+
    1460:	0d 92       	st	X+, r0
    1462:	8a 95       	dec	r24
    1464:	e1 f7       	brne	.-8      	; 0x145e <send_keyboard+0x96>
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    146c:	80 e6       	ldi	r24, 0x60	; 96
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1474:	80 91 e1 01 	lds	r24, 0x01E1
    1478:	81 11       	cpse	r24, r1
    147a:	09 c0       	rjmp	.+18     	; 0x148e <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    147c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <USB_Disable>
        USB_Init();
    1480:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1484:	80 91 e2 00 	lds	r24, 0x00E2
    1488:	84 60       	ori	r24, 0x04	; 4
    148a:	80 93 e2 00 	sts	0x00E2, r24
    148e:	08 95       	ret

00001490 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1490:	8c e5       	ldi	r24, 0x5C	; 92
    1492:	92 e0       	ldi	r25, 0x02	; 2
    1494:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1498:	10 92 e1 01 	sts	0x01E1, r1
    149c:	08 95       	ret

0000149e <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    149e:	88 e5       	ldi	r24, 0x58	; 88
    14a0:	92 e0       	ldi	r25, 0x02	; 2
    14a2:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <xputs>

000014a6 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    14a6:	20 91 53 01 	lds	r18, 0x0153
    14aa:	2f 5f       	subi	r18, 0xFF	; 255
    14ac:	82 2f       	mov	r24, r18
    14ae:	62 e3       	ldi	r22, 0x32	; 50
    14b0:	0e 94 43 2a 	call	0x5486	; 0x5486 <__udivmodqi4>
    14b4:	99 23       	and	r25, r25
    14b6:	19 f0       	breq	.+6      	; 0x14be <EVENT_USB_Device_StartOfFrame+0x18>
    14b8:	20 93 53 01 	sts	0x0153, r18
    14bc:	08 95       	ret
    count = 0;
    14be:	10 92 53 01 	sts	0x0153, r1

    if (!console_flush) return;
    14c2:	80 91 54 01 	lds	r24, 0x0154
    14c6:	88 23       	and	r24, r24
    14c8:	71 f1       	breq	.+92     	; 0x1526 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    14ca:	80 91 e2 01 	lds	r24, 0x01E2
    14ce:	84 30       	cpi	r24, 0x04	; 4
    14d0:	41 f5       	brne	.+80     	; 0x1522 <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14d2:	80 91 e9 00 	lds	r24, 0x00E9
    14d6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14d8:	20 91 ec 00 	lds	r18, 0x00EC
    14dc:	92 2f       	mov	r25, r18
    14de:	91 70       	andi	r25, 0x01	; 1
    14e0:	20 fd       	sbrc	r18, 0
    14e2:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14e4:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14e6:	94 e0       	ldi	r25, 0x04	; 4
    14e8:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14ec:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    14f0:	90 ff       	sbrs	r25, 0
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    14f4:	90 91 ee 00 	lds	r25, 0x00EE
    14f8:	97 ff       	sbrs	r25, 7
    14fa:	10 c0       	rjmp	.+32     	; 0x151c <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14fc:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1500:	95 ff       	sbrs	r25, 5
    1502:	03 c0       	rjmp	.+6      	; 0x150a <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1504:	10 92 f1 00 	sts	0x00F1, r1
    1508:	f9 cf       	rjmp	.-14     	; 0x14fc <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    150a:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    150e:	90 ff       	sbrs	r25, 0
    1510:	05 c0       	rjmp	.+10     	; 0x151c <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1512:	90 91 e8 00 	lds	r25, 0x00E8
    1516:	9e 77       	andi	r25, 0x7E	; 126
    1518:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    151c:	8f 70       	andi	r24, 0x0F	; 15
    151e:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1522:	10 92 54 01 	sts	0x0154, r1
    1526:	08 95       	ret

00001528 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1528:	42 e0       	ldi	r20, 0x02	; 2
    152a:	61 ec       	ldi	r22, 0xC1	; 193
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Endpoint_ConfigureEndpoint_Prv>
    1532:	42 e0       	ldi	r20, 0x02	; 2
    1534:	61 ec       	ldi	r22, 0xC1	; 193
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Endpoint_ConfigureEndpoint_Prv>
    153c:	42 e0       	ldi	r20, 0x02	; 2
    153e:	61 ec       	ldi	r22, 0xC1	; 193
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Endpoint_ConfigureEndpoint_Prv>
    1546:	42 e2       	ldi	r20, 0x22	; 34
    1548:	61 ec       	ldi	r22, 0xC1	; 193
    154a:	84 e0       	ldi	r24, 0x04	; 4
    154c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Endpoint_ConfigureEndpoint_Prv>
    1550:	42 e1       	ldi	r20, 0x12	; 18
    1552:	61 ec       	ldi	r22, 0xC1	; 193
    1554:	85 e0       	ldi	r24, 0x05	; 5
    1556:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <Endpoint_ConfigureEndpoint_Prv>

0000155a <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    155a:	80 91 e4 01 	lds	r24, 0x01E4
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	09 f4       	brne	.+2      	; 0x1564 <EVENT_USB_Device_ControlRequest+0xa>
    1562:	55 c0       	rjmp	.+170    	; 0x160e <EVENT_USB_Device_ControlRequest+0xb4>
    1564:	30 f4       	brcc	.+12     	; 0x1572 <EVENT_USB_Device_ControlRequest+0x18>
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	71 f0       	breq	.+28     	; 0x1586 <EVENT_USB_Device_ControlRequest+0x2c>
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	09 f4       	brne	.+2      	; 0x1570 <EVENT_USB_Device_ControlRequest+0x16>
    156e:	8e c0       	rjmp	.+284    	; 0x168c <EVENT_USB_Device_ControlRequest+0x132>
    1570:	08 95       	ret
    1572:	8a 30       	cpi	r24, 0x0A	; 10
    1574:	09 f4       	brne	.+2      	; 0x1578 <EVENT_USB_Device_ControlRequest+0x1e>
    1576:	7a c0       	rjmp	.+244    	; 0x166c <EVENT_USB_Device_ControlRequest+0x112>
    1578:	8b 30       	cpi	r24, 0x0B	; 11
    157a:	09 f4       	brne	.+2      	; 0x157e <EVENT_USB_Device_ControlRequest+0x24>
    157c:	60 c0       	rjmp	.+192    	; 0x163e <EVENT_USB_Device_ControlRequest+0xe4>
    157e:	89 30       	cpi	r24, 0x09	; 9
    1580:	09 f0       	breq	.+2      	; 0x1584 <EVENT_USB_Device_ControlRequest+0x2a>
    1582:	9c c0       	rjmp	.+312    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
    1584:	20 c0       	rjmp	.+64     	; 0x15c6 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1586:	80 91 e3 01 	lds	r24, 0x01E3
    158a:	81 3a       	cpi	r24, 0xA1	; 161
    158c:	09 f0       	breq	.+2      	; 0x1590 <EVENT_USB_Device_ControlRequest+0x36>
    158e:	96 c0       	rjmp	.+300    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1590:	80 91 e8 00 	lds	r24, 0x00E8
    1594:	87 7f       	andi	r24, 0xF7	; 247
    1596:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    159a:	80 91 e7 01 	lds	r24, 0x01E7
    159e:	90 91 e8 01 	lds	r25, 0x01E8
    15a2:	89 2b       	or	r24, r25
    15a4:	21 f4       	brne	.+8      	; 0x15ae <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    15a6:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    15a8:	85 e5       	ldi	r24, 0x55	; 85
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    15ae:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	0e 94 80 0c 	call	0x1900	; 0x1900 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15ba:	80 91 e8 00 	lds	r24, 0x00E8
    15be:	8b 77       	andi	r24, 0x7B	; 123
    15c0:	80 93 e8 00 	sts	0x00E8, r24
    15c4:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15c6:	80 91 e3 01 	lds	r24, 0x01E3
    15ca:	81 32       	cpi	r24, 0x21	; 33
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <EVENT_USB_Device_ControlRequest+0x76>
    15ce:	76 c0       	rjmp	.+236    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    15d0:	80 91 e7 01 	lds	r24, 0x01E7
    15d4:	90 91 e8 01 	lds	r25, 0x01E8
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	19 f0       	breq	.+6      	; 0x15e2 <EVENT_USB_Device_ControlRequest+0x88>
    15dc:	04 97       	sbiw	r24, 0x04	; 4
    15de:	09 f0       	breq	.+2      	; 0x15e2 <EVENT_USB_Device_ControlRequest+0x88>
    15e0:	6d c0       	rjmp	.+218    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15e2:	80 91 e8 00 	lds	r24, 0x00E8
    15e6:	87 7f       	andi	r24, 0xF7	; 247
    15e8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15ec:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    15f0:	82 fd       	sbrc	r24, 2
    15f2:	05 c0       	rjmp	.+10     	; 0x15fe <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    15f4:	80 91 e2 01 	lds	r24, 0x01E2
    15f8:	81 11       	cpse	r24, r1
    15fa:	f8 cf       	rjmp	.-16     	; 0x15ec <EVENT_USB_Device_ControlRequest+0x92>
    15fc:	5f c0       	rjmp	.+190    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15fe:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1602:	80 93 65 01 	sts	0x0165, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1606:	80 91 e8 00 	lds	r24, 0x00E8
    160a:	8b 77       	andi	r24, 0x7B	; 123
    160c:	53 c0       	rjmp	.+166    	; 0x16b4 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    160e:	80 91 e3 01 	lds	r24, 0x01E3
    1612:	81 3a       	cpi	r24, 0xA1	; 161
    1614:	09 f0       	breq	.+2      	; 0x1618 <EVENT_USB_Device_ControlRequest+0xbe>
    1616:	52 c0       	rjmp	.+164    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1618:	80 91 e7 01 	lds	r24, 0x01E7
    161c:	90 91 e8 01 	lds	r25, 0x01E8
    1620:	89 2b       	or	r24, r25
    1622:	09 f0       	breq	.+2      	; 0x1626 <EVENT_USB_Device_ControlRequest+0xcc>
    1624:	4b c0       	rjmp	.+150    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1626:	80 91 e8 00 	lds	r24, 0x00E8
    162a:	87 7f       	andi	r24, 0xF7	; 247
    162c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1630:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1634:	80 ff       	sbrs	r24, 0
    1636:	fc cf       	rjmp	.-8      	; 0x1630 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1638:	80 91 0b 01 	lds	r24, 0x010B
    163c:	36 c0       	rjmp	.+108    	; 0x16aa <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    163e:	80 91 e3 01 	lds	r24, 0x01E3
    1642:	81 32       	cpi	r24, 0x21	; 33
    1644:	d9 f5       	brne	.+118    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1646:	80 91 e7 01 	lds	r24, 0x01E7
    164a:	90 91 e8 01 	lds	r25, 0x01E8
    164e:	89 2b       	or	r24, r25
    1650:	a9 f5       	brne	.+106    	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1652:	80 91 e8 00 	lds	r24, 0x00E8
    1656:	87 7f       	andi	r24, 0xF7	; 247
    1658:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    165c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1660:	80 91 e5 01 	lds	r24, 0x01E5
    1664:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    1668:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    166c:	80 91 e3 01 	lds	r24, 0x01E3
    1670:	81 32       	cpi	r24, 0x21	; 33
    1672:	21 f5       	brne	.+72     	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
    1674:	80 91 e8 00 	lds	r24, 0x00E8
    1678:	87 7f       	andi	r24, 0xF7	; 247
    167a:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    167e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1682:	80 91 e6 01 	lds	r24, 0x01E6
    1686:	80 93 66 01 	sts	0x0166, r24
    168a:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    168c:	80 91 e3 01 	lds	r24, 0x01E3
    1690:	81 3a       	cpi	r24, 0xA1	; 161
    1692:	a1 f4       	brne	.+40     	; 0x16bc <EVENT_USB_Device_ControlRequest+0x162>
    1694:	80 91 e8 00 	lds	r24, 0x00E8
    1698:	87 7f       	andi	r24, 0xF7	; 247
    169a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    169e:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    16a2:	80 ff       	sbrs	r24, 0
    16a4:	fc cf       	rjmp	.-8      	; 0x169e <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    16a6:	80 91 66 01 	lds	r24, 0x0166
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16aa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ae:	80 91 e8 00 	lds	r24, 0x00E8
    16b2:	8e 77       	andi	r24, 0x7E	; 126
    16b4:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    16b8:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <Endpoint_ClearStatusStage>
    16bc:	08 95       	ret

000016be <hook_usb_suspend_entry>:
__attribute__((weak))
void hook_late_init(void) {}

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    16be:	08 95       	ret

000016c0 <hook_late_init>:
    16c0:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <hook_usb_suspend_entry>

000016c4 <hook_early_init>:
    16c4:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <hook_usb_suspend_entry>

000016c8 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    16c8:	84 e5       	ldi	r24, 0x54	; 84
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    hook_usb_suspend_entry();
    16d0:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <hook_usb_suspend_entry>

000016d4 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    16d4:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    16d8:	80 91 e0 01 	lds	r24, 0x01E0
    16dc:	88 23       	and	r24, r24
    16de:	29 f0       	breq	.+10     	; 0x16ea <hook_usb_suspend_loop+0x16>
    16e0:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <suspend_wakeup_condition>
    16e4:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    16e6:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <USB_Device_SendRemoteWakeup>
    16ea:	08 95       	ret

000016ec <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    16ec:	84 b7       	in	r24, 0x34	; 52
    16ee:	87 7f       	andi	r24, 0xF7	; 247
    16f0:	84 bf       	out	0x34, r24	; 52
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	a8 95       	wdr
    16f8:	80 91 60 00 	lds	r24, 0x0060
    16fc:	88 61       	ori	r24, 0x18	; 24
    16fe:	80 93 60 00 	sts	0x0060, r24
    1702:	10 92 60 00 	sts	0x0060, r1
    1706:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	80 e8       	ldi	r24, 0x80	; 128
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	80 93 61 00 	sts	0x0061, r24
    1714:	90 93 61 00 	sts	0x0061, r25
    1718:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    171a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <hook_early_init>
    keyboard_setup();
    171e:	0e 94 3e 11 	call	0x227c	; 0x227c <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1722:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <USB_Disable>

    USB_Init();
    1726:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <USB_Init>
    172a:	80 91 e2 00 	lds	r24, 0x00E2
    172e:	84 60       	ori	r24, 0x04	; 4
    1730:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1734:	84 ef       	ldi	r24, 0xF4	; 244
    1736:	98 e0       	ldi	r25, 0x08	; 8
    1738:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    173c:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    173e:	80 91 e2 01 	lds	r24, 0x01E2
    1742:	84 30       	cpi	r24, 0x04	; 4
    1744:	e1 f7       	brne	.-8      	; 0x173e <main+0x52>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1746:	8f e3       	ldi	r24, 0x3F	; 63
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    /* init modules */
    keyboard_init();
    174e:	0e 94 40 11 	call	0x2280	; 0x2280 <keyboard_init>
    host_set_driver(&lufa_driver);
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 ad 10 	call	0x215a	; 0x215a <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    175a:	8e e2       	ldi	r24, 0x2E	; 46
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    hook_late_init();
    1762:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1766:	80 91 e2 01 	lds	r24, 0x01E2
    176a:	85 30       	cpi	r24, 0x05	; 5
    176c:	39 f4       	brne	.+14     	; 0x177c <main+0x90>
            print("[s]");
    176e:	8a e2       	ldi	r24, 0x2A	; 42
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            hook_usb_suspend_loop();
    1776:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <hook_usb_suspend_loop>
    177a:	f5 cf       	rjmp	.-22     	; 0x1766 <main+0x7a>
        }

        keyboard_task();
    177c:	0e 94 46 11 	call	0x228c	; 0x228c <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1780:	f2 cf       	rjmp	.-28     	; 0x1766 <main+0x7a>

00001782 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1782:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <suspend_wakeup_init>

00001786 <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1786:	80 e5       	ldi	r24, 0x50	; 80
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    hook_usb_wakeup();
    178e:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <hook_usb_wakeup>

00001792 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1792:	29 2f       	mov	r18, r25
    1794:	33 27       	eor	r19, r19
    1796:	23 30       	cpi	r18, 0x03	; 3
    1798:	31 05       	cpc	r19, r1
    179a:	c9 f0       	breq	.+50     	; 0x17ce <CALLBACK_USB_GetDescriptor+0x3c>
    179c:	60 f4       	brcc	.+24     	; 0x17b6 <CALLBACK_USB_GetDescriptor+0x24>
    179e:	21 30       	cpi	r18, 0x01	; 1
    17a0:	31 05       	cpc	r19, r1
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <CALLBACK_USB_GetDescriptor+0x32>
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	09 f0       	breq	.+2      	; 0x17ac <CALLBACK_USB_GetDescriptor+0x1a>
    17aa:	41 c0       	rjmp	.+130    	; 0x182e <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    17ac:	8d e8       	ldi	r24, 0x8D	; 141
    17ae:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    17b0:	28 e8       	ldi	r18, 0x88	; 136
    17b2:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    17b4:	40 c0       	rjmp	.+128    	; 0x1836 <CALLBACK_USB_GetDescriptor+0xa4>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    17b6:	21 32       	cpi	r18, 0x21	; 33
    17b8:	31 05       	cpc	r19, r1
    17ba:	e1 f0       	breq	.+56     	; 0x17f4 <CALLBACK_USB_GetDescriptor+0x62>
    17bc:	22 32       	cpi	r18, 0x22	; 34
    17be:	31 05       	cpc	r19, r1
    17c0:	31 f1       	breq	.+76     	; 0x180e <CALLBACK_USB_GetDescriptor+0x7c>
    17c2:	35 c0       	rjmp	.+106    	; 0x182e <CALLBACK_USB_GetDescriptor+0x9c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    17c4:	82 e1       	ldi	r24, 0x12	; 18
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    17c8:	25 e1       	ldi	r18, 0x15	; 21
    17ca:	33 e0       	ldi	r19, 0x03	; 3
    17cc:	34 c0       	rjmp	.+104    	; 0x1836 <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    17ce:	99 27       	eor	r25, r25
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	49 f0       	breq	.+18     	; 0x17e8 <CALLBACK_USB_GetDescriptor+0x56>
    17d6:	28 f0       	brcs	.+10     	; 0x17e2 <CALLBACK_USB_GetDescriptor+0x50>
    17d8:	02 97       	sbiw	r24, 0x02	; 2
    17da:	49 f5       	brne	.+82     	; 0x182e <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    17dc:	e4 e6       	ldi	r30, 0x64	; 100
    17de:	f2 e0       	ldi	r31, 0x02	; 2
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <CALLBACK_USB_GetDescriptor+0x5a>
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    17e2:	e4 e8       	ldi	r30, 0x84	; 132
    17e4:	f2 e0       	ldi	r31, 0x02	; 2
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <CALLBACK_USB_GetDescriptor+0x5a>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    17e8:	e0 e7       	ldi	r30, 0x70	; 112
    17ea:	f2 e0       	ldi	r31, 0x02	; 2
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    17ec:	84 91       	lpm	r24, Z
    17ee:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    17f0:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    17f2:	21 c0       	rjmp	.+66     	; 0x1836 <CALLBACK_USB_GetDescriptor+0xa4>
    17f4:	65 30       	cpi	r22, 0x05	; 5
    17f6:	d8 f4       	brcc	.+54     	; 0x182e <CALLBACK_USB_GetDescriptor+0x9c>
    17f8:	e6 2f       	mov	r30, r22
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	ec 5d       	subi	r30, 0xDC	; 220
    1802:	fe 4f       	sbci	r31, 0xFE	; 254
    1804:	20 81       	ld	r18, Z
    1806:	31 81       	ldd	r19, Z+1	; 0x01
    1808:	89 e0       	ldi	r24, 0x09	; 9
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <CALLBACK_USB_GetDescriptor+0xa4>
    180e:	65 30       	cpi	r22, 0x05	; 5
    1810:	70 f4       	brcc	.+28     	; 0x182e <CALLBACK_USB_GetDescriptor+0x9c>
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	fb 01       	movw	r30, r22
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	e6 5e       	subi	r30, 0xE6	; 230
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	fb 01       	movw	r30, r22
    1824:	eb 5e       	subi	r30, 0xEB	; 235
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	80 81       	ld	r24, Z
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <CALLBACK_USB_GetDescriptor+0xa4>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1836:	fa 01       	movw	r30, r20
    1838:	31 83       	std	Z+1, r19	; 0x01
    183a:	20 83       	st	Z, r18
    return Size;
}
    183c:	08 95       	ret

0000183e <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    183e:	80 e1       	ldi	r24, 0x10	; 16
    1840:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1842:	82 e1       	ldi	r24, 0x12	; 18
    1844:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1846:	09 b4       	in	r0, 0x29	; 41
    1848:	00 fe       	sbrs	r0, 0
    184a:	fd cf       	rjmp	.-6      	; 0x1846 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    184c:	80 91 d8 00 	lds	r24, 0x00D8
    1850:	8f 7d       	andi	r24, 0xDF	; 223
    1852:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1856:	80 91 e0 00 	lds	r24, 0x00E0
    185a:	82 60       	ori	r24, 0x02	; 2
    185c:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1860:	80 91 e0 00 	lds	r24, 0x00E0
    1864:	81 fd       	sbrc	r24, 1
    1866:	fc cf       	rjmp	.-8      	; 0x1860 <USB_Device_SendRemoteWakeup+0x22>
}
    1868:	08 95       	ret

0000186a <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	ec 01       	movw	r28, r24
    187c:	8b 01       	movw	r16, r22
    187e:	6a 01       	movw	r12, r20
    1880:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Endpoint_WaitUntilReady>
    1884:	81 11       	cpse	r24, r1
    1886:	33 c0       	rjmp	.+102    	; 0x18ee <Endpoint_Write_Stream_LE+0x84>
    1888:	c1 14       	cp	r12, r1
    188a:	d1 04       	cpc	r13, r1
    188c:	39 f0       	breq	.+14     	; 0x189c <Endpoint_Write_Stream_LE+0x32>
    188e:	f6 01       	movw	r30, r12
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	08 1b       	sub	r16, r24
    1896:	19 0b       	sbc	r17, r25
    1898:	c8 0f       	add	r28, r24
    189a:	d9 1f       	adc	r29, r25
    189c:	e1 2c       	mov	r14, r1
    189e:	f1 2c       	mov	r15, r1
    18a0:	01 15       	cp	r16, r1
    18a2:	11 05       	cpc	r17, r1
    18a4:	19 f1       	breq	.+70     	; 0x18ec <Endpoint_Write_Stream_LE+0x82>
    18a6:	80 91 e8 00 	lds	r24, 0x00E8
    18aa:	85 fd       	sbrc	r24, 5
    18ac:	16 c0       	rjmp	.+44     	; 0x18da <Endpoint_Write_Stream_LE+0x70>
    18ae:	80 91 e8 00 	lds	r24, 0x00E8
    18b2:	8e 77       	andi	r24, 0x7E	; 126
    18b4:	80 93 e8 00 	sts	0x00E8, r24
    18b8:	c1 14       	cp	r12, r1
    18ba:	d1 04       	cpc	r13, r1
    18bc:	49 f0       	breq	.+18     	; 0x18d0 <Endpoint_Write_Stream_LE+0x66>
    18be:	f6 01       	movw	r30, r12
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	e8 0e       	add	r14, r24
    18c6:	f9 1e       	adc	r15, r25
    18c8:	f1 82       	std	Z+1, r15	; 0x01
    18ca:	e0 82       	st	Z, r14
    18cc:	85 e0       	ldi	r24, 0x05	; 5
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <Endpoint_Write_Stream_LE+0x84>
    18d0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Endpoint_WaitUntilReady>
    18d4:	88 23       	and	r24, r24
    18d6:	21 f3       	breq	.-56     	; 0x18a0 <Endpoint_Write_Stream_LE+0x36>
    18d8:	0a c0       	rjmp	.+20     	; 0x18ee <Endpoint_Write_Stream_LE+0x84>
    18da:	89 91       	ld	r24, Y+
    18dc:	80 93 f1 00 	sts	0x00F1, r24
    18e0:	01 50       	subi	r16, 0x01	; 1
    18e2:	11 09       	sbc	r17, r1
    18e4:	ff ef       	ldi	r31, 0xFF	; 255
    18e6:	ef 1a       	sub	r14, r31
    18e8:	ff 0a       	sbc	r15, r31
    18ea:	da cf       	rjmp	.-76     	; 0x18a0 <Endpoint_Write_Stream_LE+0x36>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret

00001900 <Endpoint_Write_Control_Stream_LE>:
    1900:	20 91 e9 01 	lds	r18, 0x01E9
    1904:	30 91 ea 01 	lds	r19, 0x01EA
    1908:	26 17       	cp	r18, r22
    190a:	37 07       	cpc	r19, r23
    190c:	48 f0       	brcs	.+18     	; 0x1920 <Endpoint_Write_Control_Stream_LE+0x20>
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	39 f4       	brne	.+14     	; 0x1922 <Endpoint_Write_Control_Stream_LE+0x22>
    1914:	20 91 e8 00 	lds	r18, 0x00E8
    1918:	2e 77       	andi	r18, 0x7E	; 126
    191a:	20 93 e8 00 	sts	0x00E8, r18
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <Endpoint_Write_Control_Stream_LE+0x22>
    1920:	b9 01       	movw	r22, r18
    1922:	fc 01       	movw	r30, r24
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	61 15       	cp	r22, r1
    1928:	71 05       	cpc	r23, r1
    192a:	79 f1       	breq	.+94     	; 0x198a <Endpoint_Write_Control_Stream_LE+0x8a>
    192c:	80 91 e2 01 	lds	r24, 0x01E2
    1930:	88 23       	and	r24, r24
    1932:	f1 f1       	breq	.+124    	; 0x19b0 <Endpoint_Write_Control_Stream_LE+0xb0>
    1934:	85 30       	cpi	r24, 0x05	; 5
    1936:	f1 f1       	breq	.+124    	; 0x19b4 <Endpoint_Write_Control_Stream_LE+0xb4>
    1938:	80 91 e8 00 	lds	r24, 0x00E8
    193c:	83 fd       	sbrc	r24, 3
    193e:	3c c0       	rjmp	.+120    	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0xb8>
    1940:	80 91 e8 00 	lds	r24, 0x00E8
    1944:	82 fd       	sbrc	r24, 2
    1946:	2e c0       	rjmp	.+92     	; 0x19a4 <Endpoint_Write_Control_Stream_LE+0xa4>
    1948:	80 91 e8 00 	lds	r24, 0x00E8
    194c:	80 ff       	sbrs	r24, 0
    194e:	eb cf       	rjmp	.-42     	; 0x1926 <Endpoint_Write_Control_Stream_LE+0x26>
    1950:	20 91 f3 00 	lds	r18, 0x00F3
    1954:	80 91 f2 00 	lds	r24, 0x00F2
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	92 2b       	or	r25, r18
    195c:	61 15       	cp	r22, r1
    195e:	71 05       	cpc	r23, r1
    1960:	51 f0       	breq	.+20     	; 0x1976 <Endpoint_Write_Control_Stream_LE+0x76>
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	91 05       	cpc	r25, r1
    1966:	38 f4       	brcc	.+14     	; 0x1976 <Endpoint_Write_Control_Stream_LE+0x76>
    1968:	21 91       	ld	r18, Z+
    196a:	20 93 f1 00 	sts	0x00F1, r18
    196e:	61 50       	subi	r22, 0x01	; 1
    1970:	71 09       	sbc	r23, r1
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	f3 cf       	rjmp	.-26     	; 0x195c <Endpoint_Write_Control_Stream_LE+0x5c>
    1976:	21 e0       	ldi	r18, 0x01	; 1
    1978:	08 97       	sbiw	r24, 0x08	; 8
    197a:	09 f0       	breq	.+2      	; 0x197e <Endpoint_Write_Control_Stream_LE+0x7e>
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	80 91 e8 00 	lds	r24, 0x00E8
    1982:	8e 77       	andi	r24, 0x7E	; 126
    1984:	80 93 e8 00 	sts	0x00E8, r24
    1988:	ce cf       	rjmp	.-100    	; 0x1926 <Endpoint_Write_Control_Stream_LE+0x26>
    198a:	21 11       	cpse	r18, r1
    198c:	cf cf       	rjmp	.-98     	; 0x192c <Endpoint_Write_Control_Stream_LE+0x2c>
    198e:	0a c0       	rjmp	.+20     	; 0x19a4 <Endpoint_Write_Control_Stream_LE+0xa4>
    1990:	80 91 e2 01 	lds	r24, 0x01E2
    1994:	88 23       	and	r24, r24
    1996:	61 f0       	breq	.+24     	; 0x19b0 <Endpoint_Write_Control_Stream_LE+0xb0>
    1998:	85 30       	cpi	r24, 0x05	; 5
    199a:	61 f0       	breq	.+24     	; 0x19b4 <Endpoint_Write_Control_Stream_LE+0xb4>
    199c:	80 91 e8 00 	lds	r24, 0x00E8
    19a0:	83 fd       	sbrc	r24, 3
    19a2:	0a c0       	rjmp	.+20     	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0xb8>
    19a4:	80 91 e8 00 	lds	r24, 0x00E8
    19a8:	82 ff       	sbrs	r24, 2
    19aa:	f2 cf       	rjmp	.-28     	; 0x1990 <Endpoint_Write_Control_Stream_LE+0x90>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	08 95       	ret
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	08 95       	ret
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	08 95       	ret
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	08 95       	ret

000019bc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19bc:	20 91 e9 01 	lds	r18, 0x01E9
    19c0:	30 91 ea 01 	lds	r19, 0x01EA
    19c4:	26 17       	cp	r18, r22
    19c6:	37 07       	cpc	r19, r23
    19c8:	48 f0       	brcs	.+18     	; 0x19dc <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19ca:	61 15       	cp	r22, r1
    19cc:	71 05       	cpc	r23, r1
    19ce:	39 f4       	brne	.+14     	; 0x19de <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19d0:	20 91 e8 00 	lds	r18, 0x00E8
    19d4:	2e 77       	andi	r18, 0x7E	; 126
    19d6:	20 93 e8 00 	sts	0x00E8, r18
    19da:	01 c0       	rjmp	.+2      	; 0x19de <Endpoint_Write_Control_PStream_LE+0x22>
    19dc:	b9 01       	movw	r22, r18
    19de:	fc 01       	movw	r30, r24
    19e0:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19e2:	61 15       	cp	r22, r1
    19e4:	71 05       	cpc	r23, r1
    19e6:	91 f1       	breq	.+100    	; 0x1a4c <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19e8:	80 91 e2 01 	lds	r24, 0x01E2

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19ec:	88 23       	and	r24, r24
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <Endpoint_Write_Control_PStream_LE+0x36>
    19f0:	40 c0       	rjmp	.+128    	; 0x1a72 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19f2:	85 30       	cpi	r24, 0x05	; 5
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x3c>
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19f8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19fc:	83 fd       	sbrc	r24, 3
    19fe:	3d c0       	rjmp	.+122    	; 0x1a7a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a00:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a04:	82 fd       	sbrc	r24, 2
    1a06:	2f c0       	rjmp	.+94     	; 0x1a66 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a08:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a0c:	80 ff       	sbrs	r24, 0
    1a0e:	e9 cf       	rjmp	.-46     	; 0x19e2 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a10:	20 91 f3 00 	lds	r18, 0x00F3
    1a14:	80 91 f2 00 	lds	r24, 0x00F2
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a1c:	61 15       	cp	r22, r1
    1a1e:	71 05       	cpc	r23, r1
    1a20:	59 f0       	breq	.+22     	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0x7c>
    1a22:	88 30       	cpi	r24, 0x08	; 8
    1a24:	91 05       	cpc	r25, r1
    1a26:	40 f4       	brcc	.+16     	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a28:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a2a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a2e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a30:	61 50       	subi	r22, 0x01	; 1
    1a32:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	f2 cf       	rjmp	.-28     	; 0x1a1c <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	08 97       	sbiw	r24, 0x08	; 8
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <Endpoint_Write_Control_PStream_LE+0x84>
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a40:	80 91 e8 00 	lds	r24, 0x00E8
    1a44:	8e 77       	andi	r24, 0x7E	; 126
    1a46:	80 93 e8 00 	sts	0x00E8, r24
    1a4a:	cb cf       	rjmp	.-106    	; 0x19e2 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a4c:	21 11       	cpse	r18, r1
    1a4e:	cc cf       	rjmp	.-104    	; 0x19e8 <Endpoint_Write_Control_PStream_LE+0x2c>
    1a50:	0a c0       	rjmp	.+20     	; 0x1a66 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a52:	80 91 e2 01 	lds	r24, 0x01E2

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a56:	88 23       	and	r24, r24
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a5a:	85 30       	cpi	r24, 0x05	; 5
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a5e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a62:	83 fd       	sbrc	r24, 3
    1a64:	0a c0       	rjmp	.+20     	; 0x1a7a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a66:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a6a:	82 ff       	sbrs	r24, 2
    1a6c:	f2 cf       	rjmp	.-28     	; 0x1a52 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a7c:	08 95       	ret

00001a7e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1a7e:	98 2f       	mov	r25, r24
    1a80:	97 30       	cpi	r25, 0x07	; 7
    1a82:	68 f5       	brcc	.+90     	; 0x1ade <Endpoint_ConfigureEndpoint_Prv+0x60>
    1a84:	90 93 e9 00 	sts	0x00E9, r25
    1a88:	98 17       	cp	r25, r24
    1a8a:	39 f0       	breq	.+14     	; 0x1a9a <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1a8c:	70 91 ec 00 	lds	r23, 0x00EC
    1a90:	20 91 ed 00 	lds	r18, 0x00ED
    1a94:	50 91 f0 00 	lds	r21, 0x00F0
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1a9a:	24 2f       	mov	r18, r20
    1a9c:	76 2f       	mov	r23, r22
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	21 fd       	sbrc	r18, 1
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1aa4:	9f 5f       	subi	r25, 0xFF	; 255
    1aa6:	ec cf       	rjmp	.-40     	; 0x1a80 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1aa8:	30 91 eb 00 	lds	r19, 0x00EB
    1aac:	3e 7f       	andi	r19, 0xFE	; 254
    1aae:	30 93 eb 00 	sts	0x00EB, r19
    1ab2:	30 91 ed 00 	lds	r19, 0x00ED
    1ab6:	3d 7f       	andi	r19, 0xFD	; 253
    1ab8:	30 93 ed 00 	sts	0x00ED, r19
    1abc:	30 91 eb 00 	lds	r19, 0x00EB
    1ac0:	31 60       	ori	r19, 0x01	; 1
    1ac2:	30 93 eb 00 	sts	0x00EB, r19
    1ac6:	70 93 ec 00 	sts	0x00EC, r23
    1aca:	20 93 ed 00 	sts	0x00ED, r18
    1ace:	50 93 f0 00 	sts	0x00F0, r21
    1ad2:	20 91 ee 00 	lds	r18, 0x00EE
    1ad6:	27 fd       	sbrc	r18, 7
    1ad8:	e5 cf       	rjmp	.-54     	; 0x1aa4 <Endpoint_ConfigureEndpoint_Prv+0x26>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	08 95       	ret
    1ade:	8f 70       	andi	r24, 0x0F	; 15
    1ae0:	80 93 e9 00 	sts	0x00E9, r24
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	08 95       	ret

00001ae8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ae8:	80 91 e3 01 	lds	r24, 0x01E3
    1aec:	87 ff       	sbrs	r24, 7
    1aee:	11 c0       	rjmp	.+34     	; 0x1b12 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1af0:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1af4:	82 fd       	sbrc	r24, 2
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1af8:	80 91 e2 01 	lds	r24, 0x01E2
    1afc:	81 11       	cpse	r24, r1
    1afe:	f8 cf       	rjmp	.-16     	; 0x1af0 <Endpoint_ClearStatusStage+0x8>
    1b00:	11 c0       	rjmp	.+34     	; 0x1b24 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b02:	80 91 e8 00 	lds	r24, 0x00E8
    1b06:	8b 77       	andi	r24, 0x7B	; 123
    1b08:	0b c0       	rjmp	.+22     	; 0x1b20 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b0a:	80 91 e2 01 	lds	r24, 0x01E2
    1b0e:	88 23       	and	r24, r24
    1b10:	49 f0       	breq	.+18     	; 0x1b24 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b12:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b16:	80 ff       	sbrs	r24, 0
    1b18:	f8 cf       	rjmp	.-16     	; 0x1b0a <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b1a:	80 91 e8 00 	lds	r24, 0x00E8
    1b1e:	8e 77       	andi	r24, 0x7E	; 126
    1b20:	80 93 e8 00 	sts	0x00E8, r24
    1b24:	08 95       	ret

00001b26 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b26:	20 91 e4 00 	lds	r18, 0x00E4
    1b2a:	30 91 e5 00 	lds	r19, 0x00E5
    1b2e:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b30:	40 91 ec 00 	lds	r20, 0x00EC
    1b34:	84 2f       	mov	r24, r20
    1b36:	81 70       	andi	r24, 0x01	; 1
    1b38:	40 ff       	sbrs	r20, 0
    1b3a:	23 c0       	rjmp	.+70     	; 0x1b82 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b3c:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b40:	80 fd       	sbrc	r24, 0
    1b42:	1d c0       	rjmp	.+58     	; 0x1b7e <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b44:	80 91 e2 01 	lds	r24, 0x01E2

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b48:	88 23       	and	r24, r24
    1b4a:	99 f0       	breq	.+38     	; 0x1b72 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b4c:	85 30       	cpi	r24, 0x05	; 5
    1b4e:	99 f0       	breq	.+38     	; 0x1b76 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b50:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b54:	85 fd       	sbrc	r24, 5
    1b56:	11 c0       	rjmp	.+34     	; 0x1b7a <Endpoint_WaitUntilReady+0x54>
    1b58:	40 91 e4 00 	lds	r20, 0x00E4
    1b5c:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b60:	24 17       	cp	r18, r20
    1b62:	35 07       	cpc	r19, r21
    1b64:	29 f3       	breq	.-54     	; 0x1b30 <Endpoint_WaitUntilReady+0xa>
    1b66:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <Endpoint_WaitUntilReady+0x48>
    1b6a:	9a 01       	movw	r18, r20
    1b6c:	e1 cf       	rjmp	.-62     	; 0x1b30 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b6e:	84 e0       	ldi	r24, 0x04	; 4
    1b70:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b82:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b86:	42 ff       	sbrs	r20, 2
    1b88:	dd cf       	rjmp	.-70     	; 0x1b44 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1b8a:	08 95       	ret

00001b8c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b8c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b90:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b94:	e0 ee       	ldi	r30, 0xE0	; 224
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	81 60       	ori	r24, 0x01	; 1
    1b9c:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b9e:	e8 ed       	ldi	r30, 0xD8	; 216
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8f 77       	andi	r24, 0x7F	; 127
    1ba6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ba8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1baa:	a7 ed       	ldi	r26, 0xD7	; 215
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	8c 91       	ld	r24, X
    1bb0:	8e 7f       	andi	r24, 0xFE	; 254
    1bb2:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 7e       	andi	r24, 0xEF	; 239
    1bb8:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1bba:	10 92 e1 01 	sts	0x01E1, r1
    1bbe:	08 95       	ret

00001bc0 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1bc8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bcc:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1bd0:	c8 ed       	ldi	r28, 0xD8	; 216
    1bd2:	d0 e0       	ldi	r29, 0x00	; 0
    1bd4:	88 81       	ld	r24, Y
    1bd6:	8f 77       	andi	r24, 0x7F	; 127
    1bd8:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1bda:	88 81       	ld	r24, Y
    1bdc:	80 68       	ori	r24, 0x80	; 128
    1bde:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1be0:	88 81       	ld	r24, Y
    1be2:	8f 7d       	andi	r24, 0xDF	; 223
    1be4:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1be6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1be8:	10 92 e2 01 	sts	0x01E2, r1
	USB_Device_ConfigurationNumber  = 0;
    1bec:	10 92 de 01 	sts	0x01DE, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bf0:	10 92 e0 01 	sts	0x01E0, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bf4:	10 92 df 01 	sts	0x01DF, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bf8:	00 ee       	ldi	r16, 0xE0	; 224
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	80 81       	ld	r24, Z
    1c00:	8b 7f       	andi	r24, 0xFB	; 251
    1c02:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c04:	88 81       	ld	r24, Y
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c0a:	42 e0       	ldi	r20, 0x02	; 2
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c14:	e1 ee       	ldi	r30, 0xE1	; 225
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8e 7f       	andi	r24, 0xFE	; 254
    1c1c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c1e:	e2 ee       	ldi	r30, 0xE2	; 226
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	81 60       	ori	r24, 0x01	; 1
    1c26:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 60       	ori	r24, 0x08	; 8
    1c2c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c2e:	f8 01       	movw	r30, r16
    1c30:	80 81       	ld	r24, Z
    1c32:	8e 7f       	andi	r24, 0xFE	; 254
    1c34:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c36:	88 81       	ld	r24, Y
    1c38:	80 61       	ori	r24, 0x10	; 16
    1c3a:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	08 95       	ret

00001c46 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c46:	e8 ed       	ldi	r30, 0xD8	; 216
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8f 7e       	andi	r24, 0xEF	; 239
    1c4e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c50:	e7 ed       	ldi	r30, 0xD7	; 215
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	81 60       	ori	r24, 0x01	; 1
    1c58:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c5a:	84 e0       	ldi	r24, 0x04	; 4
    1c5c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 e1 01 	sts	0x01E1, r24

	USB_ResetInterface();
    1c64:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <USB_ResetInterface>

00001c68 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c68:	e8 ed       	ldi	r30, 0xD8	; 216
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8e 7f       	andi	r24, 0xFE	; 254
    1c70:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c72:	10 92 e2 00 	sts	0x00E2, r1
    1c76:	08 95       	ret

00001c78 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c78:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c7c:	10 92 e1 00 	sts	0x00E1, r1
    1c80:	08 95       	ret

00001c82 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	2f 93       	push	r18
    1c8e:	3f 93       	push	r19
    1c90:	4f 93       	push	r20
    1c92:	5f 93       	push	r21
    1c94:	6f 93       	push	r22
    1c96:	7f 93       	push	r23
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	af 93       	push	r26
    1c9e:	bf 93       	push	r27
    1ca0:	ef 93       	push	r30
    1ca2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1ca4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1ca8:	82 ff       	sbrs	r24, 2
    1caa:	0b c0       	rjmp	.+22     	; 0x1cc2 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1cac:	80 91 e2 00 	lds	r24, 0x00E2
    1cb0:	82 ff       	sbrs	r24, 2
    1cb2:	07 c0       	rjmp	.+14     	; 0x1cc2 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1cb4:	80 91 e1 00 	lds	r24, 0x00E1
    1cb8:	8b 7f       	andi	r24, 0xFB	; 251
    1cba:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1cbe:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1cc2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1cc6:	80 ff       	sbrs	r24, 0
    1cc8:	1f c0       	rjmp	.+62     	; 0x1d08 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1cca:	80 91 d8 00 	lds	r24, 0x00D8
    1cce:	80 ff       	sbrs	r24, 0
    1cd0:	1b c0       	rjmp	.+54     	; 0x1d08 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1cd2:	80 91 da 00 	lds	r24, 0x00DA
    1cd6:	8e 7f       	andi	r24, 0xFE	; 254
    1cd8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1cdc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1ce0:	80 ff       	sbrs	r24, 0
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ce4:	80 e1       	ldi	r24, 0x10	; 16
    1ce6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ce8:	82 e1       	ldi	r24, 0x12	; 18
    1cea:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1cec:	09 b4       	in	r0, 0x29	; 41
    1cee:	00 fe       	sbrs	r0, 0
    1cf0:	fd cf       	rjmp	.-6      	; 0x1cec <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	80 93 e2 01 	sts	0x01E2, r24
			EVENT_USB_Device_Connect();
    1cf8:	0e 94 36 0a 	call	0x146c	; 0x146c <EVENT_USB_Device_Connect>
    1cfc:	05 c0       	rjmp	.+10     	; 0x1d08 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cfe:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d00:	10 92 e2 01 	sts	0x01E2, r1
			EVENT_USB_Device_Disconnect();
    1d04:	0e 94 48 0a 	call	0x1490	; 0x1490 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d08:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d0c:	80 ff       	sbrs	r24, 0
    1d0e:	19 c0       	rjmp	.+50     	; 0x1d42 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d10:	80 91 e2 00 	lds	r24, 0x00E2
    1d14:	80 ff       	sbrs	r24, 0
    1d16:	15 c0       	rjmp	.+42     	; 0x1d42 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d18:	80 91 e2 00 	lds	r24, 0x00E2
    1d1c:	8e 7f       	andi	r24, 0xFE	; 254
    1d1e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d22:	80 91 e2 00 	lds	r24, 0x00E2
    1d26:	80 61       	ori	r24, 0x10	; 16
    1d28:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d2c:	80 91 d8 00 	lds	r24, 0x00D8
    1d30:	80 62       	ori	r24, 0x20	; 32
    1d32:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d36:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d38:	85 e0       	ldi	r24, 0x05	; 5
    1d3a:	80 93 e2 01 	sts	0x01E2, r24
		EVENT_USB_Device_Suspend();
    1d3e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d42:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d46:	84 ff       	sbrs	r24, 4
    1d48:	30 c0       	rjmp	.+96     	; 0x1daa <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d4a:	80 91 e2 00 	lds	r24, 0x00E2
    1d4e:	84 ff       	sbrs	r24, 4
    1d50:	2c c0       	rjmp	.+88     	; 0x1daa <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d52:	80 e1       	ldi	r24, 0x10	; 16
    1d54:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d56:	82 e1       	ldi	r24, 0x12	; 18
    1d58:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d5a:	09 b4       	in	r0, 0x29	; 41
    1d5c:	00 fe       	sbrs	r0, 0
    1d5e:	fd cf       	rjmp	.-6      	; 0x1d5a <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d60:	80 91 d8 00 	lds	r24, 0x00D8
    1d64:	8f 7d       	andi	r24, 0xDF	; 223
    1d66:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d6a:	80 91 e1 00 	lds	r24, 0x00E1
    1d6e:	8f 7e       	andi	r24, 0xEF	; 239
    1d70:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d74:	80 91 e2 00 	lds	r24, 0x00E2
    1d78:	8f 7e       	andi	r24, 0xEF	; 239
    1d7a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d7e:	80 91 e2 00 	lds	r24, 0x00E2
    1d82:	81 60       	ori	r24, 0x01	; 1
    1d84:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d88:	80 91 de 01 	lds	r24, 0x01DE
    1d8c:	88 23       	and	r24, r24
    1d8e:	11 f0       	breq	.+4      	; 0x1d94 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d94:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d98:	87 fd       	sbrc	r24, 7
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <__vector_10+0x11e>
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <__vector_10+0x120>
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	80 93 e2 01 	sts	0x01E2, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1da6:	0e 94 c3 0b 	call	0x1786	; 0x1786 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1daa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1dae:	83 ff       	sbrs	r24, 3
    1db0:	29 c0       	rjmp	.+82     	; 0x1e04 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1db2:	80 91 e2 00 	lds	r24, 0x00E2
    1db6:	83 ff       	sbrs	r24, 3
    1db8:	25 c0       	rjmp	.+74     	; 0x1e04 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1dba:	80 91 e1 00 	lds	r24, 0x00E1
    1dbe:	87 7f       	andi	r24, 0xF7	; 247
    1dc0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	80 93 e2 01 	sts	0x01E2, r24
		USB_Device_ConfigurationNumber = 0;
    1dca:	10 92 de 01 	sts	0x01DE, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1dce:	80 91 e1 00 	lds	r24, 0x00E1
    1dd2:	8e 7f       	andi	r24, 0xFE	; 254
    1dd4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1dd8:	80 91 e2 00 	lds	r24, 0x00E2
    1ddc:	8e 7f       	andi	r24, 0xFE	; 254
    1dde:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1de2:	80 91 e2 00 	lds	r24, 0x00E2
    1de6:	80 61       	ori	r24, 0x10	; 16
    1de8:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1dec:	42 e0       	ldi	r20, 0x02	; 2
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1df6:	80 91 f0 00 	lds	r24, 0x00F0
    1dfa:	88 60       	ori	r24, 0x08	; 8
    1dfc:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e00:	0e 94 4f 0a 	call	0x149e	; 0x149e <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e04:	ff 91       	pop	r31
    1e06:	ef 91       	pop	r30
    1e08:	bf 91       	pop	r27
    1e0a:	af 91       	pop	r26
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	7f 91       	pop	r23
    1e12:	6f 91       	pop	r22
    1e14:	5f 91       	pop	r21
    1e16:	4f 91       	pop	r20
    1e18:	3f 91       	pop	r19
    1e1a:	2f 91       	pop	r18
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti

00001e26 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e4c:	c0 91 e9 00 	lds	r28, 0x00E9
    1e50:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e52:	80 91 ec 00 	lds	r24, 0x00EC
    1e56:	d8 2f       	mov	r29, r24
    1e58:	d1 70       	andi	r29, 0x01	; 1
    1e5a:	80 fd       	sbrc	r24, 0
    1e5c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e5e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1e62:	80 91 f0 00 	lds	r24, 0x00F0
    1e66:	87 7f       	andi	r24, 0xF7	; 247
    1e68:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e6c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e6e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <USB_Device_ProcessControlRequest>
    1e72:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e76:	80 91 f0 00 	lds	r24, 0x00F0
    1e7a:	88 60       	ori	r24, 0x08	; 8
    1e7c:	80 93 f0 00 	sts	0x00F0, r24
    1e80:	cd 2b       	or	r28, r29
    1e82:	cf 70       	andi	r28, 0x0F	; 15
    1e84:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e88:	ff 91       	pop	r31
    1e8a:	ef 91       	pop	r30
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	bf 91       	pop	r27
    1e92:	af 91       	pop	r26
    1e94:	9f 91       	pop	r25
    1e96:	8f 91       	pop	r24
    1e98:	7f 91       	pop	r23
    1e9a:	6f 91       	pop	r22
    1e9c:	5f 91       	pop	r21
    1e9e:	4f 91       	pop	r20
    1ea0:	3f 91       	pop	r19
    1ea2:	2f 91       	pop	r18
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1eae:	1f 93       	push	r17
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	aa 97       	sbiw	r28, 0x2a	; 42
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	e3 ee       	ldi	r30, 0xE3	; 227
    1ec6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ec8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ecc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ece:	21 e0       	ldi	r18, 0x01	; 1
    1ed0:	eb 3e       	cpi	r30, 0xEB	; 235
    1ed2:	f2 07       	cpc	r31, r18
    1ed4:	c9 f7       	brne	.-14     	; 0x1ec8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1ed6:	0e 94 ad 0a 	call	0x155a	; 0x155a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1eda:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1ede:	83 ff       	sbrs	r24, 3
    1ee0:	24 c1       	rjmp	.+584    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1ee2:	80 91 e3 01 	lds	r24, 0x01E3

		switch (USB_ControlRequest.bRequest)
    1ee6:	90 91 e4 01 	lds	r25, 0x01E4
    1eea:	49 2f       	mov	r20, r25
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	4a 30       	cpi	r20, 0x0A	; 10
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	08 f0       	brcs	.+2      	; 0x1ef6 <USB_Device_ProcessControlRequest+0x48>
    1ef4:	1a c1       	rjmp	.+564    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
    1ef6:	fa 01       	movw	r30, r20
    1ef8:	ea 5a       	subi	r30, 0xAA	; 170
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	0c 94 63 2a 	jmp	0x54c6	; 0x54c6 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f00:	80 38       	cpi	r24, 0x80	; 128
    1f02:	81 f0       	breq	.+32     	; 0x1f24 <USB_Device_ProcessControlRequest+0x76>
    1f04:	82 38       	cpi	r24, 0x82	; 130
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <USB_Device_ProcessControlRequest+0x5c>
    1f08:	10 c1       	rjmp	.+544    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f0a:	80 91 e7 01 	lds	r24, 0x01E7
    1f0e:	8f 70       	andi	r24, 0x0F	; 15
    1f10:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f14:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1f18:	85 fb       	bst	r24, 5
    1f1a:	88 27       	eor	r24, r24
    1f1c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f1e:	10 92 e9 00 	sts	0x00E9, r1
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f24:	80 91 df 01 	lds	r24, 0x01DF
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f28:	90 91 e0 01 	lds	r25, 0x01E0
    1f2c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f2e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f30:	90 91 e8 00 	lds	r25, 0x00E8
    1f34:	97 7f       	andi	r25, 0xF7	; 247
    1f36:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f3a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1f3e:	10 92 f1 00 	sts	0x00F1, r1
    1f42:	c8 c0       	rjmp	.+400    	; 0x20d4 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f44:	28 2f       	mov	r18, r24
    1f46:	2d 7f       	andi	r18, 0xFD	; 253
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <USB_Device_ProcessControlRequest+0x9e>
    1f4a:	ef c0       	rjmp	.+478    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f4c:	88 23       	and	r24, r24
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <USB_Device_ProcessControlRequest+0xa8>
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	61 f0       	breq	.+24     	; 0x1f6c <USB_Device_ProcessControlRequest+0xbe>
    1f54:	ea c0       	rjmp	.+468    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f56:	80 91 e5 01 	lds	r24, 0x01E5
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <USB_Device_ProcessControlRequest+0xb2>
    1f5e:	e5 c0       	rjmp	.+458    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f60:	93 30       	cpi	r25, 0x03	; 3
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <USB_Device_ProcessControlRequest+0xb8>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	80 93 e0 01 	sts	0x01E0, r24
    1f6a:	2b c0       	rjmp	.+86     	; 0x1fc2 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f6c:	80 91 e5 01 	lds	r24, 0x01E5
    1f70:	81 11       	cpse	r24, r1
    1f72:	27 c0       	rjmp	.+78     	; 0x1fc2 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f74:	80 91 e7 01 	lds	r24, 0x01E7
    1f78:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <USB_Device_ProcessControlRequest+0xd0>
    1f7c:	d6 c0       	rjmp	.+428    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f7e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f82:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f86:	20 ff       	sbrs	r18, 0
    1f88:	1c c0       	rjmp	.+56     	; 0x1fc2 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f8a:	93 30       	cpi	r25, 0x03	; 3
    1f8c:	21 f4       	brne	.+8      	; 0x1f96 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f8e:	80 91 eb 00 	lds	r24, 0x00EB
    1f92:	80 62       	ori	r24, 0x20	; 32
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f96:	90 91 eb 00 	lds	r25, 0x00EB
    1f9a:	90 61       	ori	r25, 0x10	; 16
    1f9c:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1fa0:	21 e0       	ldi	r18, 0x01	; 1
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	a9 01       	movw	r20, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <USB_Device_ProcessControlRequest+0xfe>
    1fa8:	44 0f       	add	r20, r20
    1faa:	55 1f       	adc	r21, r21
    1fac:	8a 95       	dec	r24
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <USB_Device_ProcessControlRequest+0xfa>
    1fb0:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1fb4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fb8:	80 91 eb 00 	lds	r24, 0x00EB
    1fbc:	88 60       	ori	r24, 0x08	; 8
    1fbe:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fc2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fc6:	80 91 e8 00 	lds	r24, 0x00E8
    1fca:	87 7f       	andi	r24, 0xF7	; 247
    1fcc:	86 c0       	rjmp	.+268    	; 0x20da <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fce:	81 11       	cpse	r24, r1
    1fd0:	ac c0       	rjmp	.+344    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1fd2:	10 91 e5 01 	lds	r17, 0x01E5
    1fd6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1fd8:	80 91 e3 00 	lds	r24, 0x00E3
    1fdc:	80 78       	andi	r24, 0x80	; 128
    1fde:	81 2b       	or	r24, r17
    1fe0:	80 93 e3 00 	sts	0x00E3, r24
    1fe4:	80 91 e8 00 	lds	r24, 0x00E8
    1fe8:	87 7f       	andi	r24, 0xF7	; 247
    1fea:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1fee:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ff2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1ff6:	80 ff       	sbrs	r24, 0
    1ff8:	fc cf       	rjmp	.-8      	; 0x1ff2 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1ffa:	80 91 e3 00 	lds	r24, 0x00E3
    1ffe:	80 68       	ori	r24, 0x80	; 128
    2000:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2004:	11 11       	cpse	r17, r1
    2006:	02 c0       	rjmp	.+4      	; 0x200c <USB_Device_ProcessControlRequest+0x15e>
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	01 c0       	rjmp	.+2      	; 0x200e <USB_Device_ProcessControlRequest+0x160>
    200c:	83 e0       	ldi	r24, 0x03	; 3
    200e:	80 93 e2 01 	sts	0x01E2, r24
    2012:	8b c0       	rjmp	.+278    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2014:	80 58       	subi	r24, 0x80	; 128
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	08 f0       	brcs	.+2      	; 0x201c <USB_Device_ProcessControlRequest+0x16e>
    201a:	87 c0       	rjmp	.+270    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    201c:	80 91 e5 01 	lds	r24, 0x01E5
    2020:	90 91 e6 01 	lds	r25, 0x01E6
    2024:	8c 3d       	cpi	r24, 0xDC	; 220
    2026:	53 e0       	ldi	r21, 0x03	; 3
    2028:	95 07       	cpc	r25, r21
    202a:	79 f5       	brne	.+94     	; 0x208a <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2030:	8a e2       	ldi	r24, 0x2A	; 42
    2032:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2034:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2036:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2038:	de 01       	movw	r26, r28
    203a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    203c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    203e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2040:	51 e2       	ldi	r21, 0x21	; 33
    2042:	e3 2f       	mov	r30, r19
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	50 93 57 00 	sts	0x0057, r21
    204a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    204c:	20 ff       	sbrs	r18, 0
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    2050:	e2 95       	swap	r30
    2052:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2054:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2056:	ef 70       	andi	r30, 0x0F	; 15
    2058:	8e 2f       	mov	r24, r30
    205a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    205c:	ea 30       	cpi	r30, 0x0A	; 10
    205e:	10 f0       	brcs	.+4      	; 0x2064 <USB_Device_ProcessControlRequest+0x1b6>
    2060:	c7 96       	adiw	r24, 0x37	; 55
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <USB_Device_ProcessControlRequest+0x1b8>
    2064:	c0 96       	adiw	r24, 0x30	; 48
    2066:	8d 93       	st	X+, r24
    2068:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    206a:	2f 5f       	subi	r18, 0xFF	; 255
    206c:	24 31       	cpi	r18, 0x14	; 20
    206e:	49 f7       	brne	.-46     	; 0x2042 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2070:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2072:	80 91 e8 00 	lds	r24, 0x00E8
    2076:	87 7f       	andi	r24, 0xF7	; 247
    2078:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    207c:	6a e2       	ldi	r22, 0x2A	; 42
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	ce 01       	movw	r24, r28
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	0e 94 80 0c 	call	0x1900	; 0x1900 <Endpoint_Write_Control_Stream_LE>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    208a:	ae 01       	movw	r20, r28
    208c:	4f 5f       	subi	r20, 0xFF	; 255
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	60 91 e7 01 	lds	r22, 0x01E7
    2094:	0e 94 c9 0b 	call	0x1792	; 0x1792 <CALLBACK_USB_GetDescriptor>
    2098:	bc 01       	movw	r22, r24
    209a:	89 2b       	or	r24, r25
    209c:	09 f4       	brne	.+2      	; 0x20a0 <USB_Device_ProcessControlRequest+0x1f2>
    209e:	45 c0       	rjmp	.+138    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
    20a0:	90 91 e8 00 	lds	r25, 0x00E8
    20a4:	97 7f       	andi	r25, 0xF7	; 247
    20a6:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	0e 94 de 0c 	call	0x19bc	; 0x19bc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20b2:	80 91 e8 00 	lds	r24, 0x00E8
    20b6:	8b 77       	andi	r24, 0x7B	; 123
    20b8:	80 93 e8 00 	sts	0x00E8, r24
    20bc:	36 c0       	rjmp	.+108    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    20be:	80 38       	cpi	r24, 0x80	; 128
    20c0:	a1 f5       	brne	.+104    	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20c2:	80 91 e8 00 	lds	r24, 0x00E8
    20c6:	87 7f       	andi	r24, 0xF7	; 247
    20c8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    20cc:	80 91 de 01 	lds	r24, 0x01DE
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20d0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20d4:	80 91 e8 00 	lds	r24, 0x00E8
    20d8:	8e 77       	andi	r24, 0x7E	; 126
    20da:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    20de:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Endpoint_ClearStatusStage>
    20e2:	23 c0       	rjmp	.+70     	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20e4:	81 11       	cpse	r24, r1
    20e6:	21 c0       	rjmp	.+66     	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    20e8:	80 91 e5 01 	lds	r24, 0x01E5
    20ec:	90 91 e6 01 	lds	r25, 0x01E6
    20f0:	99 27       	eor	r25, r25
    20f2:	02 97       	sbiw	r24, 0x02	; 2
    20f4:	d4 f4       	brge	.+52     	; 0x212a <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20f6:	80 91 e8 00 	lds	r24, 0x00E8
    20fa:	87 7f       	andi	r24, 0xF7	; 247
    20fc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2100:	80 91 e5 01 	lds	r24, 0x01E5
    2104:	80 93 de 01 	sts	0x01DE, r24

	Endpoint_ClearStatusStage();
    2108:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    210c:	80 91 de 01 	lds	r24, 0x01DE
    2110:	81 11       	cpse	r24, r1
    2112:	06 c0       	rjmp	.+12     	; 0x2120 <USB_Device_ProcessControlRequest+0x272>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2114:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2118:	87 fd       	sbrc	r24, 7
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <USB_Device_ProcessControlRequest+0x272>
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <USB_Device_ProcessControlRequest+0x274>
    2120:	84 e0       	ldi	r24, 0x04	; 4
    2122:	80 93 e2 01 	sts	0x01E2, r24

	EVENT_USB_Device_ConfigurationChanged();
    2126:	0e 94 94 0a 	call	0x1528	; 0x1528 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    212a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    212e:	83 ff       	sbrs	r24, 3
    2130:	0a c0       	rjmp	.+20     	; 0x2146 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2132:	80 91 e8 00 	lds	r24, 0x00E8
    2136:	87 7f       	andi	r24, 0xF7	; 247
    2138:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    213c:	80 91 eb 00 	lds	r24, 0x00EB
    2140:	80 62       	ori	r24, 0x20	; 32
    2142:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2146:	aa 96       	adiw	r28, 0x2a	; 42
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	1f 91       	pop	r17
    2158:	08 95       	ret

0000215a <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    215a:	90 93 6c 01 	sts	0x016C, r25
    215e:	80 93 6b 01 	sts	0x016B, r24
    2162:	08 95       	ret

00002164 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2164:	e0 91 6b 01 	lds	r30, 0x016B
    2168:	f0 91 6c 01 	lds	r31, 0x016C
    216c:	30 97       	sbiw	r30, 0x00	; 0
    216e:	21 f0       	breq	.+8      	; 0x2178 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2170:	01 90       	ld	r0, Z+
    2172:	f0 81       	ld	r31, Z
    2174:	e0 2d       	mov	r30, r0
    2176:	09 94       	ijmp
}
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	08 95       	ret

0000217c <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	1f 93       	push	r17
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	f8 2e       	mov	r15, r24
    2188:	19 2f       	mov	r17, r25
    if (!driver) return;
    218a:	e0 91 6b 01 	lds	r30, 0x016B
    218e:	f0 91 6c 01 	lds	r31, 0x016C
    2192:	30 97       	sbiw	r30, 0x00	; 0
    2194:	a9 f1       	breq	.+106    	; 0x2200 <host_keyboard_send+0x84>
    (*driver->send_keyboard)(report);
    2196:	02 80       	ldd	r0, Z+2	; 0x02
    2198:	f3 81       	ldd	r31, Z+3	; 0x03
    219a:	e0 2d       	mov	r30, r0
    219c:	09 95       	icall

    if (debug_keyboard) {
    219e:	80 91 cd 01 	lds	r24, 0x01CD
    21a2:	82 ff       	sbrs	r24, 2
    21a4:	2d c0       	rjmp	.+90     	; 0x2200 <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    21a6:	80 ff       	sbrs	r24, 0
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <host_keyboard_send+0x36>
    21aa:	8d e4       	ldi	r24, 0x4D	; 77
    21ac:	94 e0       	ldi	r25, 0x04	; 4
    21ae:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    21b2:	cf 2d       	mov	r28, r15
    21b4:	d1 2f       	mov	r29, r17
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    21b6:	10 e1       	ldi	r17, 0x10	; 16
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    21b8:	87 e4       	ldi	r24, 0x47	; 71
    21ba:	e8 2e       	mov	r14, r24
    21bc:	84 e0       	ldi	r24, 0x04	; 4
    21be:	f8 2e       	mov	r15, r24
    21c0:	80 91 cd 01 	lds	r24, 0x01CD
    21c4:	80 ff       	sbrs	r24, 0
    21c6:	0b c0       	rjmp	.+22     	; 0x21de <host_keyboard_send+0x62>
    21c8:	88 81       	ld	r24, Y
    21ca:	1f 92       	push	r1
    21cc:	8f 93       	push	r24
    21ce:	ff 92       	push	r15
    21d0:	ef 92       	push	r14
    21d2:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	11 50       	subi	r17, 0x01	; 1
    21e0:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    21e2:	11 11       	cpse	r17, r1
    21e4:	ed cf       	rjmp	.-38     	; 0x21c0 <host_keyboard_send+0x44>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    21e6:	80 91 cd 01 	lds	r24, 0x01CD
    21ea:	80 ff       	sbrs	r24, 0
    21ec:	09 c0       	rjmp	.+18     	; 0x2200 <host_keyboard_send+0x84>
    21ee:	85 e4       	ldi	r24, 0x45	; 69
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    21fc:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <xputs>
    }
}
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	1f 91       	pop	r17
    2206:	ff 90       	pop	r15
    2208:	ef 90       	pop	r14
    220a:	08 95       	ret

0000220c <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    220c:	e0 91 6b 01 	lds	r30, 0x016B
    2210:	f0 91 6c 01 	lds	r31, 0x016C
    2214:	30 97       	sbiw	r30, 0x00	; 0
    2216:	21 f0       	breq	.+8      	; 0x2220 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2218:	04 80       	ldd	r0, Z+4	; 0x04
    221a:	f5 81       	ldd	r31, Z+5	; 0x05
    221c:	e0 2d       	mov	r30, r0
    221e:	09 94       	ijmp
    2220:	08 95       	ret

00002222 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2222:	20 91 69 01 	lds	r18, 0x0169
    2226:	30 91 6a 01 	lds	r19, 0x016A
    222a:	28 17       	cp	r18, r24
    222c:	39 07       	cpc	r19, r25
    222e:	71 f0       	breq	.+28     	; 0x224c <host_system_send+0x2a>
    last_system_report = report;
    2230:	90 93 6a 01 	sts	0x016A, r25
    2234:	80 93 69 01 	sts	0x0169, r24

    if (!driver) return;
    2238:	e0 91 6b 01 	lds	r30, 0x016B
    223c:	f0 91 6c 01 	lds	r31, 0x016C
    2240:	30 97       	sbiw	r30, 0x00	; 0
    2242:	21 f0       	breq	.+8      	; 0x224c <host_system_send+0x2a>
    (*driver->send_system)(report);
    2244:	06 80       	ldd	r0, Z+6	; 0x06
    2246:	f7 81       	ldd	r31, Z+7	; 0x07
    2248:	e0 2d       	mov	r30, r0
    224a:	09 94       	ijmp
    224c:	08 95       	ret

0000224e <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    224e:	20 91 67 01 	lds	r18, 0x0167
    2252:	30 91 68 01 	lds	r19, 0x0168
    2256:	28 17       	cp	r18, r24
    2258:	39 07       	cpc	r19, r25
    225a:	71 f0       	breq	.+28     	; 0x2278 <host_consumer_send+0x2a>
    last_consumer_report = report;
    225c:	90 93 68 01 	sts	0x0168, r25
    2260:	80 93 67 01 	sts	0x0167, r24

    if (!driver) return;
    2264:	e0 91 6b 01 	lds	r30, 0x016B
    2268:	f0 91 6c 01 	lds	r31, 0x016C
    226c:	30 97       	sbiw	r30, 0x00	; 0
    226e:	21 f0       	breq	.+8      	; 0x2278 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2270:	00 84       	ldd	r0, Z+8	; 0x08
    2272:	f1 85       	ldd	r31, Z+9	; 0x09
    2274:	e0 2d       	mov	r30, r0
    2276:	09 94       	ijmp
    2278:	08 95       	ret

0000227a <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    227a:	08 95       	ret

0000227c <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    227c:	0c 94 3d 11 	jmp	0x227a	; 0x227a <matrix_setup>

00002280 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2280:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <timer_init>
    matrix_init();
    2284:	0e 94 3f 07 	call	0xe7e	; 0xe7e <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2288:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <bootmagic>

0000228c <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    228c:	5f 92       	push	r5
    228e:	6f 92       	push	r6
    2290:	7f 92       	push	r7
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <keyboard_task+0x20>
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <keyboard_task+0x22>
    22ae:	1f 92       	push	r1
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    22b4:	0e 94 60 07 	call	0xec0	; 0xec0 <matrix_scan>
    22b8:	9e e6       	ldi	r25, 0x6E	; 110
    22ba:	c9 2e       	mov	r12, r25
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	d9 2e       	mov	r13, r25
    22c0:	00 e0       	ldi	r16, 0x00	; 0
    22c2:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    22c4:	aa 24       	eor	r10, r10
    22c6:	a3 94       	inc	r10
    22c8:	b1 2c       	mov	r11, r1
    22ca:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    22cc:	80 2f       	mov	r24, r16
    22ce:	0e 94 99 08 	call	0x1132	; 0x1132 <matrix_get_row>
    22d2:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    22d4:	f6 01       	movw	r30, r12
    22d6:	61 90       	ld	r6, Z+
    22d8:	71 90       	ld	r7, Z+
    22da:	6f 01       	movw	r12, r30
    22dc:	68 26       	eor	r6, r24
    22de:	79 26       	eor	r7, r25
        if (matrix_change) {
    22e0:	61 14       	cp	r6, r1
    22e2:	71 04       	cpc	r7, r1
    22e4:	b1 f4       	brne	.+44     	; 0x2312 <keyboard_task+0x86>
    22e6:	0f 5f       	subi	r16, 0xFF	; 255
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    22ea:	06 30       	cpi	r16, 0x06	; 6
    22ec:	11 05       	cpc	r17, r1
    22ee:	69 f7       	brne	.-38     	; 0x22ca <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	8a 83       	std	Y+2, r24	; 0x02
    22f6:	1b 82       	std	Y+3, r1	; 0x03
    22f8:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <timer_read>
    22fc:	81 60       	ori	r24, 0x01	; 1
    22fe:	78 2f       	mov	r23, r24
    2300:	9d 83       	std	Y+5, r25	; 0x05
    2302:	8c 83       	std	Y+4, r24	; 0x04
    2304:	49 81       	ldd	r20, Y+1	; 0x01
    2306:	5a 81       	ldd	r21, Y+2	; 0x02
    2308:	6b 81       	ldd	r22, Y+3	; 0x03
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	0e 94 1a 12 	call	0x2434	; 0x2434 <action_exec>
    2310:	41 c0       	rjmp	.+130    	; 0x2394 <keyboard_task+0x108>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2312:	80 91 cd 01 	lds	r24, 0x01CD
    2316:	81 fd       	sbrc	r24, 1
    2318:	0e 94 a2 08 	call	0x1144	; 0x1144 <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2320:	75 01       	movw	r14, r10
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <keyboard_task+0x9e>
    2326:	ee 0c       	add	r14, r14
    2328:	ff 1c       	adc	r15, r15
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <keyboard_task+0x9a>
    232e:	c3 01       	movw	r24, r6
    2330:	8e 21       	and	r24, r14
    2332:	9f 21       	and	r25, r15
    2334:	89 2b       	or	r24, r25
    2336:	41 f1       	breq	.+80     	; 0x2388 <keyboard_task+0xfc>
                    keyevent_t e = (keyevent_t){
    2338:	29 83       	std	Y+1, r18	; 0x01
    233a:	5a 82       	std	Y+2, r5	; 0x02
    233c:	8e 20       	and	r8, r14
    233e:	9f 20       	and	r9, r15
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	89 28       	or	r8, r9
    2344:	09 f4       	brne	.+2      	; 0x2348 <keyboard_task+0xbc>
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    234a:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <timer_read>
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    234e:	81 60       	ori	r24, 0x01	; 1
    2350:	78 2f       	mov	r23, r24
    2352:	9d 83       	std	Y+5, r25	; 0x05
    2354:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    2356:	49 81       	ldd	r20, Y+1	; 0x01
    2358:	5a 81       	ldd	r21, Y+2	; 0x02
    235a:	6b 81       	ldd	r22, Y+3	; 0x03
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	0e 94 1a 12 	call	0x2434	; 0x2434 <action_exec>
                    hook_matrix_change(e);
    2362:	49 81       	ldd	r20, Y+1	; 0x01
    2364:	5a 81       	ldd	r21, Y+2	; 0x02
    2366:	6b 81       	ldd	r22, Y+3	; 0x03
    2368:	7c 81       	ldd	r23, Y+4	; 0x04
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2370:	00 0f       	add	r16, r16
    2372:	11 1f       	adc	r17, r17
    2374:	f8 01       	movw	r30, r16
    2376:	e2 59       	subi	r30, 0x92	; 146
    2378:	fe 4f       	sbci	r31, 0xFE	; 254
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	e8 26       	eor	r14, r24
    2380:	f9 26       	eor	r15, r25
    2382:	f1 82       	std	Z+1, r15	; 0x01
    2384:	e0 82       	st	Z, r14
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <keyboard_task+0x108>
    2388:	2f 5f       	subi	r18, 0xFF	; 255
    238a:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    238c:	2f 30       	cpi	r18, 0x0F	; 15
    238e:	31 05       	cpc	r19, r1
    2390:	39 f6       	brne	.-114    	; 0x2320 <keyboard_task+0x94>
    2392:	a9 cf       	rjmp	.-174    	; 0x22e6 <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    2394:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2398:	0e 94 3d 23 	call	0x467a	; 0x467a <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    239c:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    23a0:	90 91 6d 01 	lds	r25, 0x016D
    23a4:	89 17       	cp	r24, r25
    23a6:	71 f1       	breq	.+92     	; 0x2404 <keyboard_task+0x178>
        led_status = host_keyboard_leds();
    23a8:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    23ac:	80 93 6d 01 	sts	0x016D, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    23b0:	90 91 cd 01 	lds	r25, 0x01CD
    23b4:	92 ff       	sbrs	r25, 2
    23b6:	0e c0       	rjmp	.+28     	; 0x23d4 <keyboard_task+0x148>
    23b8:	90 ff       	sbrs	r25, 0
    23ba:	0c c0       	rjmp	.+24     	; 0x23d4 <keyboard_task+0x148>
    23bc:	1f 92       	push	r1
    23be:	8f 93       	push	r24
    23c0:	8f e5       	ldi	r24, 0x5F	; 95
    23c2:	94 e0       	ldi	r25, 0x04	; 4
    23c4:	9f 93       	push	r25
    23c6:	8f 93       	push	r24
    23c8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    23d4:	80 91 6d 01 	lds	r24, 0x016D
    }
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	ff 90       	pop	r15
    23ec:	ef 90       	pop	r14
    23ee:	df 90       	pop	r13
    23f0:	cf 90       	pop	r12
    23f2:	bf 90       	pop	r11
    23f4:	af 90       	pop	r10
    23f6:	9f 90       	pop	r9
    23f8:	8f 90       	pop	r8
    23fa:	7f 90       	pop	r7
    23fc:	6f 90       	pop	r6
    23fe:	5f 90       	pop	r5

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    2400:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <hook_keyboard_leds_change>
    }
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	7f 90       	pop	r7
    2428:	6f 90       	pop	r6
    242a:	5f 90       	pop	r5
    242c:	08 95       	ret

0000242e <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <led_set>

00002434 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	2b 97       	sbiw	r28, 0x0b	; 11
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	4f 83       	std	Y+7, r20	; 0x07
    244a:	58 87       	std	Y+8, r21	; 0x08
    244c:	69 87       	std	Y+9, r22	; 0x09
    244e:	7a 87       	std	Y+10, r23	; 0x0a
    2450:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2452:	8a 85       	ldd	r24, Y+10	; 0x0a
    2454:	9b 85       	ldd	r25, Y+11	; 0x0b
    2456:	89 2b       	or	r24, r25
    2458:	29 f0       	breq	.+10     	; 0x2464 <action_exec+0x30>
    245a:	ca 01       	movw	r24, r20
    245c:	9f 3f       	cpi	r25, 0xFF	; 255
    245e:	09 f5       	brne	.+66     	; 0x24a2 <action_exec+0x6e>
    2460:	4f 3f       	cpi	r20, 0xFF	; 255
    2462:	f9 f4       	brne	.+62     	; 0x24a2 <action_exec+0x6e>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    2464:	de 01       	movw	r26, r28
    2466:	11 96       	adiw	r26, 0x01	; 1
    2468:	86 e0       	ldi	r24, 0x06	; 6
    246a:	fd 01       	movw	r30, r26
    246c:	11 92       	st	Z+, r1
    246e:	8a 95       	dec	r24
    2470:	e9 f7       	brne	.-6      	; 0x246c <action_exec+0x38>
    2472:	85 e0       	ldi	r24, 0x05	; 5
    2474:	fe 01       	movw	r30, r28
    2476:	37 96       	adiw	r30, 0x07	; 7
    2478:	01 90       	ld	r0, Z+
    247a:	0d 92       	st	X+, r0
    247c:	8a 95       	dec	r24
    247e:	e1 f7       	brne	.-8      	; 0x2478 <action_exec+0x44>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2480:	49 81       	ldd	r20, Y+1	; 0x01
    2482:	5a 81       	ldd	r21, Y+2	; 0x02
    2484:	6b 81       	ldd	r22, Y+3	; 0x03
    2486:	7c 81       	ldd	r23, Y+4	; 0x04
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	9e 81       	ldd	r25, Y+6	; 0x06
    248c:	0e 94 42 19 	call	0x3284	; 0x3284 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2490:	2b 96       	adiw	r28, 0x0b	; 11
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	08 95       	ret
void action_exec(keyevent_t event)
{
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    24a2:	4f 81       	ldd	r20, Y+7	; 0x07
    24a4:	58 85       	ldd	r21, Y+8	; 0x08
    24a6:	69 85       	ldd	r22, Y+9	; 0x09
    24a8:	7a 85       	ldd	r23, Y+10	; 0x0a
    24aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ac:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <hook_matrix_change>
    24b0:	d9 cf       	rjmp	.-78     	; 0x2464 <action_exec+0x30>

000024b2 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    24b2:	cf 93       	push	r28
    24b4:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    24b6:	88 23       	and	r24, r24
    24b8:	09 f4       	brne	.+2      	; 0x24bc <register_code+0xa>
    24ba:	cc c0       	rjmp	.+408    	; 0x2654 <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    24bc:	82 38       	cpi	r24, 0x82	; 130
    24be:	59 f4       	brne	.+22     	; 0x24d6 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    24c0:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    24c4:	81 fd       	sbrc	r24, 1
    24c6:	c6 c0       	rjmp	.+396    	; 0x2654 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    24c8:	89 e3       	ldi	r24, 0x39	; 57
    24ca:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <add_key>
        send_keyboard_report();
    24ce:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    24d2:	89 e3       	ldi	r24, 0x39	; 57
    24d4:	0c c0       	rjmp	.+24     	; 0x24ee <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    24d6:	83 38       	cpi	r24, 0x83	; 131
    24d8:	79 f4       	brne	.+30     	; 0x24f8 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    24da:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    24de:	80 fd       	sbrc	r24, 0
    24e0:	b9 c0       	rjmp	.+370    	; 0x2654 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    24e2:	83 e5       	ldi	r24, 0x53	; 83
    24e4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <add_key>
        send_keyboard_report();
    24e8:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    24ec:	83 e5       	ldi	r24, 0x53	; 83
    24ee:	0e 94 2a 1c 	call	0x3854	; 0x3854 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    24f2:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    24f4:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    24f8:	84 38       	cpi	r24, 0x84	; 132
    24fa:	59 f4       	brne	.+22     	; 0x2512 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    24fc:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    2500:	82 fd       	sbrc	r24, 2
    2502:	a8 c0       	rjmp	.+336    	; 0x2654 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    2504:	87 e4       	ldi	r24, 0x47	; 71
    2506:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <add_key>
        send_keyboard_report();
    250a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    250e:	87 e4       	ldi	r24, 0x47	; 71
    2510:	ee cf       	rjmp	.-36     	; 0x24ee <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2512:	8c ef       	ldi	r24, 0xFC	; 252
    2514:	8c 0f       	add	r24, r28
    2516:	81 3a       	cpi	r24, 0xA1	; 161
    2518:	48 f4       	brcc	.+18     	; 0x252c <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    251a:	8c 2f       	mov	r24, r28
    251c:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <command_proc>
    2520:	81 11       	cpse	r24, r1
    2522:	98 c0       	rjmp	.+304    	; 0x2654 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2524:	8c 2f       	mov	r24, r28
    2526:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <add_key>
    252a:	e3 cf       	rjmp	.-58     	; 0x24f2 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    252c:	80 e2       	ldi	r24, 0x20	; 32
    252e:	8c 0f       	add	r24, r28
    2530:	88 30       	cpi	r24, 0x08	; 8
    2532:	48 f4       	brcc	.+18     	; 0x2546 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2534:	c7 70       	andi	r28, 0x07	; 7
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	01 c0       	rjmp	.+2      	; 0x253c <register_code+0x8a>
    253a:	88 0f       	add	r24, r24
    253c:	ca 95       	dec	r28
    253e:	ea f7       	brpl	.-6      	; 0x253a <register_code+0x88>
    2540:	0e 94 80 1c 	call	0x3900	; 0x3900 <add_mods>
    2544:	d6 cf       	rjmp	.-84     	; 0x24f2 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2546:	8b e5       	ldi	r24, 0x5B	; 91
    2548:	8c 0f       	add	r24, r28
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	78 f4       	brcc	.+30     	; 0x256c <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    254e:	c5 3a       	cpi	r28, 0xA5	; 165
    2550:	29 f0       	breq	.+10     	; 0x255c <register_code+0xaa>
    2552:	c6 3a       	cpi	r28, 0xA6	; 166
    2554:	31 f0       	breq	.+12     	; 0x2562 <register_code+0xb0>
    2556:	83 e8       	ldi	r24, 0x83	; 131
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	05 c0       	rjmp	.+10     	; 0x2566 <register_code+0xb4>
    255c:	81 e8       	ldi	r24, 0x81	; 129
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <register_code+0xb4>
    2562:	82 e8       	ldi	r24, 0x82	; 130
    2564:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2566:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2568:	0c 94 11 11 	jmp	0x2222	; 0x2222 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    256c:	88 e5       	ldi	r24, 0x58	; 88
    256e:	8c 0f       	add	r24, r28
    2570:	85 31       	cpi	r24, 0x15	; 21
    2572:	08 f0       	brcs	.+2      	; 0x2576 <register_code+0xc4>
    2574:	6f c0       	rjmp	.+222    	; 0x2654 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2576:	c8 3a       	cpi	r28, 0xA8	; 168
    2578:	61 f1       	breq	.+88     	; 0x25d2 <register_code+0x120>
    257a:	c9 3a       	cpi	r28, 0xA9	; 169
    257c:	69 f1       	breq	.+90     	; 0x25d8 <register_code+0x126>
    257e:	ca 3a       	cpi	r28, 0xAA	; 170
    2580:	71 f1       	breq	.+92     	; 0x25de <register_code+0x12c>
    2582:	cb 3a       	cpi	r28, 0xAB	; 171
    2584:	79 f1       	breq	.+94     	; 0x25e4 <register_code+0x132>
    2586:	cc 3a       	cpi	r28, 0xAC	; 172
    2588:	81 f1       	breq	.+96     	; 0x25ea <register_code+0x138>
    258a:	cd 3a       	cpi	r28, 0xAD	; 173
    258c:	89 f1       	breq	.+98     	; 0x25f0 <register_code+0x13e>
    258e:	ce 3a       	cpi	r28, 0xAE	; 174
    2590:	91 f1       	breq	.+100    	; 0x25f6 <register_code+0x144>
    2592:	cf 3a       	cpi	r28, 0xAF	; 175
    2594:	99 f1       	breq	.+102    	; 0x25fc <register_code+0x14a>
    2596:	c1 3b       	cpi	r28, 0xB1	; 177
    2598:	a1 f1       	breq	.+104    	; 0x2602 <register_code+0x150>
    259a:	c0 3b       	cpi	r28, 0xB0	; 176
    259c:	a9 f1       	breq	.+106    	; 0x2608 <register_code+0x156>
    259e:	c2 3b       	cpi	r28, 0xB2	; 178
    25a0:	b1 f1       	breq	.+108    	; 0x260e <register_code+0x15c>
    25a2:	c3 3b       	cpi	r28, 0xB3	; 179
    25a4:	b9 f1       	breq	.+110    	; 0x2614 <register_code+0x162>
    25a6:	c4 3b       	cpi	r28, 0xB4	; 180
    25a8:	c1 f1       	breq	.+112    	; 0x261a <register_code+0x168>
    25aa:	c5 3b       	cpi	r28, 0xB5	; 181
    25ac:	c9 f1       	breq	.+114    	; 0x2620 <register_code+0x16e>
    25ae:	c6 3b       	cpi	r28, 0xB6	; 182
    25b0:	d1 f1       	breq	.+116    	; 0x2626 <register_code+0x174>
    25b2:	c7 3b       	cpi	r28, 0xB7	; 183
    25b4:	d9 f1       	breq	.+118    	; 0x262c <register_code+0x17a>
    25b6:	c8 3b       	cpi	r28, 0xB8	; 184
    25b8:	e1 f1       	breq	.+120    	; 0x2632 <register_code+0x180>
    25ba:	c9 3b       	cpi	r28, 0xB9	; 185
    25bc:	e9 f1       	breq	.+122    	; 0x2638 <register_code+0x186>
    25be:	ca 3b       	cpi	r28, 0xBA	; 186
    25c0:	f1 f1       	breq	.+124    	; 0x263e <register_code+0x18c>
    25c2:	cb 3b       	cpi	r28, 0xBB	; 187
    25c4:	f9 f1       	breq	.+126    	; 0x2644 <register_code+0x192>
    25c6:	cc 3b       	cpi	r28, 0xBC	; 188
    25c8:	09 f4       	brne	.+2      	; 0x25cc <register_code+0x11a>
    25ca:	3f c0       	rjmp	.+126    	; 0x264a <register_code+0x198>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	3e c0       	rjmp	.+124    	; 0x264e <register_code+0x19c>
    25d2:	82 ee       	ldi	r24, 0xE2	; 226
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	3b c0       	rjmp	.+118    	; 0x264e <register_code+0x19c>
    25d8:	89 ee       	ldi	r24, 0xE9	; 233
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	38 c0       	rjmp	.+112    	; 0x264e <register_code+0x19c>
    25de:	8a ee       	ldi	r24, 0xEA	; 234
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	35 c0       	rjmp	.+106    	; 0x264e <register_code+0x19c>
    25e4:	85 eb       	ldi	r24, 0xB5	; 181
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	32 c0       	rjmp	.+100    	; 0x264e <register_code+0x19c>
    25ea:	86 eb       	ldi	r24, 0xB6	; 182
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	2f c0       	rjmp	.+94     	; 0x264e <register_code+0x19c>
    25f0:	83 eb       	ldi	r24, 0xB3	; 179
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	2c c0       	rjmp	.+88     	; 0x264e <register_code+0x19c>
    25f6:	84 eb       	ldi	r24, 0xB4	; 180
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	29 c0       	rjmp	.+82     	; 0x264e <register_code+0x19c>
    25fc:	87 eb       	ldi	r24, 0xB7	; 183
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	26 c0       	rjmp	.+76     	; 0x264e <register_code+0x19c>
    2602:	8c ec       	ldi	r24, 0xCC	; 204
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	23 c0       	rjmp	.+70     	; 0x264e <register_code+0x19c>
    2608:	8d ec       	ldi	r24, 0xCD	; 205
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	20 c0       	rjmp	.+64     	; 0x264e <register_code+0x19c>
    260e:	83 e8       	ldi	r24, 0x83	; 131
    2610:	91 e0       	ldi	r25, 0x01	; 1
    2612:	1d c0       	rjmp	.+58     	; 0x264e <register_code+0x19c>
    2614:	8a e8       	ldi	r24, 0x8A	; 138
    2616:	91 e0       	ldi	r25, 0x01	; 1
    2618:	1a c0       	rjmp	.+52     	; 0x264e <register_code+0x19c>
    261a:	82 e9       	ldi	r24, 0x92	; 146
    261c:	91 e0       	ldi	r25, 0x01	; 1
    261e:	17 c0       	rjmp	.+46     	; 0x264e <register_code+0x19c>
    2620:	84 e9       	ldi	r24, 0x94	; 148
    2622:	91 e0       	ldi	r25, 0x01	; 1
    2624:	14 c0       	rjmp	.+40     	; 0x264e <register_code+0x19c>
    2626:	81 e2       	ldi	r24, 0x21	; 33
    2628:	92 e0       	ldi	r25, 0x02	; 2
    262a:	11 c0       	rjmp	.+34     	; 0x264e <register_code+0x19c>
    262c:	83 e2       	ldi	r24, 0x23	; 35
    262e:	92 e0       	ldi	r25, 0x02	; 2
    2630:	0e c0       	rjmp	.+28     	; 0x264e <register_code+0x19c>
    2632:	84 e2       	ldi	r24, 0x24	; 36
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	0b c0       	rjmp	.+22     	; 0x264e <register_code+0x19c>
    2638:	85 e2       	ldi	r24, 0x25	; 37
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	08 c0       	rjmp	.+16     	; 0x264e <register_code+0x19c>
    263e:	86 e2       	ldi	r24, 0x26	; 38
    2640:	92 e0       	ldi	r25, 0x02	; 2
    2642:	05 c0       	rjmp	.+10     	; 0x264e <register_code+0x19c>
    2644:	87 e2       	ldi	r24, 0x27	; 39
    2646:	92 e0       	ldi	r25, 0x02	; 2
    2648:	02 c0       	rjmp	.+4      	; 0x264e <register_code+0x19c>
    264a:	8a e2       	ldi	r24, 0x2A	; 42
    264c:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    264e:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2650:	0c 94 27 11 	jmp	0x224e	; 0x224e <host_consumer_send>
    }
}
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2658:	88 23       	and	r24, r24
    265a:	09 f4       	brne	.+2      	; 0x265e <unregister_code+0x6>
    265c:	4b c0       	rjmp	.+150    	; 0x26f4 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    265e:	82 38       	cpi	r24, 0x82	; 130
    2660:	59 f4       	brne	.+22     	; 0x2678 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2662:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    2666:	81 ff       	sbrs	r24, 1
    2668:	45 c0       	rjmp	.+138    	; 0x26f4 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    266a:	89 e3       	ldi	r24, 0x39	; 57
    266c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <add_key>
        send_keyboard_report();
    2670:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2674:	89 e3       	ldi	r24, 0x39	; 57
    2676:	0c c0       	rjmp	.+24     	; 0x2690 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2678:	83 38       	cpi	r24, 0x83	; 131
    267a:	71 f4       	brne	.+28     	; 0x2698 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    267c:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    2680:	80 ff       	sbrs	r24, 0
    2682:	38 c0       	rjmp	.+112    	; 0x26f4 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2684:	83 e5       	ldi	r24, 0x53	; 83
    2686:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <add_key>
        send_keyboard_report();
    268a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    268e:	83 e5       	ldi	r24, 0x53	; 83
    2690:	0e 94 2a 1c 	call	0x3854	; 0x3854 <del_key>
        send_keyboard_report();
    2694:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2698:	84 38       	cpi	r24, 0x84	; 132
    269a:	59 f4       	brne	.+22     	; 0x26b2 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    269c:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    26a0:	82 ff       	sbrs	r24, 2
    26a2:	28 c0       	rjmp	.+80     	; 0x26f4 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    26a4:	87 e4       	ldi	r24, 0x47	; 71
    26a6:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <add_key>
        send_keyboard_report();
    26aa:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    26ae:	87 e4       	ldi	r24, 0x47	; 71
    26b0:	ef cf       	rjmp	.-34     	; 0x2690 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    26b2:	9c ef       	ldi	r25, 0xFC	; 252
    26b4:	98 0f       	add	r25, r24
    26b6:	91 3a       	cpi	r25, 0xA1	; 161
    26b8:	58 f3       	brcs	.-42     	; 0x2690 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    26ba:	90 e2       	ldi	r25, 0x20	; 32
    26bc:	98 0f       	add	r25, r24
    26be:	98 30       	cpi	r25, 0x08	; 8
    26c0:	50 f4       	brcc	.+20     	; 0x26d6 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    26c2:	87 70       	andi	r24, 0x07	; 7
    26c4:	91 e0       	ldi	r25, 0x01	; 1
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <unregister_code+0x72>
    26c8:	99 0f       	add	r25, r25
    26ca:	8a 95       	dec	r24
    26cc:	ea f7       	brpl	.-6      	; 0x26c8 <unregister_code+0x70>
    26ce:	89 2f       	mov	r24, r25
    26d0:	0e 94 86 1c 	call	0x390c	; 0x390c <del_mods>
    26d4:	df cf       	rjmp	.-66     	; 0x2694 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    26d6:	9b e5       	ldi	r25, 0x5B	; 91
    26d8:	98 0f       	add	r25, r24
    26da:	93 30       	cpi	r25, 0x03	; 3
    26dc:	20 f4       	brcc	.+8      	; 0x26e6 <unregister_code+0x8e>
        host_system_send(0);
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0c 94 11 11 	jmp	0x2222	; 0x2222 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    26e6:	88 5a       	subi	r24, 0xA8	; 168
    26e8:	85 31       	cpi	r24, 0x15	; 21
    26ea:	20 f4       	brcc	.+8      	; 0x26f4 <unregister_code+0x9c>
        host_consumer_send(0);
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0c 94 27 11 	jmp	0x224e	; 0x224e <host_consumer_send>
    26f4:	08 95       	ret

000026f6 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    26f6:	88 23       	and	r24, r24
    26f8:	21 f0       	breq	.+8      	; 0x2702 <register_mods+0xc>
        add_mods(mods);
    26fa:	0e 94 80 1c 	call	0x3900	; 0x3900 <add_mods>
        send_keyboard_report();
    26fe:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <send_keyboard_report>
    2702:	08 95       	ret

00002704 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2704:	88 23       	and	r24, r24
    2706:	21 f0       	breq	.+8      	; 0x2710 <unregister_mods+0xc>
        del_mods(mods);
    2708:	0e 94 86 1c 	call	0x390c	; 0x390c <del_mods>
        send_keyboard_report();
    270c:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <send_keyboard_report>
    2710:	08 95       	ret

00002712 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2712:	bf 92       	push	r11
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	00 d0       	rcall	.+0      	; 0x2726 <process_action+0x14>
    2726:	00 d0       	rcall	.+0      	; 0x2728 <process_action+0x16>
    2728:	00 d0       	rcall	.+0      	; 0x272a <process_action+0x18>
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    2730:	85 e0       	ldi	r24, 0x05	; 5
    2732:	f6 01       	movw	r30, r12
    2734:	de 01       	movw	r26, r28
    2736:	11 96       	adiw	r26, 0x01	; 1
    2738:	01 90       	ld	r0, Z+
    273a:	0d 92       	st	X+, r0
    273c:	8a 95       	dec	r24
    273e:	e1 f7       	brne	.-8      	; 0x2738 <process_action+0x26>
    2740:	f6 01       	movw	r30, r12
    2742:	83 81       	ldd	r24, Z+3	; 0x03
    2744:	94 81       	ldd	r25, Z+4	; 0x04
    2746:	89 2b       	or	r24, r25
    2748:	09 f4       	brne	.+2      	; 0x274c <process_action+0x3a>
    274a:	e6 c2       	rjmp	.+1484   	; 0x2d18 <process_action+0x606>
    274c:	90 81       	ld	r25, Z
    274e:	81 81       	ldd	r24, Z+1	; 0x01
    2750:	8f 3f       	cpi	r24, 0xFF	; 255
    2752:	19 f4       	brne	.+6      	; 0x275a <process_action+0x48>
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }
    2754:	9f 3f       	cpi	r25, 0xFF	; 255
    2756:	09 f4       	brne	.+2      	; 0x275a <process_action+0x48>
    2758:	df c2       	rjmp	.+1470   	; 0x2d18 <process_action+0x606>
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
    275a:	f6 01       	movw	r30, r12
    275c:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    275e:	25 81       	ldd	r18, Z+5	; 0x05
    2760:	22 95       	swap	r18
    2762:	2f 70       	andi	r18, 0x0F	; 15
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    2764:	99 83       	std	Y+1, r25	; 0x01
    2766:	8a 83       	std	Y+2, r24	; 0x02
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	2e 83       	std	Y+6, r18	; 0x06
    276e:	0e 94 99 1b 	call	0x3732	; 0x3732 <layer_switch_get_action>
    2772:	18 2f       	mov	r17, r24
    2774:	b9 2e       	mov	r11, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2776:	0e 94 98 1b 	call	0x3730	; 0x3730 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    277a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    277e:	eb 2d       	mov	r30, r11
    2780:	e2 95       	swap	r30
    2782:	ef 70       	andi	r30, 0x0F	; 15
    2784:	4e 2f       	mov	r20, r30
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	fa 01       	movw	r30, r20
    278a:	e0 5a       	subi	r30, 0xA0	; 160
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	2e 81       	ldd	r18, Y+6	; 0x06
    2790:	0c 94 63 2a 	jmp	0x54c6	; 0x54c6 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2794:	8b 2d       	mov	r24, r11
    2796:	80 7f       	andi	r24, 0xF0	; 240
    2798:	9b 2d       	mov	r25, r11
    279a:	9f 70       	andi	r25, 0x0F	; 15
    279c:	09 2f       	mov	r16, r25
    279e:	88 23       	and	r24, r24
    27a0:	11 f0       	breq	.+4      	; 0x27a6 <process_action+0x94>
    27a2:	02 95       	swap	r16
    27a4:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    27a6:	ff 20       	and	r15, r15
    27a8:	49 f0       	breq	.+18     	; 0x27bc <process_action+0xaa>
                    if (mods) {
    27aa:	00 23       	and	r16, r16
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <process_action+0x9e>
    27ae:	61 c2       	rjmp	.+1218   	; 0x2c72 <process_action+0x560>
                        add_weak_mods(mods);
    27b0:	80 2f       	mov	r24, r16
    27b2:	0e 94 93 1c 	call	0x3926	; 0x3926 <add_weak_mods>
                        send_keyboard_report();
    27b6:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
    27ba:	5b c2       	rjmp	.+1206   	; 0x2c72 <process_action+0x560>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    27bc:	81 2f       	mov	r24, r17
    27be:	0e 94 2c 13 	call	0x2658	; 0x2658 <unregister_code>
                    if (mods) {
    27c2:	00 23       	and	r16, r16
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <process_action+0xb6>
    27c6:	a8 c2       	rjmp	.+1360   	; 0x2d18 <process_action+0x606>
                        del_weak_mods(mods);
    27c8:	80 2f       	mov	r24, r16
    27ca:	0e 94 99 1c 	call	0x3932	; 0x3932 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    27ce:	26 96       	adiw	r28, 0x06	; 6
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	bf 90       	pop	r11
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    27ec:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    27f0:	8b 2d       	mov	r24, r11
    27f2:	80 7f       	andi	r24, 0xF0	; 240
    27f4:	9b 2d       	mov	r25, r11
    27f6:	9f 70       	andi	r25, 0x0F	; 15
    27f8:	09 2f       	mov	r16, r25
    27fa:	80 32       	cpi	r24, 0x20	; 32
    27fc:	11 f0       	breq	.+4      	; 0x2802 <process_action+0xf0>
    27fe:	02 95       	swap	r16
    2800:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2802:	11 23       	and	r17, r17
    2804:	19 f0       	breq	.+6      	; 0x280c <process_action+0xfa>
    2806:	11 30       	cpi	r17, 0x01	; 1
    2808:	09 f1       	breq	.+66     	; 0x284c <process_action+0x13a>
    280a:	2a c0       	rjmp	.+84     	; 0x2860 <process_action+0x14e>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    280c:	ff 20       	and	r15, r15
    280e:	b1 f0       	breq	.+44     	; 0x283c <process_action+0x12a>
                            if (tap_count == 0) {
                                register_mods(mods);
    2810:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    2812:	22 23       	and	r18, r18
    2814:	51 f1       	breq	.+84     	; 0x286a <process_action+0x158>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2816:	21 30       	cpi	r18, 0x01	; 1
    2818:	41 f5       	brne	.+80     	; 0x286a <process_action+0x158>
            break;
#endif
        default:
            break;
    }
}
    281a:	26 96       	adiw	r28, 0x06	; 6
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	df 90       	pop	r13
    2834:	cf 90       	pop	r12
    2836:	bf 90       	pop	r11
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2838:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    283c:	22 23       	and	r18, r18
    283e:	19 f0       	breq	.+6      	; 0x2846 <process_action+0x134>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2840:	21 30       	cpi	r18, 0x01	; 1
    2842:	09 f4       	brne	.+2      	; 0x2846 <process_action+0x134>
    2844:	69 c2       	rjmp	.+1234   	; 0x2d18 <process_action+0x606>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2846:	0e 94 a6 1c 	call	0x394c	; 0x394c <clear_oneshot_mods>
    284a:	2d c0       	rjmp	.+90     	; 0x28a6 <process_action+0x194>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    284c:	ff 20       	and	r15, r15
    284e:	f1 f0       	breq	.+60     	; 0x288c <process_action+0x17a>
                            if (tap_count <= TAPPING_TOGGLE) {
    2850:	26 30       	cpi	r18, 0x06	; 6
    2852:	08 f0       	brcs	.+2      	; 0x2856 <process_action+0x144>
    2854:	61 c2       	rjmp	.+1218   	; 0x2d18 <process_action+0x606>
                                if (mods & get_mods()) {
    2856:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <get_mods>
    285a:	80 23       	and	r24, r16
    285c:	29 f0       	breq	.+10     	; 0x2868 <process_action+0x156>
    285e:	23 c0       	rjmp	.+70     	; 0x28a6 <process_action+0x194>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2860:	ff 20       	and	r15, r15
    2862:	f9 f0       	breq	.+62     	; 0x28a2 <process_action+0x190>
                            if (tap_count > 0) {
    2864:	21 11       	cpse	r18, r1
    2866:	16 c0       	rjmp	.+44     	; 0x2894 <process_action+0x182>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2868:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    286a:	26 96       	adiw	r28, 0x06	; 6
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	ff 90       	pop	r15
    2880:	ef 90       	pop	r14
    2882:	df 90       	pop	r13
    2884:	cf 90       	pop	r12
    2886:	bf 90       	pop	r11
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2888:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    288c:	25 30       	cpi	r18, 0x05	; 5
    288e:	08 f0       	brcs	.+2      	; 0x2892 <process_action+0x180>
    2890:	43 c2       	rjmp	.+1158   	; 0x2d18 <process_action+0x606>
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <process_action+0x194>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2894:	f6 01       	movw	r30, r12
    2896:	85 81       	ldd	r24, Z+5	; 0x05
    2898:	80 ff       	sbrs	r24, 0
    289a:	eb c1       	rjmp	.+982    	; 0x2c72 <process_action+0x560>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    289c:	8f 70       	andi	r24, 0x0F	; 15
    289e:	85 83       	std	Z+5, r24	; 0x05
    28a0:	e3 cf       	rjmp	.-58     	; 0x2868 <process_action+0x156>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    28a2:	21 11       	cpse	r18, r1
    28a4:	fb c1       	rjmp	.+1014   	; 0x2c9c <process_action+0x58a>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    28a6:	80 2f       	mov	r24, r16
    28a8:	62 c1       	rjmp	.+708    	; 0x2b6e <process_action+0x45c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    28aa:	8b 2d       	mov	r24, r11
    28ac:	86 95       	lsr	r24
    28ae:	86 95       	lsr	r24
    28b0:	83 70       	andi	r24, 0x03	; 3
    28b2:	19 f0       	breq	.+6      	; 0x28ba <process_action+0x1a8>
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	d1 f0       	breq	.+52     	; 0x28ec <process_action+0x1da>
    28b8:	2f c2       	rjmp	.+1118   	; 0x2d18 <process_action+0x606>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    28ba:	ff 20       	and	r15, r15
    28bc:	21 f0       	breq	.+8      	; 0x28c6 <process_action+0x1b4>
                        host_system_send(action.usage.code);
    28be:	81 2f       	mov	r24, r17
    28c0:	9b 2d       	mov	r25, r11
    28c2:	93 70       	andi	r25, 0x03	; 3
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <process_action+0x1b8>
                    } else {
                        host_system_send(0);
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    28ca:	26 96       	adiw	r28, 0x06	; 6
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	ef 90       	pop	r14
    28e2:	df 90       	pop	r13
    28e4:	cf 90       	pop	r12
    28e6:	bf 90       	pop	r11
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    28e8:	0c 94 11 11 	jmp	0x2222	; 0x2222 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    28ec:	ff 20       	and	r15, r15
    28ee:	21 f0       	breq	.+8      	; 0x28f8 <process_action+0x1e6>
                        host_consumer_send(action.usage.code);
    28f0:	81 2f       	mov	r24, r17
    28f2:	9b 2d       	mov	r25, r11
    28f4:	93 70       	andi	r25, 0x03	; 3
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <process_action+0x1ea>
                    } else {
                        host_consumer_send(0);
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    28fc:	26 96       	adiw	r28, 0x06	; 6
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	bf 90       	pop	r11
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    291a:	0c 94 27 11 	jmp	0x224e	; 0x224e <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    291e:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2920:	ff 20       	and	r15, r15
    2922:	19 f0       	breq	.+6      	; 0x292a <process_action+0x218>
                mousekey_on(action.key.code);
    2924:	0e 94 c3 21 	call	0x4386	; 0x4386 <mousekey_on>
    2928:	02 c0       	rjmp	.+4      	; 0x292e <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    292a:	0e 94 2b 22 	call	0x4456	; 0x4456 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    292e:	26 96       	adiw	r28, 0x06	; 6
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	bf 90       	pop	r11
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    294c:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2950:	8b 2d       	mov	r24, r11
    2952:	83 70       	andi	r24, 0x03	; 3
    2954:	09 f0       	breq	.+2      	; 0x2958 <process_action+0x246>
    2956:	75 c0       	rjmp	.+234    	; 0x2a42 <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2958:	f1 10       	cpse	r15, r1
    295a:	de c1       	rjmp	.+956    	; 0x2d18 <process_action+0x606>
                    uint8_t shift = action.layer_bitop.part*4;
    295c:	81 2f       	mov	r24, r17
    295e:	82 95       	swap	r24
    2960:	86 95       	lsr	r24
    2962:	87 70       	andi	r24, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2964:	88 0f       	add	r24, r24
    2966:	88 0f       	add	r24, r24
    2968:	91 2f       	mov	r25, r17
    296a:	9f 70       	andi	r25, 0x0F	; 15
    296c:	c9 2e       	mov	r12, r25
    296e:	d1 2c       	mov	r13, r1
    2970:	e1 2c       	mov	r14, r1
    2972:	f1 2c       	mov	r15, r1
    2974:	08 2e       	mov	r0, r24
    2976:	04 c0       	rjmp	.+8      	; 0x2980 <process_action+0x26e>
    2978:	cc 0c       	add	r12, r12
    297a:	dd 1c       	adc	r13, r13
    297c:	ee 1c       	adc	r14, r14
    297e:	ff 1c       	adc	r15, r15
    2980:	0a 94       	dec	r0
    2982:	d2 f7       	brpl	.-12     	; 0x2978 <process_action+0x266>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2984:	14 ff       	sbrs	r17, 4
    2986:	12 c0       	rjmp	.+36     	; 0x29ac <process_action+0x29a>
    2988:	0f e0       	ldi	r16, 0x0F	; 15
    298a:	10 e0       	ldi	r17, 0x00	; 0
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	04 c0       	rjmp	.+8      	; 0x299a <process_action+0x288>
    2992:	00 0f       	add	r16, r16
    2994:	11 1f       	adc	r17, r17
    2996:	22 1f       	adc	r18, r18
    2998:	33 1f       	adc	r19, r19
    299a:	8a 95       	dec	r24
    299c:	d2 f7       	brpl	.-12     	; 0x2992 <process_action+0x280>
    299e:	c9 01       	movw	r24, r18
    29a0:	b8 01       	movw	r22, r16
    29a2:	60 95       	com	r22
    29a4:	70 95       	com	r23
    29a6:	80 95       	com	r24
    29a8:	90 95       	com	r25
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <process_action+0x2a0>
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    29b2:	4b 2d       	mov	r20, r11
    29b4:	46 95       	lsr	r20
    29b6:	46 95       	lsr	r20
    29b8:	43 70       	andi	r20, 0x03	; 3
    29ba:	42 30       	cpi	r20, 0x02	; 2
    29bc:	c1 f0       	breq	.+48     	; 0x29ee <process_action+0x2dc>
    29be:	60 f5       	brcc	.+88     	; 0x2a18 <process_action+0x306>
    29c0:	6c 29       	or	r22, r12
    29c2:	7d 29       	or	r23, r13
    29c4:	8e 29       	or	r24, r14
    29c6:	9f 29       	or	r25, r15
    29c8:	41 30       	cpi	r20, 0x01	; 1
    29ca:	51 f1       	breq	.+84     	; 0x2a20 <process_action+0x30e>
            break;
#endif
        default:
            break;
    }
}
    29cc:	26 96       	adiw	r28, 0x06	; 6
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	ff 90       	pop	r15
    29e2:	ef 90       	pop	r14
    29e4:	df 90       	pop	r13
    29e6:	cf 90       	pop	r12
    29e8:	bf 90       	pop	r11
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    29ea:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29ee:	6c 29       	or	r22, r12
    29f0:	7d 29       	or	r23, r13
    29f2:	8e 29       	or	r24, r14
    29f4:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    29f6:	26 96       	adiw	r28, 0x06	; 6
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	ff 90       	pop	r15
    2a0c:	ef 90       	pop	r14
    2a0e:	df 90       	pop	r13
    2a10:	cf 90       	pop	r12
    2a12:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a14:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a18:	0e 94 bd 1a 	call	0x357a	; 0x357a <default_layer_and>
    2a1c:	c7 01       	movw	r24, r14
    2a1e:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2a20:	26 96       	adiw	r28, 0x06	; 6
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	df 90       	pop	r13
    2a3a:	cf 90       	pop	r12
    2a3c:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a3e:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2a42:	ff 20       	and	r15, r15
    2a44:	19 f0       	breq	.+6      	; 0x2a4c <process_action+0x33a>
    2a46:	8b 2d       	mov	r24, r11
    2a48:	81 70       	andi	r24, 0x01	; 1
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <process_action+0x33c>
    2a4c:	86 95       	lsr	r24
    2a4e:	88 23       	and	r24, r24
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <process_action+0x342>
    2a52:	62 c1       	rjmp	.+708    	; 0x2d18 <process_action+0x606>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2a54:	81 2f       	mov	r24, r17
    2a56:	82 95       	swap	r24
    2a58:	86 95       	lsr	r24
    2a5a:	87 70       	andi	r24, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a5c:	88 0f       	add	r24, r24
    2a5e:	88 0f       	add	r24, r24
    2a60:	91 2f       	mov	r25, r17
    2a62:	9f 70       	andi	r25, 0x0F	; 15
    2a64:	c9 2e       	mov	r12, r25
    2a66:	d1 2c       	mov	r13, r1
    2a68:	e1 2c       	mov	r14, r1
    2a6a:	f1 2c       	mov	r15, r1
    2a6c:	08 2e       	mov	r0, r24
    2a6e:	04 c0       	rjmp	.+8      	; 0x2a78 <process_action+0x366>
    2a70:	cc 0c       	add	r12, r12
    2a72:	dd 1c       	adc	r13, r13
    2a74:	ee 1c       	adc	r14, r14
    2a76:	ff 1c       	adc	r15, r15
    2a78:	0a 94       	dec	r0
    2a7a:	d2 f7       	brpl	.-12     	; 0x2a70 <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a7c:	14 ff       	sbrs	r17, 4
    2a7e:	12 c0       	rjmp	.+36     	; 0x2aa4 <process_action+0x392>
    2a80:	0f e0       	ldi	r16, 0x0F	; 15
    2a82:	10 e0       	ldi	r17, 0x00	; 0
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	04 c0       	rjmp	.+8      	; 0x2a92 <process_action+0x380>
    2a8a:	00 0f       	add	r16, r16
    2a8c:	11 1f       	adc	r17, r17
    2a8e:	22 1f       	adc	r18, r18
    2a90:	33 1f       	adc	r19, r19
    2a92:	8a 95       	dec	r24
    2a94:	d2 f7       	brpl	.-12     	; 0x2a8a <process_action+0x378>
    2a96:	c9 01       	movw	r24, r18
    2a98:	b8 01       	movw	r22, r16
    2a9a:	60 95       	com	r22
    2a9c:	70 95       	com	r23
    2a9e:	80 95       	com	r24
    2aa0:	90 95       	com	r25
    2aa2:	03 c0       	rjmp	.+6      	; 0x2aaa <process_action+0x398>
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2aaa:	4b 2d       	mov	r20, r11
    2aac:	46 95       	lsr	r20
    2aae:	46 95       	lsr	r20
    2ab0:	43 70       	andi	r20, 0x03	; 3
    2ab2:	42 30       	cpi	r20, 0x02	; 2
    2ab4:	c1 f0       	breq	.+48     	; 0x2ae6 <process_action+0x3d4>
    2ab6:	60 f5       	brcc	.+88     	; 0x2b10 <process_action+0x3fe>
    2ab8:	6c 29       	or	r22, r12
    2aba:	7d 29       	or	r23, r13
    2abc:	8e 29       	or	r24, r14
    2abe:	9f 29       	or	r25, r15
    2ac0:	41 30       	cpi	r20, 0x01	; 1
    2ac2:	51 f1       	breq	.+84     	; 0x2b18 <process_action+0x406>
            break;
#endif
        default:
            break;
    }
}
    2ac4:	26 96       	adiw	r28, 0x06	; 6
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	df 90       	pop	r13
    2ade:	cf 90       	pop	r12
    2ae0:	bf 90       	pop	r11
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2ae2:	0c 94 74 1b 	jmp	0x36e8	; 0x36e8 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ae6:	6c 29       	or	r22, r12
    2ae8:	7d 29       	or	r23, r13
    2aea:	8e 29       	or	r24, r14
    2aec:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2aee:	26 96       	adiw	r28, 0x06	; 6
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
    2b0a:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b0c:	0c 94 86 1b 	jmp	0x370c	; 0x370c <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b10:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <layer_and>
    2b14:	c7 01       	movw	r24, r14
    2b16:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2b18:	26 96       	adiw	r28, 0x06	; 6
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	ff 90       	pop	r15
    2b2e:	ef 90       	pop	r14
    2b30:	df 90       	pop	r13
    2b32:	cf 90       	pop	r12
    2b34:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b36:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2b3a:	10 3f       	cpi	r17, 0xF0	; 240
    2b3c:	49 f1       	breq	.+82     	; 0x2b90 <process_action+0x47e>
    2b3e:	18 f4       	brcc	.+6      	; 0x2b46 <process_action+0x434>
    2b40:	10 3e       	cpi	r17, 0xE0	; 224
    2b42:	48 f4       	brcc	.+18     	; 0x2b56 <process_action+0x444>
    2b44:	91 c0       	rjmp	.+290    	; 0x2c68 <process_action+0x556>
    2b46:	12 3f       	cpi	r17, 0xF2	; 242
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <process_action+0x43a>
    2b4a:	53 c0       	rjmp	.+166    	; 0x2bf2 <process_action+0x4e0>
    2b4c:	e8 f1       	brcs	.+122    	; 0x2bc8 <process_action+0x4b6>
    2b4e:	13 3f       	cpi	r17, 0xF3	; 243
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <process_action+0x442>
    2b52:	64 c0       	rjmp	.+200    	; 0x2c1c <process_action+0x50a>
    2b54:	89 c0       	rjmp	.+274    	; 0x2c68 <process_action+0x556>
    2b56:	1f 70       	andi	r17, 0x0F	; 15
    2b58:	8b 2d       	mov	r24, r11
    2b5a:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2b5c:	ff 20       	and	r15, r15
    2b5e:	21 f0       	breq	.+8      	; 0x2b68 <process_action+0x456>
                        layer_on(action.layer_tap.val);
    2b60:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2b64:	81 2f       	mov	r24, r17
    2b66:	81 ce       	rjmp	.-766    	; 0x286a <process_action+0x158>
                    } else {
                        layer_off(action.layer_tap.val);
    2b68:	0e 94 1c 1b 	call	0x3638	; 0x3638 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b6c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2b6e:	26 96       	adiw	r28, 0x06	; 6
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	1f 91       	pop	r17
    2b80:	0f 91       	pop	r16
    2b82:	ff 90       	pop	r15
    2b84:	ef 90       	pop	r14
    2b86:	df 90       	pop	r13
    2b88:	cf 90       	pop	r12
    2b8a:	bf 90       	pop	r11
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2b8c:	0c 94 82 13 	jmp	0x2704	; 0x2704 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2b90:	ff 20       	and	r15, r15
    2b92:	b1 f0       	breq	.+44     	; 0x2bc0 <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2b94:	25 30       	cpi	r18, 0x05	; 5
    2b96:	08 f0       	brcs	.+2      	; 0x2b9a <process_action+0x488>
    2b98:	bf c0       	rjmp	.+382    	; 0x2d18 <process_action+0x606>
                            layer_invert(action.layer_tap.val);
    2b9a:	8b 2d       	mov	r24, r11
    2b9c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b9e:	26 96       	adiw	r28, 0x06	; 6
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	1f 91       	pop	r17
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	df 90       	pop	r13
    2bb8:	cf 90       	pop	r12
    2bba:	bf 90       	pop	r11
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2bbc:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2bc0:	26 30       	cpi	r18, 0x06	; 6
    2bc2:	08 f0       	brcs	.+2      	; 0x2bc6 <process_action+0x4b4>
    2bc4:	a9 c0       	rjmp	.+338    	; 0x2d18 <process_action+0x606>
    2bc6:	e9 cf       	rjmp	.-46     	; 0x2b9a <process_action+0x488>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2bc8:	ff 20       	and	r15, r15
    2bca:	a9 f0       	breq	.+42     	; 0x2bf6 <process_action+0x4e4>
    2bcc:	8b 2d       	mov	r24, r11
    2bce:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bd0:	26 96       	adiw	r28, 0x06	; 6
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	ff 90       	pop	r15
    2be6:	ef 90       	pop	r14
    2be8:	df 90       	pop	r13
    2bea:	cf 90       	pop	r12
    2bec:	bf 90       	pop	r11
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2bee:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2bf2:	ff 20       	and	r15, r15
    2bf4:	59 f3       	breq	.-42     	; 0x2bcc <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2bf6:	8b 2d       	mov	r24, r11
    2bf8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bfa:	26 96       	adiw	r28, 0x06	; 6
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	ff 90       	pop	r15
    2c10:	ef 90       	pop	r14
    2c12:	df 90       	pop	r13
    2c14:	cf 90       	pop	r12
    2c16:	bf 90       	pop	r11
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c18:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c1c:	ff 20       	and	r15, r15
    2c1e:	99 f0       	breq	.+38     	; 0x2c46 <process_action+0x534>
    2c20:	8b 2d       	mov	r24, r11
    2c22:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c24:	26 96       	adiw	r28, 0x06	; 6
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	1f 91       	pop	r17
    2c36:	0f 91       	pop	r16
    2c38:	ff 90       	pop	r15
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
    2c40:	bf 90       	pop	r11
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c42:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2c46:	26 96       	adiw	r28, 0x06	; 6
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	1f 91       	pop	r17
    2c58:	0f 91       	pop	r16
    2c5a:	ff 90       	pop	r15
    2c5c:	ef 90       	pop	r14
    2c5e:	df 90       	pop	r13
    2c60:	cf 90       	pop	r12
    2c62:	bf 90       	pop	r11
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2c64:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2c68:	ff 20       	and	r15, r15
    2c6a:	a9 f0       	breq	.+42     	; 0x2c96 <process_action+0x584>
                        if (tap_count > 0) {
    2c6c:	22 23       	and	r18, r18
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <process_action+0x560>
    2c70:	ad cf       	rjmp	.-166    	; 0x2bcc <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c72:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2c74:	26 96       	adiw	r28, 0x06	; 6
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
    2c90:	bf 90       	pop	r11
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c92:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2c96:	22 23       	and	r18, r18
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <process_action+0x58a>
    2c9a:	ad cf       	rjmp	.-166    	; 0x2bf6 <process_action+0x4e4>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c9c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2c9e:	26 96       	adiw	r28, 0x06	; 6
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	ff 90       	pop	r15
    2cb4:	ef 90       	pop	r14
    2cb6:	df 90       	pop	r13
    2cb8:	cf 90       	pop	r12
    2cba:	bf 90       	pop	r11
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2cbc:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2cc0:	4b 2d       	mov	r20, r11
    2cc2:	4f 70       	andi	r20, 0x0F	; 15
    2cc4:	61 2f       	mov	r22, r17
    2cc6:	c6 01       	movw	r24, r12
    2cc8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2ccc:	26 96       	adiw	r28, 0x06	; 6
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	ff 90       	pop	r15
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
    2ce8:	bf 90       	pop	r11
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2cea:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2cee:	4b 2d       	mov	r20, r11
    2cf0:	4f 70       	andi	r20, 0x0F	; 15
    2cf2:	61 2f       	mov	r22, r17
    2cf4:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2cf6:	26 96       	adiw	r28, 0x06	; 6
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	df 90       	pop	r13
    2d10:	cf 90       	pop	r12
    2d12:	bf 90       	pop	r11
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2d14:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2d18:	26 96       	adiw	r28, 0x06	; 6
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	df 90       	pop	r13
    2d32:	cf 90       	pop	r12
    2d34:	bf 90       	pop	r11
    2d36:	08 95       	ret

00002d38 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2d38:	0e 94 a0 1c 	call	0x3940	; 0x3940 <clear_weak_mods>
    clear_keys();
    2d3c:	0e 94 6f 1c 	call	0x38de	; 0x38de <clear_keys>
    send_keyboard_report();
    2d40:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2d44:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <mousekey_clear>
    mousekey_send();
    2d48:	0e 94 b0 22 	call	0x4560	; 0x4560 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 11 11 	call	0x2222	; 0x2222 <host_system_send>
    host_consumer_send(0);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0c 94 27 11 	jmp	0x224e	; 0x224e <host_consumer_send>

00002d5c <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2d5c:	0e 94 90 1c 	call	0x3920	; 0x3920 <clear_mods>
    clear_keyboard_but_mods();
    2d60:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <clear_keyboard_but_mods>

00002d64 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2d64:	0e 94 99 1b 	call	0x3732	; 0x3732 <layer_switch_get_action>

    switch (action.kind.id) {
    2d68:	29 2f       	mov	r18, r25
    2d6a:	22 95       	swap	r18
    2d6c:	2f 70       	andi	r18, 0x0F	; 15
    2d6e:	2c 30       	cpi	r18, 0x0C	; 12
    2d70:	30 f4       	brcc	.+12     	; 0x2d7e <is_tap_key+0x1a>
    2d72:	2a 30       	cpi	r18, 0x0A	; 10
    2d74:	48 f4       	brcc	.+18     	; 0x2d88 <is_tap_key+0x24>
    2d76:	22 50       	subi	r18, 0x02	; 2
    2d78:	22 30       	cpi	r18, 0x02	; 2
    2d7a:	78 f4       	brcc	.+30     	; 0x2d9a <is_tap_key+0x36>
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <is_tap_key+0x24>
    2d7e:	2c 30       	cpi	r18, 0x0C	; 12
    2d80:	41 f0       	breq	.+16     	; 0x2d92 <is_tap_key+0x2e>
    2d82:	2f 30       	cpi	r18, 0x0F	; 15
    2d84:	31 f0       	breq	.+12     	; 0x2d92 <is_tap_key+0x2e>
    2d86:	09 c0       	rjmp	.+18     	; 0x2d9a <is_tap_key+0x36>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d88:	80 3e       	cpi	r24, 0xE0	; 224
    2d8a:	48 f0       	brcs	.+18     	; 0x2d9e <is_tap_key+0x3a>
    2d8c:	80 3f       	cpi	r24, 0xF0	; 240
    2d8e:	29 f4       	brne	.+10     	; 0x2d9a <is_tap_key+0x36>
    2d90:	06 c0       	rjmp	.+12     	; 0x2d9e <is_tap_key+0x3a>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2d92:	93 fb       	bst	r25, 3
    2d94:	88 27       	eor	r24, r24
    2d96:	80 f9       	bld	r24, 0
    2d98:	08 95       	ret
            return false;
    }
    return false;
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2da0:	08 95       	ret

00002da2 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <debug_event+0x6>
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <debug_event+0x8>
    2daa:	1f 92       	push	r1
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	08 95       	ret

00002dc0 <debug_record>:

void debug_record(keyrecord_t record)
{
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <debug_record+0x6>
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <debug_record+0x8>
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <debug_record+0xa>
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2dce:	26 96       	adiw	r28, 0x06	; 6
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	08 95       	ret

00002de0 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2de6:	c0 91 7a 01 	lds	r28, 0x017A
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2dea:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dec:	80 91 7b 01 	lds	r24, 0x017B
    2df0:	c8 17       	cp	r28, r24
    2df2:	99 f0       	breq	.+38     	; 0x2e1a <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2df4:	d0 e0       	ldi	r29, 0x00	; 0
    2df6:	1c 9f       	mul	r17, r28
    2df8:	f0 01       	movw	r30, r0
    2dfa:	1d 9f       	mul	r17, r29
    2dfc:	f0 0d       	add	r31, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	e4 58       	subi	r30, 0x84	; 132
    2e02:	fe 4f       	sbci	r31, 0xFE	; 254
    2e04:	40 81       	ld	r20, Z
    2e06:	51 81       	ldd	r21, Z+1	; 0x01
    2e08:	62 81       	ldd	r22, Z+2	; 0x02
    2e0a:	73 81       	ldd	r23, Z+3	; 0x03
    2e0c:	84 81       	ldd	r24, Z+4	; 0x04
    2e0e:	95 81       	ldd	r25, Z+5	; 0x05
    2e10:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e14:	21 96       	adiw	r28, 0x01	; 1
    2e16:	c7 70       	andi	r28, 0x07	; 7
    2e18:	e9 cf       	rjmp	.-46     	; 0x2dec <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	08 95       	ret

00002e22 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2e22:	40 91 ac 01 	lds	r20, 0x01AC
    2e26:	50 91 ad 01 	lds	r21, 0x01AD
    2e2a:	60 91 ae 01 	lds	r22, 0x01AE
    2e2e:	70 91 af 01 	lds	r23, 0x01AF
    2e32:	80 91 b0 01 	lds	r24, 0x01B0
    2e36:	90 91 b1 01 	lds	r25, 0x01B1
    2e3a:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <debug_record>

00002e3e <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2e3e:	80 91 b1 01 	lds	r24, 0x01B1
    2e42:	82 95       	swap	r24
    2e44:	8f 70       	andi	r24, 0x0F	; 15
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <waiting_buffer_scan_tap+0xc>
    2e48:	54 c0       	rjmp	.+168    	; 0x2ef2 <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2e4a:	80 91 ae 01 	lds	r24, 0x01AE
    2e4e:	88 23       	and	r24, r24
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <waiting_buffer_scan_tap+0x16>
    2e52:	4f c0       	rjmp	.+158    	; 0x2ef2 <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e54:	80 91 7a 01 	lds	r24, 0x017A
    2e58:	a0 91 7b 01 	lds	r26, 0x017B
    2e5c:	40 91 af 01 	lds	r20, 0x01AF
    2e60:	50 91 b0 01 	lds	r21, 0x01B0
    2e64:	60 91 ac 01 	lds	r22, 0x01AC
    2e68:	70 91 ad 01 	lds	r23, 0x01AD
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e6c:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e6e:	8a 17       	cp	r24, r26
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <waiting_buffer_scan_tap+0x36>
    2e72:	3f c0       	rjmp	.+126    	; 0x2ef2 <waiting_buffer_scan_tap+0xb4>
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	41 15       	cp	r20, r1
    2e78:	51 05       	cpc	r21, r1
    2e7a:	c1 f1       	breq	.+112    	; 0x2eec <waiting_buffer_scan_tap+0xae>
    2e7c:	7f 3f       	cpi	r23, 0xFF	; 255
    2e7e:	11 f4       	brne	.+4      	; 0x2e84 <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e80:	6f 3f       	cpi	r22, 0xFF	; 255
    2e82:	a1 f1       	breq	.+104    	; 0x2eec <waiting_buffer_scan_tap+0xae>
    2e84:	b8 9f       	mul	r27, r24
    2e86:	f0 01       	movw	r30, r0
    2e88:	b9 9f       	mul	r27, r25
    2e8a:	f0 0d       	add	r31, r0
    2e8c:	11 24       	eor	r1, r1
    2e8e:	e4 58       	subi	r30, 0x84	; 132
    2e90:	fe 4f       	sbci	r31, 0xFE	; 254
    2e92:	21 81       	ldd	r18, Z+1	; 0x01
    2e94:	27 13       	cpse	r18, r23
    2e96:	2a c0       	rjmp	.+84     	; 0x2eec <waiting_buffer_scan_tap+0xae>
    2e98:	20 81       	ld	r18, Z
    2e9a:	26 13       	cpse	r18, r22
    2e9c:	27 c0       	rjmp	.+78     	; 0x2eec <waiting_buffer_scan_tap+0xae>
    2e9e:	22 81       	ldd	r18, Z+2	; 0x02
    2ea0:	21 11       	cpse	r18, r1
    2ea2:	24 c0       	rjmp	.+72     	; 0x2eec <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2ea4:	23 81       	ldd	r18, Z+3	; 0x03
    2ea6:	34 81       	ldd	r19, Z+4	; 0x04
    2ea8:	24 17       	cp	r18, r20
    2eaa:	35 07       	cpc	r19, r21
    2eac:	10 f4       	brcc	.+4      	; 0x2eb2 <waiting_buffer_scan_tap+0x74>
    2eae:	21 50       	subi	r18, 0x01	; 1
    2eb0:	31 09       	sbc	r19, r1
    2eb2:	24 1b       	sub	r18, r20
    2eb4:	35 0b       	sbc	r19, r21
    2eb6:	28 3c       	cpi	r18, 0xC8	; 200
    2eb8:	31 05       	cpc	r19, r1
    2eba:	c0 f4       	brcc	.+48     	; 0x2eec <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2ebc:	20 91 b1 01 	lds	r18, 0x01B1
    2ec0:	2f 70       	andi	r18, 0x0F	; 15
    2ec2:	20 61       	ori	r18, 0x10	; 16
    2ec4:	20 93 b1 01 	sts	0x01B1, r18
            waiting_buffer[i].tap.count = 1;
    2ec8:	26 e0       	ldi	r18, 0x06	; 6
    2eca:	28 9f       	mul	r18, r24
    2ecc:	f0 01       	movw	r30, r0
    2ece:	29 9f       	mul	r18, r25
    2ed0:	f0 0d       	add	r31, r0
    2ed2:	11 24       	eor	r1, r1
    2ed4:	ef 57       	subi	r30, 0x7F	; 127
    2ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed8:	80 81       	ld	r24, Z
    2eda:	8f 70       	andi	r24, 0x0F	; 15
    2edc:	80 61       	ori	r24, 0x10	; 16
    2ede:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2ee0:	8c ea       	ldi	r24, 0xAC	; 172
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2ee8:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	87 70       	andi	r24, 0x07	; 7
    2ef0:	be cf       	rjmp	.-132    	; 0x2e6e <waiting_buffer_scan_tap+0x30>
    2ef2:	08 95       	ret

00002ef4 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2ef4:	cf 92       	push	r12
    2ef6:	df 92       	push	r13
    2ef8:	ef 92       	push	r14
    2efa:	ff 92       	push	r15
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	62 97       	sbiw	r28, 0x12	; 18
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2f16:	85 e0       	ldi	r24, 0x05	; 5
    2f18:	f8 01       	movw	r30, r16
    2f1a:	de 01       	movw	r26, r28
    2f1c:	1d 96       	adiw	r26, 0x0d	; 13
    2f1e:	01 90       	ld	r0, Z+
    2f20:	0d 92       	st	X+, r0
    2f22:	8a 95       	dec	r24
    2f24:	e1 f7       	brne	.-8      	; 0x2f1e <process_tapping+0x2a>
    2f26:	d8 01       	movw	r26, r16
    2f28:	4c 91       	ld	r20, X
    2f2a:	11 96       	adiw	r26, 0x01	; 1
    2f2c:	5c 91       	ld	r21, X
    2f2e:	11 97       	sbiw	r26, 0x01	; 1
    2f30:	12 96       	adiw	r26, 0x02	; 2
    2f32:	6c 91       	ld	r22, X
    2f34:	80 91 af 01 	lds	r24, 0x01AF
    2f38:	90 91 b0 01 	lds	r25, 0x01B0
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <process_tapping+0x4e>
    2f40:	75 c1       	rjmp	.+746    	; 0x322c <process_tapping+0x338>
    2f42:	30 91 ac 01 	lds	r19, 0x01AC
    2f46:	70 91 ad 01 	lds	r23, 0x01AD
    2f4a:	7f 3f       	cpi	r23, 0xFF	; 255
    2f4c:	19 f4       	brne	.+6      	; 0x2f54 <process_tapping+0x60>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2f4e:	3f 3f       	cpi	r19, 0xFF	; 255
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <process_tapping+0x60>
    2f52:	6c c1       	rjmp	.+728    	; 0x322c <process_tapping+0x338>
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;
    2f54:	f8 01       	movw	r30, r16
    2f56:	c3 80       	ldd	r12, Z+3	; 0x03
    2f58:	d4 80       	ldd	r13, Z+4	; 0x04

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2f5a:	e0 90 ae 01 	lds	r14, 0x01AE
    2f5e:	ee 20       	and	r14, r14
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <process_tapping+0x70>
    2f62:	be c0       	rjmp	.+380    	; 0x30e0 <process_tapping+0x1ec>
    2f64:	20 91 b1 01 	lds	r18, 0x01B1
        if (WITHIN_TAPPING_TERM(event)) {
    2f68:	c8 16       	cp	r12, r24
    2f6a:	d9 06       	cpc	r13, r25
    2f6c:	28 f0       	brcs	.+10     	; 0x2f78 <process_tapping+0x84>
    2f6e:	d6 01       	movw	r26, r12
    2f70:	a8 1b       	sub	r26, r24
    2f72:	b9 0b       	sbc	r27, r25
    2f74:	cd 01       	movw	r24, r26
    2f76:	04 c0       	rjmp	.+8      	; 0x2f80 <process_tapping+0x8c>
    2f78:	80 95       	com	r24
    2f7a:	90 95       	com	r25
    2f7c:	8c 0d       	add	r24, r12
    2f7e:	9d 1d       	adc	r25, r13
    2f80:	ff 24       	eor	r15, r15
    2f82:	f3 94       	inc	r15
    2f84:	88 3c       	cpi	r24, 0xC8	; 200
    2f86:	91 05       	cpc	r25, r1
    2f88:	78 f0       	brcs	.+30     	; 0x2fa8 <process_tapping+0xb4>
    2f8a:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2f8c:	20 7f       	andi	r18, 0xF0	; 240
    2f8e:	09 f0       	breq	.+2      	; 0x2f92 <process_tapping+0x9e>
    2f90:	c4 c0       	rjmp	.+392    	; 0x311a <process_tapping+0x226>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2f92:	7c 2d       	mov	r23, r12
    2f94:	d9 8a       	std	Y+17, r13	; 0x11
    2f96:	c8 8a       	std	Y+16, r12	; 0x10
    2f98:	89 89       	ldd	r24, Y+17	; 0x11
    2f9a:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <debug_event>
                process_action(&tapping_key);
    2f9e:	8c ea       	ldi	r24, 0xAC	; 172
    2fa0:	91 e0       	ldi	r25, 0x01	; 1
    2fa2:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>
    2fa6:	af c0       	rjmp	.+350    	; 0x3106 <process_tapping+0x212>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2fa8:	82 2f       	mov	r24, r18
    2faa:	80 7f       	andi	r24, 0xF0	; 240
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <process_tapping+0xbc>
    2fae:	45 c0       	rjmp	.+138    	; 0x303a <process_tapping+0x146>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fb0:	57 13       	cpse	r21, r23
    2fb2:	13 c0       	rjmp	.+38     	; 0x2fda <process_tapping+0xe6>
    2fb4:	43 13       	cpse	r20, r19
    2fb6:	11 c0       	rjmp	.+34     	; 0x2fda <process_tapping+0xe6>
    2fb8:	61 11       	cpse	r22, r1
    2fba:	0f c0       	rjmp	.+30     	; 0x2fda <process_tapping+0xe6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2fbc:	2f 70       	andi	r18, 0x0F	; 15
    2fbe:	20 61       	ori	r18, 0x10	; 16
    2fc0:	20 93 b1 01 	sts	0x01B1, r18
                    debug_tapping_key();
    2fc4:	0e 94 11 17 	call	0x2e22	; 0x2e22 <debug_tapping_key>
                    process_action(&tapping_key);
    2fc8:	8c ea       	ldi	r24, 0xAC	; 172
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2fd0:	80 91 b1 01 	lds	r24, 0x01B1
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	85 83       	std	Z+5, r24	; 0x05
    2fd8:	2e c0       	rjmp	.+92     	; 0x3036 <process_tapping+0x142>
    2fda:	cd 28       	or	r12, r13
    2fdc:	19 f1       	breq	.+70     	; 0x3024 <process_tapping+0x130>
    2fde:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe0:	11 f4       	brne	.+4      	; 0x2fe6 <process_tapping+0xf2>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2fe2:	4f 3f       	cpi	r20, 0xFF	; 255
    2fe4:	f9 f0       	breq	.+62     	; 0x3024 <process_tapping+0x130>
    2fe6:	f6 2e       	mov	r15, r22
    2fe8:	61 11       	cpse	r22, r1
    2fea:	1c c0       	rjmp	.+56     	; 0x3024 <process_tapping+0x130>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fec:	80 91 7a 01 	lds	r24, 0x017A
    2ff0:	20 91 7b 01 	lds	r18, 0x017B
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2ff4:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ff6:	82 17       	cp	r24, r18
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <process_tapping+0x108>
    2ffa:	5b c0       	rjmp	.+182    	; 0x30b2 <process_tapping+0x1be>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	38 9f       	mul	r19, r24
    3000:	f0 01       	movw	r30, r0
    3002:	39 9f       	mul	r19, r25
    3004:	f0 0d       	add	r31, r0
    3006:	11 24       	eor	r1, r1
    3008:	e4 58       	subi	r30, 0x84	; 132
    300a:	fe 4f       	sbci	r31, 0xFE	; 254
    300c:	71 81       	ldd	r23, Z+1	; 0x01
    300e:	57 13       	cpse	r21, r23
    3010:	06 c0       	rjmp	.+12     	; 0x301e <process_tapping+0x12a>
    3012:	70 81       	ld	r23, Z
    3014:	47 13       	cpse	r20, r23
    3016:	03 c0       	rjmp	.+6      	; 0x301e <process_tapping+0x12a>
    3018:	72 81       	ldd	r23, Z+2	; 0x02
    301a:	71 11       	cpse	r23, r1
    301c:	03 c0       	rjmp	.+6      	; 0x3024 <process_tapping+0x130>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    301e:	01 96       	adiw	r24, 0x01	; 1
    3020:	87 70       	andi	r24, 0x07	; 7
    3022:	e9 cf       	rjmp	.-46     	; 0x2ff6 <process_tapping+0x102>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3024:	f6 2e       	mov	r15, r22
    3026:	66 23       	and	r22, r22
    3028:	09 f4       	brne	.+2      	; 0x302c <process_tapping+0x138>
    302a:	1c c1       	rjmp	.+568    	; 0x3264 <process_tapping+0x370>
                        tapping_key.tap.interrupted = true;
    302c:	80 91 b1 01 	lds	r24, 0x01B1
    3030:	81 60       	ori	r24, 0x01	; 1
    3032:	80 93 b1 01 	sts	0x01B1, r24
                    }
                    // enqueue 
                    return false;
    3036:	f1 2c       	mov	r15, r1
    3038:	15 c1       	rjmp	.+554    	; 0x3264 <process_tapping+0x370>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    303a:	57 13       	cpse	r21, r23
    303c:	09 c0       	rjmp	.+18     	; 0x3050 <process_tapping+0x15c>
    303e:	43 13       	cpse	r20, r19
    3040:	07 c0       	rjmp	.+14     	; 0x3050 <process_tapping+0x15c>
    3042:	61 11       	cpse	r22, r1
    3044:	05 c0       	rjmp	.+10     	; 0x3050 <process_tapping+0x15c>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3046:	80 91 b1 01 	lds	r24, 0x01B1
    304a:	f8 01       	movw	r30, r16
    304c:	85 83       	std	Z+5, r24	; 0x05
    304e:	c8 c0       	rjmp	.+400    	; 0x31e0 <process_tapping+0x2ec>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3050:	4d 87       	std	Y+13, r20	; 0x0d
    3052:	5e 87       	std	Y+14, r21	; 0x0e
    3054:	8d 85       	ldd	r24, Y+13	; 0x0d
    3056:	9e 85       	ldd	r25, Y+14	; 0x0e
    3058:	6a 8b       	std	Y+18, r22	; 0x12
    305a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <is_tap_key>
    305e:	6a 89       	ldd	r22, Y+18	; 0x12
    3060:	88 23       	and	r24, r24
    3062:	d1 f1       	breq	.+116    	; 0x30d8 <process_tapping+0x1e4>
    3064:	66 23       	and	r22, r22
    3066:	c1 f1       	breq	.+112    	; 0x30d8 <process_tapping+0x1e4>
                    if (tapping_key.tap.count > 1) {
    3068:	20 91 b1 01 	lds	r18, 0x01B1
    306c:	82 2f       	mov	r24, r18
    306e:	82 95       	swap	r24
    3070:	8f 70       	andi	r24, 0x0F	; 15
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	02 97       	sbiw	r24, 0x02	; 2
    3076:	74 f0       	brlt	.+28     	; 0x3094 <process_tapping+0x1a0>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3078:	80 91 ac 01 	lds	r24, 0x01AC
    307c:	90 91 ad 01 	lds	r25, 0x01AD
    3080:	98 87       	std	Y+8, r25	; 0x08
    3082:	8f 83       	std	Y+7, r24	; 0x07
    3084:	19 86       	std	Y+9, r1	; 0x09
    3086:	db 86       	std	Y+11, r13	; 0x0b
    3088:	ca 86       	std	Y+10, r12	; 0x0a
    308a:	2c 87       	std	Y+12, r18	; 0x0c
    308c:	ce 01       	movw	r24, r28
    308e:	07 96       	adiw	r24, 0x07	; 7
    3090:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    3094:	86 e0       	ldi	r24, 0x06	; 6
    3096:	f8 01       	movw	r30, r16
    3098:	ac ea       	ldi	r26, 0xAC	; 172
    309a:	b1 e0       	ldi	r27, 0x01	; 1
    309c:	01 90       	ld	r0, Z+
    309e:	0d 92       	st	X+, r0
    30a0:	8a 95       	dec	r24
    30a2:	e1 f7       	brne	.-8      	; 0x309c <process_tapping+0x1a8>
                    waiting_buffer_scan_tap();
    30a4:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <waiting_buffer_scan_tap>
                    debug_tapping_key();
    30a8:	0e 94 11 17 	call	0x2e22	; 0x2e22 <debug_tapping_key>
                    return true;
    30ac:	ff 24       	eor	r15, r15
    30ae:	f3 94       	inc	r15
    30b0:	d9 c0       	rjmp	.+434    	; 0x3264 <process_tapping+0x370>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    30b2:	4d 87       	std	Y+13, r20	; 0x0d
    30b4:	5e 87       	std	Y+14, r21	; 0x0e
    30b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ba:	0e 94 99 1b 	call	0x3732	; 0x3732 <layer_switch_get_action>
                    switch (action.kind.id) {
    30be:	29 2f       	mov	r18, r25
    30c0:	22 95       	swap	r18
    30c2:	2f 70       	andi	r18, 0x0F	; 15
    30c4:	22 30       	cpi	r18, 0x02	; 2
    30c6:	08 f0       	brcs	.+2      	; 0x30ca <process_tapping+0x1d6>
    30c8:	c1 c0       	rjmp	.+386    	; 0x324c <process_tapping+0x358>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    30ca:	9f 70       	andi	r25, 0x0F	; 15
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <process_tapping+0x1dc>
    30ce:	bb c0       	rjmp	.+374    	; 0x3246 <process_tapping+0x352>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    30d0:	80 5e       	subi	r24, 0xE0	; 224
    30d2:	88 30       	cpi	r24, 0x08	; 8
    30d4:	08 f4       	brcc	.+2      	; 0x30d8 <process_tapping+0x1e4>
    30d6:	c6 c0       	rjmp	.+396    	; 0x3264 <process_tapping+0x370>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    30d8:	c8 01       	movw	r24, r16
    30da:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>
    30de:	e6 cf       	rjmp	.-52     	; 0x30ac <process_tapping+0x1b8>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    30e0:	c8 16       	cp	r12, r24
    30e2:	d9 06       	cpc	r13, r25
    30e4:	08 f4       	brcc	.+2      	; 0x30e8 <process_tapping+0x1f4>
    30e6:	53 c0       	rjmp	.+166    	; 0x318e <process_tapping+0x29a>
    30e8:	f6 01       	movw	r30, r12
    30ea:	e8 1b       	sub	r30, r24
    30ec:	f9 0b       	sbc	r31, r25
    30ee:	cf 01       	movw	r24, r30
    30f0:	88 3c       	cpi	r24, 0xC8	; 200
    30f2:	91 05       	cpc	r25, r1
    30f4:	08 f4       	brcc	.+2      	; 0x30f8 <process_tapping+0x204>
    30f6:	50 c0       	rjmp	.+160    	; 0x3198 <process_tapping+0x2a4>
    30f8:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    30fa:	7c 2d       	mov	r23, r12
    30fc:	d9 8a       	std	Y+17, r13	; 0x11
    30fe:	c8 8a       	std	Y+16, r12	; 0x10
    3100:	89 89       	ldd	r24, Y+17	; 0x11
    3102:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    3106:	ec ea       	ldi	r30, 0xAC	; 172
    3108:	f1 e0       	ldi	r31, 0x01	; 1
    310a:	86 e0       	ldi	r24, 0x06	; 6
    310c:	df 01       	movw	r26, r30
    310e:	1d 92       	st	X+, r1
    3110:	8a 95       	dec	r24
    3112:	e9 f7       	brne	.-6      	; 0x310e <process_tapping+0x21a>
                debug_tapping_key();
    3114:	0e 94 11 17 	call	0x2e22	; 0x2e22 <debug_tapping_key>
                return false;
    3118:	a5 c0       	rjmp	.+330    	; 0x3264 <process_tapping+0x370>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    311a:	57 13       	cpse	r21, r23
    311c:	14 c0       	rjmp	.+40     	; 0x3146 <process_tapping+0x252>
    311e:	43 13       	cpse	r20, r19
    3120:	12 c0       	rjmp	.+36     	; 0x3146 <process_tapping+0x252>
    3122:	61 11       	cpse	r22, r1
    3124:	10 c0       	rjmp	.+32     	; 0x3146 <process_tapping+0x252>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3126:	80 91 b1 01 	lds	r24, 0x01B1
    312a:	f8 01       	movw	r30, r16
    312c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    312e:	c8 01       	movw	r24, r16
    3130:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>
                    tapping_key = (keyrecord_t){};
    3134:	86 e0       	ldi	r24, 0x06	; 6
    3136:	ec ea       	ldi	r30, 0xAC	; 172
    3138:	f1 e0       	ldi	r31, 0x01	; 1
    313a:	df 01       	movw	r26, r30
    313c:	1d 92       	st	X+, r1
    313e:	8a 95       	dec	r24
    3140:	e9 f7       	brne	.-6      	; 0x313c <process_tapping+0x248>
                    return true;
    3142:	fe 2c       	mov	r15, r14
    3144:	8f c0       	rjmp	.+286    	; 0x3264 <process_tapping+0x370>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3146:	4d 87       	std	Y+13, r20	; 0x0d
    3148:	5e 87       	std	Y+14, r21	; 0x0e
    314a:	8d 85       	ldd	r24, Y+13	; 0x0d
    314c:	9e 85       	ldd	r25, Y+14	; 0x0e
    314e:	6a 8b       	std	Y+18, r22	; 0x12
    3150:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <is_tap_key>
    3154:	6a 89       	ldd	r22, Y+18	; 0x12
    3156:	88 23       	and	r24, r24
    3158:	09 f4       	brne	.+2      	; 0x315c <process_tapping+0x268>
    315a:	be cf       	rjmp	.-132    	; 0x30d8 <process_tapping+0x1e4>
    315c:	66 23       	and	r22, r22
    315e:	09 f4       	brne	.+2      	; 0x3162 <process_tapping+0x26e>
    3160:	bb cf       	rjmp	.-138    	; 0x30d8 <process_tapping+0x1e4>
                    if (tapping_key.tap.count > 1) {
    3162:	20 91 b1 01 	lds	r18, 0x01B1
    3166:	82 2f       	mov	r24, r18
    3168:	82 95       	swap	r24
    316a:	8f 70       	andi	r24, 0x0F	; 15
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	02 97       	sbiw	r24, 0x02	; 2
    3170:	0c f4       	brge	.+2      	; 0x3174 <process_tapping+0x280>
    3172:	90 cf       	rjmp	.-224    	; 0x3094 <process_tapping+0x1a0>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3174:	80 91 ac 01 	lds	r24, 0x01AC
    3178:	90 91 ad 01 	lds	r25, 0x01AD
    317c:	9a 83       	std	Y+2, r25	; 0x02
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	1b 82       	std	Y+3, r1	; 0x03
    3182:	dd 82       	std	Y+5, r13	; 0x05
    3184:	cc 82       	std	Y+4, r12	; 0x04
    3186:	2e 83       	std	Y+6, r18	; 0x06
    3188:	ce 01       	movw	r24, r28
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	81 cf       	rjmp	.-254    	; 0x3090 <process_tapping+0x19c>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    318e:	80 95       	com	r24
    3190:	90 95       	com	r25
    3192:	8c 0d       	add	r24, r12
    3194:	9d 1d       	adc	r25, r13
    3196:	ac cf       	rjmp	.-168    	; 0x30f0 <process_tapping+0x1fc>
            if (event.pressed) {
    3198:	f6 2e       	mov	r15, r22
    319a:	66 23       	and	r22, r22
    319c:	09 f4       	brne	.+2      	; 0x31a0 <process_tapping+0x2ac>
    319e:	9c cf       	rjmp	.-200    	; 0x30d8 <process_tapping+0x1e4>
                if (IS_TAPPING_KEY(event.key)) {
    31a0:	57 13       	cpse	r21, r23
    31a2:	33 c0       	rjmp	.+102    	; 0x320a <process_tapping+0x316>
    31a4:	43 13       	cpse	r20, r19
    31a6:	31 c0       	rjmp	.+98     	; 0x320a <process_tapping+0x316>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    31a8:	20 91 b1 01 	lds	r18, 0x01B1
    31ac:	20 fd       	sbrc	r18, 0
    31ae:	24 c0       	rjmp	.+72     	; 0x31f8 <process_tapping+0x304>
    31b0:	82 2f       	mov	r24, r18
    31b2:	82 95       	swap	r24
    31b4:	8f 70       	andi	r24, 0x0F	; 15
    31b6:	48 2f       	mov	r20, r24
    31b8:	50 e0       	ldi	r21, 0x00	; 0
    31ba:	41 15       	cp	r20, r1
    31bc:	51 05       	cpc	r21, r1
    31be:	e1 f0       	breq	.+56     	; 0x31f8 <process_tapping+0x304>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    31c0:	d8 01       	movw	r26, r16
    31c2:	15 96       	adiw	r26, 0x05	; 5
    31c4:	2c 93       	st	X, r18
    31c6:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    31c8:	4f 30       	cpi	r20, 0x0F	; 15
    31ca:	51 05       	cpc	r21, r1
    31cc:	49 f0       	breq	.+18     	; 0x31e0 <process_tapping+0x2ec>
    31ce:	8f 5f       	subi	r24, 0xFF	; 255
    31d0:	98 2f       	mov	r25, r24
    31d2:	92 95       	swap	r25
    31d4:	90 7f       	andi	r25, 0xF0	; 240
    31d6:	82 2f       	mov	r24, r18
    31d8:	8f 70       	andi	r24, 0x0F	; 15
    31da:	89 2b       	or	r24, r25
    31dc:	15 96       	adiw	r26, 0x05	; 5
    31de:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    31e0:	c8 01       	movw	r24, r16
    31e2:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>
                        tapping_key = *keyp;
    31e6:	86 e0       	ldi	r24, 0x06	; 6
    31e8:	f8 01       	movw	r30, r16
    31ea:	ac ea       	ldi	r26, 0xAC	; 172
    31ec:	b1 e0       	ldi	r27, 0x01	; 1
    31ee:	01 90       	ld	r0, Z+
    31f0:	0d 92       	st	X+, r0
    31f2:	8a 95       	dec	r24
    31f4:	e1 f7       	brne	.-8      	; 0x31ee <process_tapping+0x2fa>
    31f6:	8e cf       	rjmp	.-228    	; 0x3114 <process_tapping+0x220>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    31f8:	86 e0       	ldi	r24, 0x06	; 6
    31fa:	f8 01       	movw	r30, r16
    31fc:	ac ea       	ldi	r26, 0xAC	; 172
    31fe:	b1 e0       	ldi	r27, 0x01	; 1
    3200:	01 90       	ld	r0, Z+
    3202:	0d 92       	st	X+, r0
    3204:	8a 95       	dec	r24
    3206:	e1 f7       	brne	.-8      	; 0x3200 <process_tapping+0x30c>
                        return true;
    3208:	2d c0       	rjmp	.+90     	; 0x3264 <process_tapping+0x370>
                    }
                } else if (is_tap_key(event.key)) {
    320a:	4d 87       	std	Y+13, r20	; 0x0d
    320c:	5e 87       	std	Y+14, r21	; 0x0e
    320e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3210:	9e 85       	ldd	r25, Y+14	; 0x0e
    3212:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <is_tap_key>
    3216:	81 11       	cpse	r24, r1
    3218:	3d cf       	rjmp	.-390    	; 0x3094 <process_tapping+0x1a0>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    321a:	80 91 b1 01 	lds	r24, 0x01B1
    321e:	81 60       	ori	r24, 0x01	; 1
    3220:	80 93 b1 01 	sts	0x01B1, r24
                    process_action(keyp);
    3224:	c8 01       	movw	r24, r16
    3226:	0e 94 89 13 	call	0x2712	; 0x2712 <process_action>
                    return true;
    322a:	1c c0       	rjmp	.+56     	; 0x3264 <process_tapping+0x370>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    322c:	66 23       	and	r22, r22
    322e:	09 f4       	brne	.+2      	; 0x3232 <process_tapping+0x33e>
    3230:	53 cf       	rjmp	.-346    	; 0x30d8 <process_tapping+0x1e4>
    3232:	4d 87       	std	Y+13, r20	; 0x0d
    3234:	5e 87       	std	Y+14, r21	; 0x0e
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	9e 85       	ldd	r25, Y+14	; 0x0e
    323a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <is_tap_key>
    323e:	88 23       	and	r24, r24
    3240:	09 f4       	brne	.+2      	; 0x3244 <process_tapping+0x350>
    3242:	4a cf       	rjmp	.-364    	; 0x30d8 <process_tapping+0x1e4>
    3244:	27 cf       	rjmp	.-434    	; 0x3094 <process_tapping+0x1a0>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3246:	81 11       	cpse	r24, r1
    3248:	43 cf       	rjmp	.-378    	; 0x30d0 <process_tapping+0x1dc>
    324a:	0c c0       	rjmp	.+24     	; 0x3264 <process_tapping+0x370>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    324c:	24 30       	cpi	r18, 0x04	; 4
    324e:	08 f0       	brcs	.+2      	; 0x3252 <process_tapping+0x35e>
    3250:	43 cf       	rjmp	.-378    	; 0x30d8 <process_tapping+0x1e4>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3252:	9f 70       	andi	r25, 0x0F	; 15
    3254:	09 f4       	brne	.+2      	; 0x3258 <process_tapping+0x364>
    3256:	3c cf       	rjmp	.-392    	; 0x30d0 <process_tapping+0x1dc>
    3258:	d8 01       	movw	r26, r16
    325a:	15 96       	adiw	r26, 0x05	; 5
    325c:	9c 91       	ld	r25, X
    325e:	90 7f       	andi	r25, 0xF0	; 240
    3260:	09 f0       	breq	.+2      	; 0x3264 <process_tapping+0x370>
    3262:	36 cf       	rjmp	.-404    	; 0x30d0 <process_tapping+0x1dc>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3264:	8f 2d       	mov	r24, r15
    3266:	62 96       	adiw	r28, 0x12	; 18
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	ff 90       	pop	r15
    327c:	ef 90       	pop	r14
    327e:	df 90       	pop	r13
    3280:	cf 90       	pop	r12
    3282:	08 95       	ret

00003284 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3284:	1f 93       	push	r17
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	2c 97       	sbiw	r28, 0x0c	; 12
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	4f 83       	std	Y+7, r20	; 0x07
    329c:	58 87       	std	Y+8, r21	; 0x08
    329e:	69 87       	std	Y+9, r22	; 0x09
    32a0:	7a 87       	std	Y+10, r23	; 0x0a
    32a2:	8b 87       	std	Y+11, r24	; 0x0b
    32a4:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    32a6:	ce 01       	movw	r24, r28
    32a8:	07 96       	adiw	r24, 0x07	; 7
    32aa:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <process_tapping>
    32ae:	88 23       	and	r24, r24
    32b0:	71 f0       	breq	.+28     	; 0x32ce <action_tapping_process+0x4a>

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    32b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b6:	89 2b       	or	r24, r25
    32b8:	09 f4       	brne	.+2      	; 0x32bc <action_tapping_process+0x38>
    32ba:	41 c0       	rjmp	.+130    	; 0x333e <action_tapping_process+0xba>
    32bc:	88 85       	ldd	r24, Y+8	; 0x08
    32be:	8f 3f       	cpi	r24, 0xFF	; 255
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <action_tapping_process+0x40>
    32c2:	65 c0       	rjmp	.+202    	; 0x338e <action_tapping_process+0x10a>
    32c4:	8f 81       	ldd	r24, Y+7	; 0x07
    32c6:	8f 3f       	cpi	r24, 0xFF	; 255
    32c8:	09 f0       	breq	.+2      	; 0x32cc <action_tapping_process+0x48>
    32ca:	61 c0       	rjmp	.+194    	; 0x338e <action_tapping_process+0x10a>
    32cc:	38 c0       	rjmp	.+112    	; 0x333e <action_tapping_process+0xba>
    32ce:	86 e0       	ldi	r24, 0x06	; 6
    32d0:	fe 01       	movw	r30, r28
    32d2:	37 96       	adiw	r30, 0x07	; 7
    32d4:	de 01       	movw	r26, r28
    32d6:	11 96       	adiw	r26, 0x01	; 1
    32d8:	01 90       	ld	r0, Z+
    32da:	0d 92       	st	X+, r0
    32dc:	8a 95       	dec	r24
    32de:	e1 f7       	brne	.-8      	; 0x32d8 <action_tapping_process+0x54>
    32e0:	6a 85       	ldd	r22, Y+10	; 0x0a
    32e2:	7b 85       	ldd	r23, Y+11	; 0x0b
    32e4:	61 15       	cp	r22, r1
    32e6:	71 05       	cpc	r23, r1
    32e8:	51 f1       	breq	.+84     	; 0x333e <action_tapping_process+0xba>
    32ea:	ff 81       	ldd	r31, Y+7	; 0x07
    32ec:	e8 85       	ldd	r30, Y+8	; 0x08
    32ee:	ef 3f       	cpi	r30, 0xFF	; 255
    32f0:	11 f4       	brne	.+4      	; 0x32f6 <action_tapping_process+0x72>
    32f2:	ff 3f       	cpi	r31, 0xFF	; 255
    32f4:	21 f1       	breq	.+72     	; 0x333e <action_tapping_process+0xba>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    32f6:	20 91 7b 01 	lds	r18, 0x017B
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	c9 01       	movw	r24, r18
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	87 70       	andi	r24, 0x07	; 7
    3302:	99 27       	eor	r25, r25
    3304:	40 91 7a 01 	lds	r20, 0x017A
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	84 17       	cp	r24, r20
    330c:	95 07       	cpc	r25, r21
    330e:	09 f4       	brne	.+2      	; 0x3312 <action_tapping_process+0x8e>
    3310:	47 c0       	rjmp	.+142    	; 0x33a0 <action_tapping_process+0x11c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3312:	f9 83       	std	Y+1, r31	; 0x01
    3314:	ea 83       	std	Y+2, r30	; 0x02
    3316:	7d 83       	std	Y+5, r23	; 0x05
    3318:	6c 83       	std	Y+4, r22	; 0x04
    331a:	96 e0       	ldi	r25, 0x06	; 6
    331c:	92 9f       	mul	r25, r18
    331e:	d0 01       	movw	r26, r0
    3320:	93 9f       	mul	r25, r19
    3322:	b0 0d       	add	r27, r0
    3324:	11 24       	eor	r1, r1
    3326:	a4 58       	subi	r26, 0x84	; 132
    3328:	be 4f       	sbci	r27, 0xFE	; 254
    332a:	fe 01       	movw	r30, r28
    332c:	31 96       	adiw	r30, 0x01	; 1
    332e:	01 90       	ld	r0, Z+
    3330:	0d 92       	st	X+, r0
    3332:	9a 95       	dec	r25
    3334:	e1 f7       	brne	.-8      	; 0x332e <action_tapping_process+0xaa>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3336:	80 93 7b 01 	sts	0x017B, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    333a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    333e:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3340:	80 91 7a 01 	lds	r24, 0x017A
    3344:	90 91 7b 01 	lds	r25, 0x017B
    3348:	89 17       	cp	r24, r25
    334a:	b9 f1       	breq	.+110    	; 0x33ba <action_tapping_process+0x136>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    334c:	18 9f       	mul	r17, r24
    334e:	c0 01       	movw	r24, r0
    3350:	11 24       	eor	r1, r1
    3352:	84 58       	subi	r24, 0x84	; 132
    3354:	9e 4f       	sbci	r25, 0xFE	; 254
    3356:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <process_tapping>
    335a:	88 23       	and	r24, r24
    335c:	71 f1       	breq	.+92     	; 0x33ba <action_tapping_process+0x136>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    335e:	e0 91 7a 01 	lds	r30, 0x017A
    3362:	1e 9f       	mul	r17, r30
    3364:	f0 01       	movw	r30, r0
    3366:	11 24       	eor	r1, r1
    3368:	e4 58       	subi	r30, 0x84	; 132
    336a:	fe 4f       	sbci	r31, 0xFE	; 254
    336c:	40 81       	ld	r20, Z
    336e:	51 81       	ldd	r21, Z+1	; 0x01
    3370:	62 81       	ldd	r22, Z+2	; 0x02
    3372:	73 81       	ldd	r23, Z+3	; 0x03
    3374:	84 81       	ldd	r24, Z+4	; 0x04
    3376:	95 81       	ldd	r25, Z+5	; 0x05
    3378:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    337c:	80 91 7a 01 	lds	r24, 0x017A
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	87 70       	andi	r24, 0x07	; 7
    3386:	99 27       	eor	r25, r25
    3388:	80 93 7a 01 	sts	0x017A, r24
    338c:	d9 cf       	rjmp	.-78     	; 0x3340 <action_tapping_process+0xbc>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    338e:	4f 81       	ldd	r20, Y+7	; 0x07
    3390:	58 85       	ldd	r21, Y+8	; 0x08
    3392:	69 85       	ldd	r22, Y+9	; 0x09
    3394:	7a 85       	ldd	r23, Y+10	; 0x0a
    3396:	8b 85       	ldd	r24, Y+11	; 0x0b
    3398:	9c 85       	ldd	r25, Y+12	; 0x0c
    339a:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <debug_record>
    339e:	cf cf       	rjmp	.-98     	; 0x333e <action_tapping_process+0xba>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    33a0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    33a4:	10 92 7b 01 	sts	0x017B, r1
    waiting_buffer_tail = 0;
    33a8:	10 92 7a 01 	sts	0x017A, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    33ac:	ec ea       	ldi	r30, 0xAC	; 172
    33ae:	f1 e0       	ldi	r31, 0x01	; 1
    33b0:	86 e0       	ldi	r24, 0x06	; 6
    33b2:	df 01       	movw	r26, r30
    33b4:	1d 92       	st	X+, r1
    33b6:	8a 95       	dec	r24
    33b8:	e9 f7       	brne	.-6      	; 0x33b4 <action_tapping_process+0x130>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    33ba:	2c 96       	adiw	r28, 0x0c	; 12
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	08 95       	ret

000033ce <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    33ce:	df 92       	push	r13
    33d0:	ef 92       	push	r14
    33d2:	ff 92       	push	r15
    33d4:	0f 93       	push	r16
    33d6:	1f 93       	push	r17
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    33de:	89 2b       	or	r24, r25
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <action_macro_play+0x16>
    33e2:	88 c0       	rjmp	.+272    	; 0x34f4 <action_macro_play+0x126>
    33e4:	e1 2c       	mov	r14, r1
    33e6:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    33e8:	dd 24       	eor	r13, r13
    33ea:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    33ec:	ef 01       	movw	r28, r30
    33ee:	21 96       	adiw	r28, 0x01	; 1
    33f0:	84 91       	lpm	r24, Z
    33f2:	85 37       	cpi	r24, 0x75	; 117
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <action_macro_play+0x2a>
    33f6:	60 c0       	rjmp	.+192    	; 0x34b8 <action_macro_play+0xea>
    33f8:	58 f4       	brcc	.+22     	; 0x3410 <action_macro_play+0x42>
    33fa:	84 37       	cpi	r24, 0x74	; 116
    33fc:	08 f0       	brcs	.+2      	; 0x3400 <action_macro_play+0x32>
    33fe:	4e c0       	rjmp	.+156    	; 0x349c <action_macro_play+0xce>
    3400:	84 30       	cpi	r24, 0x04	; 4
    3402:	08 f0       	brcs	.+2      	; 0x3406 <action_macro_play+0x38>
    3404:	68 c0       	rjmp	.+208    	; 0x34d6 <action_macro_play+0x108>
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	d1 f0       	breq	.+52     	; 0x343e <action_macro_play+0x70>
    340a:	82 30       	cpi	r24, 0x02	; 2
    340c:	71 f1       	breq	.+92     	; 0x346a <action_macro_play+0x9c>
    340e:	72 c0       	rjmp	.+228    	; 0x34f4 <action_macro_play+0x126>
    3410:	88 37       	cpi	r24, 0x78	; 120
    3412:	09 f4       	brne	.+2      	; 0x3416 <action_macro_play+0x48>
    3414:	5b c0       	rjmp	.+182    	; 0x34cc <action_macro_play+0xfe>
    3416:	50 f4       	brcc	.+20     	; 0x342c <action_macro_play+0x5e>
    3418:	86 37       	cpi	r24, 0x76	; 118
    341a:	09 f4       	brne	.+2      	; 0x341e <action_macro_play+0x50>
    341c:	53 c0       	rjmp	.+166    	; 0x34c4 <action_macro_play+0xf6>
    341e:	87 37       	cpi	r24, 0x77	; 119
    3420:	09 f0       	breq	.+2      	; 0x3424 <action_macro_play+0x56>
    3422:	68 c0       	rjmp	.+208    	; 0x34f4 <action_macro_play+0x126>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3424:	8e 2d       	mov	r24, r14
    3426:	0e 94 8d 1c 	call	0x391a	; 0x391a <set_mods>
    342a:	52 c0       	rjmp	.+164    	; 0x34d0 <action_macro_play+0x102>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    342c:	9c e7       	ldi	r25, 0x7C	; 124
    342e:	98 0f       	add	r25, r24
    3430:	90 37       	cpi	r25, 0x70	; 112
    3432:	08 f0       	brcs	.+2      	; 0x3436 <action_macro_play+0x68>
    3434:	5f c0       	rjmp	.+190    	; 0x34f4 <action_macro_play+0x126>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3436:	8f 77       	andi	r24, 0x7F	; 127
    3438:	0e 94 2c 13 	call	0x2658	; 0x2658 <unregister_code>
                break;
    343c:	4e c0       	rjmp	.+156    	; 0x34da <action_macro_play+0x10c>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    343e:	8f 01       	movw	r16, r30
    3440:	0e 5f       	subi	r16, 0xFE	; 254
    3442:	1f 4f       	sbci	r17, 0xFF	; 255
    3444:	fe 01       	movw	r30, r28
    3446:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3448:	90 e2       	ldi	r25, 0x20	; 32
    344a:	98 0f       	add	r25, r24
    344c:	98 30       	cpi	r25, 0x08	; 8
    344e:	50 f4       	brcc	.+20     	; 0x3464 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    3450:	87 70       	andi	r24, 0x07	; 7
    3452:	fd 2d       	mov	r31, r13
    3454:	01 c0       	rjmp	.+2      	; 0x3458 <action_macro_play+0x8a>
    3456:	ff 0f       	add	r31, r31
    3458:	8a 95       	dec	r24
    345a:	ea f7       	brpl	.-6      	; 0x3456 <action_macro_play+0x88>
    345c:	8f 2f       	mov	r24, r31
    345e:	0e 94 93 1c 	call	0x3926	; 0x3926 <add_weak_mods>
    3462:	15 c0       	rjmp	.+42     	; 0x348e <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3464:	0e 94 59 12 	call	0x24b2	; 0x24b2 <register_code>
    3468:	14 c0       	rjmp	.+40     	; 0x3492 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    346a:	8f 01       	movw	r16, r30
    346c:	0e 5f       	subi	r16, 0xFE	; 254
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	fe 01       	movw	r30, r28
    3472:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3474:	90 e2       	ldi	r25, 0x20	; 32
    3476:	98 0f       	add	r25, r24
    3478:	98 30       	cpi	r25, 0x08	; 8
    347a:	68 f4       	brcc	.+26     	; 0x3496 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    347c:	87 70       	andi	r24, 0x07	; 7
    347e:	fd 2d       	mov	r31, r13
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <action_macro_play+0xb6>
    3482:	ff 0f       	add	r31, r31
    3484:	8a 95       	dec	r24
    3486:	ea f7       	brpl	.-6      	; 0x3482 <action_macro_play+0xb4>
    3488:	8f 2f       	mov	r24, r31
    348a:	0e 94 99 1c 	call	0x3932	; 0x3932 <del_weak_mods>
                    send_keyboard_report();
    348e:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3492:	e8 01       	movw	r28, r16
    3494:	22 c0       	rjmp	.+68     	; 0x34da <action_macro_play+0x10c>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3496:	0e 94 2c 13 	call	0x2658	; 0x2658 <unregister_code>
    349a:	fb cf       	rjmp	.-10     	; 0x3492 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    349c:	cf 01       	movw	r24, r30
    349e:	02 96       	adiw	r24, 0x02	; 2
    34a0:	fe 01       	movw	r30, r28
    34a2:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    34a4:	cc 23       	and	r28, r28
    34a6:	61 f0       	breq	.+24     	; 0x34c0 <action_macro_play+0xf2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34a8:	ef e9       	ldi	r30, 0x9F	; 159
    34aa:	ff e0       	ldi	r31, 0x0F	; 15
    34ac:	31 97       	sbiw	r30, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <action_macro_play+0xde>
    34b0:	00 c0       	rjmp	.+0      	; 0x34b2 <action_macro_play+0xe4>
    34b2:	00 00       	nop
    34b4:	c1 50       	subi	r28, 0x01	; 1
    34b6:	f6 cf       	rjmp	.-20     	; 0x34a4 <action_macro_play+0xd6>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    34b8:	cf 01       	movw	r24, r30
    34ba:	02 96       	adiw	r24, 0x02	; 2
    34bc:	fe 01       	movw	r30, r28
    34be:	f4 90       	lpm	r15, Z
    34c0:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    34c2:	0b c0       	rjmp	.+22     	; 0x34da <action_macro_play+0x10c>
            case MOD_STORE:
                mod_storage = get_mods();
    34c4:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <get_mods>
    34c8:	e8 2e       	mov	r14, r24
                break;
    34ca:	07 c0       	rjmp	.+14     	; 0x34da <action_macro_play+0x10c>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    34cc:	0e 94 90 1c 	call	0x3920	; 0x3920 <clear_mods>
                send_keyboard_report();
    34d0:	0e 94 ba 1c 	call	0x3974	; 0x3974 <send_keyboard_report>
                break;
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <action_macro_play+0x10c>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    34d6:	0e 94 59 12 	call	0x24b2	; 0x24b2 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    34da:	8f 2d       	mov	r24, r15
    34dc:	88 23       	and	r24, r24
    34de:	41 f0       	breq	.+16     	; 0x34f0 <action_macro_play+0x122>
    34e0:	ef e9       	ldi	r30, 0x9F	; 159
    34e2:	ff e0       	ldi	r31, 0x0F	; 15
    34e4:	31 97       	sbiw	r30, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <action_macro_play+0x116>
    34e8:	00 c0       	rjmp	.+0      	; 0x34ea <action_macro_play+0x11c>
    34ea:	00 00       	nop
    34ec:	81 50       	subi	r24, 0x01	; 1
    34ee:	f6 cf       	rjmp	.-20     	; 0x34dc <action_macro_play+0x10e>
    34f0:	fe 01       	movw	r30, r28
    34f2:	7c cf       	rjmp	.-264    	; 0x33ec <action_macro_play+0x1e>
    }
}
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	08 95       	ret

00003504 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3504:	60 93 b6 01 	sts	0x01B6, r22
    3508:	70 93 b7 01 	sts	0x01B7, r23
    350c:	80 93 b8 01 	sts	0x01B8, r24
    3510:	90 93 b9 01 	sts	0x01B9, r25
    hook_default_layer_change(default_layer_state);
    3514:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3518:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <clear_keyboard_but_mods>

0000351c <layer_state_set>:
 * Keymap Layer State
 */
uint32_t layer_state = 0;

static void layer_state_set(uint32_t state)
{
    351c:	cf 92       	push	r12
    351e:	df 92       	push	r13
    3520:	ef 92       	push	r14
    3522:	ff 92       	push	r15
    3524:	6b 01       	movw	r12, r22
    3526:	7c 01       	movw	r14, r24
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    led_layer_set(state);
    3528:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <led_layer_set>
    layer_state = state;
    352c:	c0 92 b2 01 	sts	0x01B2, r12
    3530:	d0 92 b3 01 	sts	0x01B3, r13
    3534:	e0 92 b4 01 	sts	0x01B4, r14
    3538:	f0 92 b5 01 	sts	0x01B5, r15
    hook_layer_change(layer_state);
    353c:	c7 01       	movw	r24, r14
    353e:	b6 01       	movw	r22, r12
    3540:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
}
    3544:	ff 90       	pop	r15
    3546:	ef 90       	pop	r14
    3548:	df 90       	pop	r13
    354a:	cf 90       	pop	r12
    layer_debug(); dprint(" to ");
    led_layer_set(state);
    layer_state = state;
    hook_layer_change(layer_state);
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    354c:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <clear_keyboard_but_mods>

00003550 <default_layer_debug>:
    3550:	08 95       	ret

00003552 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3552:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <default_layer_state_set>

00003556 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    355a:	00 91 b6 01 	lds	r16, 0x01B6
    355e:	10 91 b7 01 	lds	r17, 0x01B7
    3562:	20 91 b8 01 	lds	r18, 0x01B8
    3566:	30 91 b9 01 	lds	r19, 0x01B9
    356a:	60 2b       	or	r22, r16
    356c:	71 2b       	or	r23, r17
    356e:	82 2b       	or	r24, r18
    3570:	93 2b       	or	r25, r19
}
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    3576:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <default_layer_state_set>

0000357a <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    357e:	00 91 b6 01 	lds	r16, 0x01B6
    3582:	10 91 b7 01 	lds	r17, 0x01B7
    3586:	20 91 b8 01 	lds	r18, 0x01B8
    358a:	30 91 b9 01 	lds	r19, 0x01B9
    358e:	60 23       	and	r22, r16
    3590:	71 23       	and	r23, r17
    3592:	82 23       	and	r24, r18
    3594:	93 23       	and	r25, r19
}
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    359a:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <default_layer_state_set>

0000359e <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    35a2:	00 91 b6 01 	lds	r16, 0x01B6
    35a6:	10 91 b7 01 	lds	r17, 0x01B7
    35aa:	20 91 b8 01 	lds	r18, 0x01B8
    35ae:	30 91 b9 01 	lds	r19, 0x01B9
    35b2:	60 27       	eor	r22, r16
    35b4:	71 27       	eor	r23, r17
    35b6:	82 27       	eor	r24, r18
    35b8:	93 27       	eor	r25, r19
}
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    35be:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <default_layer_state_set>

000035c2 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	cb 01       	movw	r24, r22
    35c8:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

000035cc <layer_move>:
}

void layer_move(uint8_t layer)
{
    35cc:	0f 93       	push	r16
    35ce:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    35d0:	41 e0       	ldi	r20, 0x01	; 1
    35d2:	50 e0       	ldi	r21, 0x00	; 0
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	70 e0       	ldi	r23, 0x00	; 0
    35d8:	8a 01       	movw	r16, r20
    35da:	9b 01       	movw	r18, r22
    35dc:	04 c0       	rjmp	.+8      	; 0x35e6 <layer_move+0x1a>
    35de:	00 0f       	add	r16, r16
    35e0:	11 1f       	adc	r17, r17
    35e2:	22 1f       	adc	r18, r18
    35e4:	33 1f       	adc	r19, r19
    35e6:	8a 95       	dec	r24
    35e8:	d2 f7       	brpl	.-12     	; 0x35de <layer_move+0x12>
    35ea:	c9 01       	movw	r24, r18
    35ec:	b8 01       	movw	r22, r16
}
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    35f2:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

000035f6 <layer_on>:
}

void layer_on(uint8_t layer)
{
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    35fa:	41 e0       	ldi	r20, 0x01	; 1
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	04 c0       	rjmp	.+8      	; 0x360c <layer_on+0x16>
    3604:	44 0f       	add	r20, r20
    3606:	55 1f       	adc	r21, r21
    3608:	66 1f       	adc	r22, r22
    360a:	77 1f       	adc	r23, r23
    360c:	8a 95       	dec	r24
    360e:	d2 f7       	brpl	.-12     	; 0x3604 <layer_on+0xe>
    3610:	80 91 b2 01 	lds	r24, 0x01B2
    3614:	90 91 b3 01 	lds	r25, 0x01B3
    3618:	a0 91 b4 01 	lds	r26, 0x01B4
    361c:	b0 91 b5 01 	lds	r27, 0x01B5
    3620:	8a 01       	movw	r16, r20
    3622:	9b 01       	movw	r18, r22
    3624:	08 2b       	or	r16, r24
    3626:	19 2b       	or	r17, r25
    3628:	2a 2b       	or	r18, r26
    362a:	3b 2b       	or	r19, r27
    362c:	c9 01       	movw	r24, r18
    362e:	b8 01       	movw	r22, r16
}
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3634:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

00003638 <layer_off>:
}

void layer_off(uint8_t layer)
{
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    363c:	41 e0       	ldi	r20, 0x01	; 1
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	04 c0       	rjmp	.+8      	; 0x364e <layer_off+0x16>
    3646:	44 0f       	add	r20, r20
    3648:	55 1f       	adc	r21, r21
    364a:	66 1f       	adc	r22, r22
    364c:	77 1f       	adc	r23, r23
    364e:	8a 95       	dec	r24
    3650:	d2 f7       	brpl	.-12     	; 0x3646 <layer_off+0xe>
    3652:	40 95       	com	r20
    3654:	50 95       	com	r21
    3656:	60 95       	com	r22
    3658:	70 95       	com	r23
    365a:	80 91 b2 01 	lds	r24, 0x01B2
    365e:	90 91 b3 01 	lds	r25, 0x01B3
    3662:	a0 91 b4 01 	lds	r26, 0x01B4
    3666:	b0 91 b5 01 	lds	r27, 0x01B5
    366a:	8a 01       	movw	r16, r20
    366c:	9b 01       	movw	r18, r22
    366e:	08 23       	and	r16, r24
    3670:	19 23       	and	r17, r25
    3672:	2a 23       	and	r18, r26
    3674:	3b 23       	and	r19, r27
    3676:	c9 01       	movw	r24, r18
    3678:	b8 01       	movw	r22, r16
}
    367a:	1f 91       	pop	r17
    367c:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    367e:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

00003682 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    3686:	41 e0       	ldi	r20, 0x01	; 1
    3688:	50 e0       	ldi	r21, 0x00	; 0
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	70 e0       	ldi	r23, 0x00	; 0
    368e:	04 c0       	rjmp	.+8      	; 0x3698 <layer_invert+0x16>
    3690:	44 0f       	add	r20, r20
    3692:	55 1f       	adc	r21, r21
    3694:	66 1f       	adc	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	8a 95       	dec	r24
    369a:	d2 f7       	brpl	.-12     	; 0x3690 <layer_invert+0xe>
    369c:	80 91 b2 01 	lds	r24, 0x01B2
    36a0:	90 91 b3 01 	lds	r25, 0x01B3
    36a4:	a0 91 b4 01 	lds	r26, 0x01B4
    36a8:	b0 91 b5 01 	lds	r27, 0x01B5
    36ac:	8a 01       	movw	r16, r20
    36ae:	9b 01       	movw	r18, r22
    36b0:	08 27       	eor	r16, r24
    36b2:	19 27       	eor	r17, r25
    36b4:	2a 27       	eor	r18, r26
    36b6:	3b 27       	eor	r19, r27
    36b8:	c9 01       	movw	r24, r18
    36ba:	b8 01       	movw	r22, r16
}
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    36c0:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

000036c4 <layer_or>:
}

void layer_or(uint32_t state)
{
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    36c8:	00 91 b2 01 	lds	r16, 0x01B2
    36cc:	10 91 b3 01 	lds	r17, 0x01B3
    36d0:	20 91 b4 01 	lds	r18, 0x01B4
    36d4:	30 91 b5 01 	lds	r19, 0x01B5
    36d8:	60 2b       	or	r22, r16
    36da:	71 2b       	or	r23, r17
    36dc:	82 2b       	or	r24, r18
    36de:	93 2b       	or	r25, r19
}
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    36e4:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

000036e8 <layer_and>:
}
void layer_and(uint32_t state)
{
    36e8:	0f 93       	push	r16
    36ea:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    36ec:	00 91 b2 01 	lds	r16, 0x01B2
    36f0:	10 91 b3 01 	lds	r17, 0x01B3
    36f4:	20 91 b4 01 	lds	r18, 0x01B4
    36f8:	30 91 b5 01 	lds	r19, 0x01B5
    36fc:	60 23       	and	r22, r16
    36fe:	71 23       	and	r23, r17
    3700:	82 23       	and	r24, r18
    3702:	93 23       	and	r25, r19
}
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3708:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

0000370c <layer_xor>:
}
void layer_xor(uint32_t state)
{
    370c:	0f 93       	push	r16
    370e:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3710:	00 91 b2 01 	lds	r16, 0x01B2
    3714:	10 91 b3 01 	lds	r17, 0x01B3
    3718:	20 91 b4 01 	lds	r18, 0x01B4
    371c:	30 91 b5 01 	lds	r19, 0x01B5
    3720:	60 27       	eor	r22, r16
    3722:	71 27       	eor	r23, r17
    3724:	82 27       	eor	r24, r18
    3726:	93 27       	eor	r25, r19
}
    3728:	1f 91       	pop	r17
    372a:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    372c:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <layer_state_set>

00003730 <layer_debug>:
}

void layer_debug(void)
{
    3730:	08 95       	ret

00003732 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3732:	cf 92       	push	r12
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3744:	c0 90 b2 01 	lds	r12, 0x01B2
    3748:	d0 90 b3 01 	lds	r13, 0x01B3
    374c:	e0 90 b4 01 	lds	r14, 0x01B4
    3750:	f0 90 b5 01 	lds	r15, 0x01B5
    3754:	80 91 b6 01 	lds	r24, 0x01B6
    3758:	90 91 b7 01 	lds	r25, 0x01B7
    375c:	a0 91 b8 01 	lds	r26, 0x01B8
    3760:	b0 91 b9 01 	lds	r27, 0x01B9
    3764:	c8 2a       	or	r12, r24
    3766:	d9 2a       	or	r13, r25
    3768:	ea 2a       	or	r14, r26
    376a:	fb 2a       	or	r15, r27
    376c:	cf e1       	ldi	r28, 0x1F	; 31
    376e:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3770:	d7 01       	movw	r26, r14
    3772:	c6 01       	movw	r24, r12
    3774:	0c 2e       	mov	r0, r28
    3776:	04 c0       	rjmp	.+8      	; 0x3780 <layer_switch_get_action+0x4e>
    3778:	b6 95       	lsr	r27
    377a:	a7 95       	ror	r26
    377c:	97 95       	ror	r25
    377e:	87 95       	ror	r24
    3780:	0a 94       	dec	r0
    3782:	d2 f7       	brpl	.-12     	; 0x3778 <layer_switch_get_action+0x46>
    3784:	80 ff       	sbrs	r24, 0
    3786:	07 c0       	rjmp	.+14     	; 0x3796 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3788:	b8 01       	movw	r22, r16
    378a:	8c 2f       	mov	r24, r28
    378c:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	91 05       	cpc	r25, r1
    3794:	31 f4       	brne	.+12     	; 0x37a2 <layer_switch_get_action+0x70>
    3796:	21 97       	sbiw	r28, 0x01	; 1
    3798:	58 f7       	brcc	.-42     	; 0x3770 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    379a:	b8 01       	movw	r22, r16
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	ff 90       	pop	r15
    37ac:	ef 90       	pop	r14
    37ae:	df 90       	pop	r13
    37b0:	cf 90       	pop	r12
    37b2:	08 95       	ret

000037b4 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    37b4:	90 91 0b 01 	lds	r25, 0x010B
    37b8:	99 23       	and	r25, r25
    37ba:	79 f1       	breq	.+94     	; 0x381a <add_key+0x66>
    37bc:	90 91 0c 01 	lds	r25, 0x010C
    37c0:	99 23       	and	r25, r25
    37c2:	59 f1       	breq	.+86     	; 0x381a <add_key+0x66>
    37c4:	98 2f       	mov	r25, r24
    37c6:	96 95       	lsr	r25
    37c8:	96 95       	lsr	r25
    37ca:	96 95       	lsr	r25
    37cc:	9f 30       	cpi	r25, 0x0F	; 15
    37ce:	a0 f4       	brcc	.+40     	; 0x37f8 <add_key+0x44>
    37d0:	e0 91 0d 01 	lds	r30, 0x010D
    37d4:	f0 91 0e 01 	lds	r31, 0x010E
    37d8:	e9 0f       	add	r30, r25
    37da:	f1 1d       	adc	r31, r1
    37dc:	87 70       	andi	r24, 0x07	; 7
    37de:	21 e0       	ldi	r18, 0x01	; 1
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	a9 01       	movw	r20, r18
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <add_key+0x36>
    37e6:	44 0f       	add	r20, r20
    37e8:	55 1f       	adc	r21, r21
    37ea:	8a 95       	dec	r24
    37ec:	e2 f7       	brpl	.-8      	; 0x37e6 <add_key+0x32>
    37ee:	ca 01       	movw	r24, r20
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	89 2b       	or	r24, r25
    37f4:	81 83       	std	Z+1, r24	; 0x01
    37f6:	08 95       	ret
    37f8:	90 91 cd 01 	lds	r25, 0x01CD
    37fc:	90 ff       	sbrs	r25, 0
    37fe:	29 c0       	rjmp	.+82     	; 0x3852 <add_key+0x9e>
    3800:	1f 92       	push	r1
    3802:	8f 93       	push	r24
    3804:	88 e8       	ldi	r24, 0x88	; 136
    3806:	94 e0       	ldi	r25, 0x04	; 4
    3808:	9f 93       	push	r25
    380a:	8f 93       	push	r24
    380c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	08 95       	ret
    381a:	20 91 0d 01 	lds	r18, 0x010D
    381e:	30 91 0e 01 	lds	r19, 0x010E
    3822:	f9 01       	movw	r30, r18
    3824:	32 96       	adiw	r30, 0x02	; 2
    3826:	9f ef       	ldi	r25, 0xFF	; 255
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	51 91       	ld	r21, Z+
    382c:	85 17       	cp	r24, r21
    382e:	89 f0       	breq	.+34     	; 0x3852 <add_key+0x9e>
    3830:	9f 3f       	cpi	r25, 0xFF	; 255
    3832:	19 f4       	brne	.+6      	; 0x383a <add_key+0x86>
    3834:	51 11       	cpse	r21, r1
    3836:	01 c0       	rjmp	.+2      	; 0x383a <add_key+0x86>
    3838:	94 2f       	mov	r25, r20
    383a:	4f 5f       	subi	r20, 0xFF	; 255
    383c:	4e 30       	cpi	r20, 0x0E	; 14
    383e:	a9 f7       	brne	.-22     	; 0x382a <add_key+0x76>
    3840:	9f 3f       	cpi	r25, 0xFF	; 255
    3842:	39 f0       	breq	.+14     	; 0x3852 <add_key+0x9e>
    3844:	f9 01       	movw	r30, r18
    3846:	e9 0f       	add	r30, r25
    3848:	f1 1d       	adc	r31, r1
    384a:	97 fd       	sbrc	r25, 7
    384c:	fa 95       	dec	r31
    384e:	82 83       	std	Z+2, r24	; 0x02
    3850:	08 95       	ret
    3852:	08 95       	ret

00003854 <del_key>:
    3854:	90 91 0b 01 	lds	r25, 0x010B
    3858:	99 23       	and	r25, r25
    385a:	81 f1       	breq	.+96     	; 0x38bc <del_key+0x68>
    385c:	90 91 0c 01 	lds	r25, 0x010C
    3860:	99 23       	and	r25, r25
    3862:	61 f1       	breq	.+88     	; 0x38bc <del_key+0x68>
    3864:	98 2f       	mov	r25, r24
    3866:	96 95       	lsr	r25
    3868:	96 95       	lsr	r25
    386a:	96 95       	lsr	r25
    386c:	9f 30       	cpi	r25, 0x0F	; 15
    386e:	a8 f4       	brcc	.+42     	; 0x389a <del_key+0x46>
    3870:	e0 91 0d 01 	lds	r30, 0x010D
    3874:	f0 91 0e 01 	lds	r31, 0x010E
    3878:	e9 0f       	add	r30, r25
    387a:	f1 1d       	adc	r31, r1
    387c:	87 70       	andi	r24, 0x07	; 7
    387e:	21 e0       	ldi	r18, 0x01	; 1
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	a9 01       	movw	r20, r18
    3884:	02 c0       	rjmp	.+4      	; 0x388a <del_key+0x36>
    3886:	44 0f       	add	r20, r20
    3888:	55 1f       	adc	r21, r21
    388a:	8a 95       	dec	r24
    388c:	e2 f7       	brpl	.-8      	; 0x3886 <del_key+0x32>
    388e:	ca 01       	movw	r24, r20
    3890:	80 95       	com	r24
    3892:	91 81       	ldd	r25, Z+1	; 0x01
    3894:	89 23       	and	r24, r25
    3896:	81 83       	std	Z+1, r24	; 0x01
    3898:	08 95       	ret
    389a:	90 91 cd 01 	lds	r25, 0x01CD
    389e:	90 ff       	sbrs	r25, 0
    38a0:	1d c0       	rjmp	.+58     	; 0x38dc <del_key+0x88>
    38a2:	1f 92       	push	r1
    38a4:	8f 93       	push	r24
    38a6:	8a e6       	ldi	r24, 0x6A	; 106
    38a8:	94 e0       	ldi	r25, 0x04	; 4
    38aa:	9f 93       	push	r25
    38ac:	8f 93       	push	r24
    38ae:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	08 95       	ret
    38bc:	20 91 0d 01 	lds	r18, 0x010D
    38c0:	30 91 0e 01 	lds	r19, 0x010E
    38c4:	f9 01       	movw	r30, r18
    38c6:	32 96       	adiw	r30, 0x02	; 2
    38c8:	20 5f       	subi	r18, 0xF0	; 240
    38ca:	3f 4f       	sbci	r19, 0xFF	; 255
    38cc:	90 81       	ld	r25, Z
    38ce:	89 13       	cpse	r24, r25
    38d0:	01 c0       	rjmp	.+2      	; 0x38d4 <del_key+0x80>
    38d2:	10 82       	st	Z, r1
    38d4:	31 96       	adiw	r30, 0x01	; 1
    38d6:	e2 17       	cp	r30, r18
    38d8:	f3 07       	cpc	r31, r19
    38da:	c1 f7       	brne	.-16     	; 0x38cc <del_key+0x78>
    38dc:	08 95       	ret

000038de <clear_keys>:
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	e0 91 0d 01 	lds	r30, 0x010D
    38e6:	f0 91 0e 01 	lds	r31, 0x010E
    38ea:	e8 0f       	add	r30, r24
    38ec:	f9 1f       	adc	r31, r25
    38ee:	10 82       	st	Z, r1
    38f0:	01 96       	adiw	r24, 0x01	; 1
    38f2:	80 31       	cpi	r24, 0x10	; 16
    38f4:	91 05       	cpc	r25, r1
    38f6:	a9 f7       	brne	.-22     	; 0x38e2 <clear_keys+0x4>
    38f8:	08 95       	ret

000038fa <get_mods>:
    38fa:	80 91 cc 01 	lds	r24, 0x01CC
    38fe:	08 95       	ret

00003900 <add_mods>:
    3900:	90 91 cc 01 	lds	r25, 0x01CC
    3904:	89 2b       	or	r24, r25
    3906:	80 93 cc 01 	sts	0x01CC, r24
    390a:	08 95       	ret

0000390c <del_mods>:
    390c:	80 95       	com	r24
    390e:	90 91 cc 01 	lds	r25, 0x01CC
    3912:	89 23       	and	r24, r25
    3914:	80 93 cc 01 	sts	0x01CC, r24
    3918:	08 95       	ret

0000391a <set_mods>:
    391a:	80 93 cc 01 	sts	0x01CC, r24
    391e:	08 95       	ret

00003920 <clear_mods>:
    3920:	10 92 cc 01 	sts	0x01CC, r1
    3924:	08 95       	ret

00003926 <add_weak_mods>:
    3926:	90 91 cb 01 	lds	r25, 0x01CB
    392a:	89 2b       	or	r24, r25
    392c:	80 93 cb 01 	sts	0x01CB, r24
    3930:	08 95       	ret

00003932 <del_weak_mods>:
    3932:	80 95       	com	r24
    3934:	90 91 cb 01 	lds	r25, 0x01CB
    3938:	89 23       	and	r24, r25
    393a:	80 93 cb 01 	sts	0x01CB, r24
    393e:	08 95       	ret

00003940 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3940:	10 92 cb 01 	sts	0x01CB, r1
    3944:	08 95       	ret

00003946 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3946:	80 93 ba 01 	sts	0x01BA, r24
    394a:	08 95       	ret

0000394c <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    394c:	10 92 ba 01 	sts	0x01BA, r1
    3950:	08 95       	ret

00003952 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3952:	80 91 0d 01 	lds	r24, 0x010D
    3956:	90 91 0e 01 	lds	r25, 0x010E
    395a:	fc 01       	movw	r30, r24
    395c:	31 96       	adiw	r30, 0x01	; 1
    395e:	9c 01       	movw	r18, r24
    3960:	20 5f       	subi	r18, 0xF0	; 240
    3962:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3964:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3966:	91 91       	ld	r25, Z+
    3968:	91 11       	cpse	r25, r1
            cnt++;
    396a:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    396c:	e2 17       	cp	r30, r18
    396e:	f3 07       	cpc	r31, r19
    3970:	d1 f7       	brne	.-12     	; 0x3966 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3972:	08 95       	ret

00003974 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3974:	e0 91 0d 01 	lds	r30, 0x010D
    3978:	f0 91 0e 01 	lds	r31, 0x010E
    397c:	80 91 cc 01 	lds	r24, 0x01CC
    3980:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3982:	e0 91 0d 01 	lds	r30, 0x010D
    3986:	f0 91 0e 01 	lds	r31, 0x010E
    398a:	90 81       	ld	r25, Z
    398c:	80 91 cb 01 	lds	r24, 0x01CB
    3990:	89 2b       	or	r24, r25
    3992:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3994:	80 91 ba 01 	lds	r24, 0x01BA
    3998:	88 23       	and	r24, r24
    399a:	61 f0       	breq	.+24     	; 0x39b4 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    399c:	e0 91 0d 01 	lds	r30, 0x010D
    39a0:	f0 91 0e 01 	lds	r31, 0x010E
    39a4:	90 81       	ld	r25, Z
    39a6:	89 2b       	or	r24, r25
    39a8:	80 83       	st	Z, r24
        if (has_anykey()) {
    39aa:	0e 94 a9 1c 	call	0x3952	; 0x3952 <has_anykey>
    39ae:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    39b0:	10 92 ba 01 	sts	0x01BA, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    39b4:	80 91 0d 01 	lds	r24, 0x010D
    39b8:	90 91 0e 01 	lds	r25, 0x010E
    39bc:	0c 94 be 10 	jmp	0x217c	; 0x217c <host_keyboard_send>

000039c0 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    39c0:	90 93 39 01 	sts	0x0139, r25
    39c4:	80 93 38 01 	sts	0x0138, r24
    39c8:	08 95       	ret

000039ca <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    39ca:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    39cc:	98 2f       	mov	r25, r24
    39ce:	93 73       	andi	r25, 0x33	; 51
    39d0:	44 e0       	ldi	r20, 0x04	; 4
    39d2:	94 9f       	mul	r25, r20
    39d4:	90 01       	movw	r18, r0
    39d6:	11 24       	eor	r1, r1
    39d8:	8c 7c       	andi	r24, 0xCC	; 204
    39da:	86 95       	lsr	r24
    39dc:	86 95       	lsr	r24
    39de:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    39e0:	82 2f       	mov	r24, r18
    39e2:	85 75       	andi	r24, 0x55	; 85
    39e4:	88 0f       	add	r24, r24
    39e6:	2a 7a       	andi	r18, 0xAA	; 170
    39e8:	26 95       	lsr	r18
    return bits;
}
    39ea:	82 2b       	or	r24, r18
    39ec:	08 95       	ret

000039ee <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	1f 92       	push	r1
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    39fa:	99 83       	std	Y+1, r25	; 0x01
    39fc:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <bitrev>
    3a00:	18 2f       	mov	r17, r24
    3a02:	99 81       	ldd	r25, Y+1	; 0x01
    3a04:	89 2f       	mov	r24, r25
    3a06:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <bitrev>
    return bits;
    3a0a:	21 2f       	mov	r18, r17
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	32 2f       	mov	r19, r18
    3a10:	22 27       	eor	r18, r18
}
    3a12:	a9 01       	movw	r20, r18
    3a14:	48 2b       	or	r20, r24
    3a16:	ca 01       	movw	r24, r20
    3a18:	0f 90       	pop	r0
    3a1a:	df 91       	pop	r29
    3a1c:	cf 91       	pop	r28
    3a1e:	1f 91       	pop	r17
    3a20:	08 95       	ret

00003a22 <hook_keyboard_loop>:
    3a22:	08 95       	ret

00003a24 <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3a24:	cf 93       	push	r28
    3a26:	df 93       	push	r29
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <hook_matrix_change+0x6>
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <hook_matrix_change+0x8>
    3a2c:	1f 92       	push	r1
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	df 91       	pop	r29
    3a3e:	cf 91       	pop	r28
    3a40:	08 95       	ret

00003a42 <hook_default_layer_change>:
    3a42:	08 95       	ret

00003a44 <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3a44:	08 95       	ret

00003a46 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3a46:	0c 94 17 12 	jmp	0x242e	; 0x242e <keyboard_set_leds>

00003a4a <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3a4a:	08 95       	ret

00003a4c <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3a4c:	80 91 e2 01 	lds	r24, 0x01E2
    3a50:	84 30       	cpi	r24, 0x04	; 4
    3a52:	21 f1       	breq	.+72     	; 0x3a9c <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3a54:	10 92 ce 01 	sts	0x01CE, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3a58:	20 e4       	ldi	r18, 0x40	; 64
    3a5a:	88 e1       	ldi	r24, 0x18	; 24
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	a8 95       	wdr
    3a64:	80 93 60 00 	sts	0x0060, r24
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3a6e:	83 b7       	in	r24, 0x33	; 51
    3a70:	81 7f       	andi	r24, 0xF1	; 241
    3a72:	84 60       	ori	r24, 0x04	; 4
    3a74:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a76:	83 b7       	in	r24, 0x33	; 51
    3a78:	81 60       	ori	r24, 0x01	; 1
    3a7a:	83 bf       	out	0x33, r24	; 51
    sei();
    3a7c:	78 94       	sei
    sleep_cpu();
    3a7e:	88 95       	sleep
    sleep_disable();
    3a80:	83 b7       	in	r24, 0x33	; 51
    3a82:	8e 7f       	andi	r24, 0xFE	; 254
    3a84:	83 bf       	out	0x33, r24	; 51
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	a8 95       	wdr
    3a8c:	80 91 60 00 	lds	r24, 0x0060
    3a90:	88 61       	ori	r24, 0x18	; 24
    3a92:	80 93 60 00 	sts	0x0060, r24
    3a96:	10 92 60 00 	sts	0x0060, r1
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	08 95       	ret

00003a9e <matrix_power_down>:
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    3a9e:	08 95       	ret

00003aa0 <matrix_power_up>:
    3aa0:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <matrix_power_down>

00003aa4 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3aa4:	cf 93       	push	r28
    matrix_power_up();
    3aa6:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <matrix_power_up>
    matrix_scan();
    3aaa:	0e 94 60 07 	call	0xec0	; 0xec0 <matrix_scan>
    matrix_power_down();
    3aae:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ab2:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3ab4:	8c 2f       	mov	r24, r28
    3ab6:	0e 94 99 08 	call	0x1132	; 0x1132 <matrix_get_row>
    3aba:	89 2b       	or	r24, r25
    3abc:	29 f4       	brne	.+10     	; 0x3ac8 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3abe:	cf 5f       	subi	r28, 0xFF	; 255
    3ac0:	c6 30       	cpi	r28, 0x06	; 6
    3ac2:	c1 f7       	brne	.-16     	; 0x3ab4 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	01 c0       	rjmp	.+2      	; 0x3aca <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3aca:	cf 91       	pop	r28
    3acc:	08 95       	ret

00003ace <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3ace:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <clear_keyboard>

00003ad2 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3ad2:	1f 92       	push	r1
    3ad4:	0f 92       	push	r0
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	0f 92       	push	r0
    3ada:	11 24       	eor	r1, r1
    3adc:	8f 93       	push	r24
    3ade:	9f 93       	push	r25
    3ae0:	af 93       	push	r26
    3ae2:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3ae4:	80 91 ce 01 	lds	r24, 0x01CE
    3ae8:	81 11       	cpse	r24, r1
    3aea:	13 c0       	rjmp	.+38     	; 0x3b12 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3aec:	80 91 cf 01 	lds	r24, 0x01CF
    3af0:	90 91 d0 01 	lds	r25, 0x01D0
    3af4:	a0 91 d1 01 	lds	r26, 0x01D1
    3af8:	b0 91 d2 01 	lds	r27, 0x01D2
    3afc:	41 96       	adiw	r24, 0x11	; 17
    3afe:	a1 1d       	adc	r26, r1
    3b00:	b1 1d       	adc	r27, r1
    3b02:	80 93 cf 01 	sts	0x01CF, r24
    3b06:	90 93 d0 01 	sts	0x01D0, r25
    3b0a:	a0 93 d1 01 	sts	0x01D1, r26
    3b0e:	b0 93 d2 01 	sts	0x01D2, r27
            break;
        default:
            ;
    }
}
    3b12:	bf 91       	pop	r27
    3b14:	af 91       	pop	r26
    3b16:	9f 91       	pop	r25
    3b18:	8f 91       	pop	r24
    3b1a:	0f 90       	pop	r0
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	0f 90       	pop	r0
    3b20:	1f 90       	pop	r1
    3b22:	18 95       	reti

00003b24 <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    3b24:	82 e0       	ldi	r24, 0x02	; 2
    3b26:	84 bd       	out	0x24, r24	; 36
    3b28:	93 e0       	ldi	r25, 0x03	; 3
    3b2a:	95 bd       	out	0x25, r25	; 37
    3b2c:	9a ef       	ldi	r25, 0xFA	; 250
    3b2e:	97 bd       	out	0x27, r25	; 39
    3b30:	80 93 6e 00 	sts	0x006E, r24
    3b34:	08 95       	ret

00003b36 <timer_read>:
    3b36:	2f b7       	in	r18, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	80 91 cf 01 	lds	r24, 0x01CF
    3b3e:	90 91 d0 01 	lds	r25, 0x01D0
    3b42:	a0 91 d1 01 	lds	r26, 0x01D1
    3b46:	b0 91 d2 01 	lds	r27, 0x01D2
    3b4a:	2f bf       	out	0x3f, r18	; 63
    3b4c:	08 95       	ret

00003b4e <timer_read32>:
    3b4e:	2f b7       	in	r18, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	60 91 cf 01 	lds	r22, 0x01CF
    3b56:	70 91 d0 01 	lds	r23, 0x01D0
    3b5a:	80 91 d1 01 	lds	r24, 0x01D1
    3b5e:	90 91 d2 01 	lds	r25, 0x01D2
    3b62:	2f bf       	out	0x3f, r18	; 63
    3b64:	08 95       	ret

00003b66 <timer_elapsed>:
    3b66:	cf 92       	push	r12
    3b68:	df 92       	push	r13
    3b6a:	ef 92       	push	r14
    3b6c:	ff 92       	push	r15
    3b6e:	0f 93       	push	r16
    3b70:	1f 93       	push	r17
    3b72:	2f b7       	in	r18, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	40 91 cf 01 	lds	r20, 0x01CF
    3b7a:	50 91 d0 01 	lds	r21, 0x01D0
    3b7e:	60 91 d1 01 	lds	r22, 0x01D1
    3b82:	70 91 d2 01 	lds	r23, 0x01D2
    3b86:	2f bf       	out	0x3f, r18	; 63
    3b88:	6a 01       	movw	r12, r20
    3b8a:	7b 01       	movw	r14, r22
    3b8c:	ee 24       	eor	r14, r14
    3b8e:	ff 24       	eor	r15, r15
    3b90:	8c 01       	movw	r16, r24
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	c0 16       	cp	r12, r16
    3b98:	d1 06       	cpc	r13, r17
    3b9a:	e2 06       	cpc	r14, r18
    3b9c:	f3 06       	cpc	r15, r19
    3b9e:	10 f4       	brcc	.+4      	; 0x3ba4 <timer_elapsed+0x3e>
    3ba0:	41 50       	subi	r20, 0x01	; 1
    3ba2:	51 09       	sbc	r21, r1
    3ba4:	9a 01       	movw	r18, r20
    3ba6:	28 1b       	sub	r18, r24
    3ba8:	39 0b       	sbc	r19, r25
    3baa:	c9 01       	movw	r24, r18
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	ef 90       	pop	r14
    3bb4:	df 90       	pop	r13
    3bb6:	cf 90       	pop	r12
    3bb8:	08 95       	ret

00003bba <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3bba:	1f 92       	push	r1
    3bbc:	0f 92       	push	r0
    3bbe:	0f b6       	in	r0, 0x3f	; 63
    3bc0:	0f 92       	push	r0
    3bc2:	11 24       	eor	r1, r1
    3bc4:	8f 93       	push	r24
    3bc6:	9f 93       	push	r25
    3bc8:	af 93       	push	r26
    3bca:	bf 93       	push	r27
    timer_count++;
    3bcc:	80 91 cf 01 	lds	r24, 0x01CF
    3bd0:	90 91 d0 01 	lds	r25, 0x01D0
    3bd4:	a0 91 d1 01 	lds	r26, 0x01D1
    3bd8:	b0 91 d2 01 	lds	r27, 0x01D2
    3bdc:	01 96       	adiw	r24, 0x01	; 1
    3bde:	a1 1d       	adc	r26, r1
    3be0:	b1 1d       	adc	r27, r1
    3be2:	80 93 cf 01 	sts	0x01CF, r24
    3be6:	90 93 d0 01 	sts	0x01D0, r25
    3bea:	a0 93 d1 01 	sts	0x01D1, r26
    3bee:	b0 93 d2 01 	sts	0x01D2, r27
}
    3bf2:	bf 91       	pop	r27
    3bf4:	af 91       	pop	r26
    3bf6:	9f 91       	pop	r25
    3bf8:	8f 91       	pop	r24
    3bfa:	0f 90       	pop	r0
    3bfc:	0f be       	out	0x3f, r0	; 63
    3bfe:	0f 90       	pop	r0
    3c00:	1f 90       	pop	r1
    3c02:	18 95       	reti

00003c04 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3c04:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <USB_Disable>
    cli();
    3c08:	f8 94       	cli
    3c0a:	2f ef       	ldi	r18, 0xFF	; 255
    3c0c:	87 ea       	ldi	r24, 0xA7	; 167
    3c0e:	91 e6       	ldi	r25, 0x61	; 97
    3c10:	21 50       	subi	r18, 0x01	; 1
    3c12:	80 40       	sbci	r24, 0x00	; 0
    3c14:	90 40       	sbci	r25, 0x00	; 0
    3c16:	e1 f7       	brne	.-8      	; 0x3c10 <bootloader_jump+0xc>
    3c18:	00 c0       	rjmp	.+0      	; 0x3c1a <bootloader_jump+0x16>
    3c1a:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3c1c:	87 e0       	ldi	r24, 0x07	; 7
    3c1e:	90 eb       	ldi	r25, 0xB0	; 176
    3c20:	dc 01       	movw	r26, r24
    3c22:	80 93 ec 01 	sts	0x01EC, r24
    3c26:	90 93 ed 01 	sts	0x01ED, r25
    3c2a:	a0 93 ee 01 	sts	0x01EE, r26
    3c2e:	b0 93 ef 01 	sts	0x01EF, r27
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3c32:	9c e0       	ldi	r25, 0x0C	; 12
    3c34:	88 e1       	ldi	r24, 0x18	; 24
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	a8 95       	wdr
    3c3c:	80 93 60 00 	sts	0x0060, r24
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	90 93 60 00 	sts	0x0060, r25
    3c46:	ff cf       	rjmp	.-2      	; 0x3c46 <bootloader_jump+0x42>

00003c48 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c48:	8d 3b       	cpi	r24, 0xBD	; 189
    3c4a:	50 f4       	brcc	.+20     	; 0x3c60 <keycode_to_action+0x18>
    3c4c:	88 3a       	cpi	r24, 0xA8	; 168
    3c4e:	70 f5       	brcc	.+92     	; 0x3cac <keycode_to_action+0x64>
    3c50:	85 3a       	cpi	r24, 0xA5	; 165
    3c52:	18 f5       	brcc	.+70     	; 0x3c9a <keycode_to_action+0x52>
    3c54:	84 30       	cpi	r24, 0x04	; 4
    3c56:	f8 f4       	brcc	.+62     	; 0x3c96 <keycode_to_action+0x4e>
    3c58:	81 30       	cpi	r24, 0x01	; 1
    3c5a:	09 f4       	brne	.+2      	; 0x3c5e <keycode_to_action+0x16>
    3c5c:	6c c0       	rjmp	.+216    	; 0x3d36 <keycode_to_action+0xee>
    3c5e:	68 c0       	rjmp	.+208    	; 0x3d30 <keycode_to_action+0xe8>
    3c60:	88 3e       	cpi	r24, 0xE8	; 232
    3c62:	98 f4       	brcc	.+38     	; 0x3c8a <keycode_to_action+0x42>
    3c64:	80 3e       	cpi	r24, 0xE0	; 224
    3c66:	b8 f4       	brcc	.+46     	; 0x3c96 <keycode_to_action+0x4e>
    3c68:	8f 3b       	cpi	r24, 0xBF	; 191
    3c6a:	09 f0       	breq	.+2      	; 0x3c6e <keycode_to_action+0x26>
    3c6c:	61 c0       	rjmp	.+194    	; 0x3d30 <keycode_to_action+0xe8>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3c6e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <clear_keyboard>
    3c72:	2f ef       	ldi	r18, 0xFF	; 255
    3c74:	80 e7       	ldi	r24, 0x70	; 112
    3c76:	92 e0       	ldi	r25, 0x02	; 2
    3c78:	21 50       	subi	r18, 0x01	; 1
    3c7a:	80 40       	sbci	r24, 0x00	; 0
    3c7c:	90 40       	sbci	r25, 0x00	; 0
    3c7e:	e1 f7       	brne	.-8      	; 0x3c78 <keycode_to_action+0x30>
    3c80:	00 c0       	rjmp	.+0      	; 0x3c82 <keycode_to_action+0x3a>
    3c82:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3c84:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <bootloader_jump>
    3c88:	53 c0       	rjmp	.+166    	; 0x3d30 <keycode_to_action+0xe8>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3c8a:	80 3f       	cpi	r24, 0xF0	; 240
    3c8c:	08 f4       	brcc	.+2      	; 0x3c90 <keycode_to_action+0x48>
    3c8e:	50 c0       	rjmp	.+160    	; 0x3d30 <keycode_to_action+0xe8>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	90 65       	ori	r25, 0x50	; 80
            break;
    3c94:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c96:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c98:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c9a:	85 3a       	cpi	r24, 0xA5	; 165
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <keycode_to_action+0x58>
    3c9e:	4e c0       	rjmp	.+156    	; 0x3d3c <keycode_to_action+0xf4>
    3ca0:	86 3a       	cpi	r24, 0xA6	; 166
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <keycode_to_action+0x5e>
    3ca4:	4e c0       	rjmp	.+156    	; 0x3d42 <keycode_to_action+0xfa>
    3ca6:	83 e8       	ldi	r24, 0x83	; 131
    3ca8:	90 e4       	ldi	r25, 0x40	; 64
    3caa:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3cac:	88 3a       	cpi	r24, 0xA8	; 168
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <keycode_to_action+0x6a>
    3cb0:	4b c0       	rjmp	.+150    	; 0x3d48 <keycode_to_action+0x100>
    3cb2:	89 3a       	cpi	r24, 0xA9	; 169
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <keycode_to_action+0x70>
    3cb6:	4b c0       	rjmp	.+150    	; 0x3d4e <keycode_to_action+0x106>
    3cb8:	8a 3a       	cpi	r24, 0xAA	; 170
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <keycode_to_action+0x76>
    3cbc:	4b c0       	rjmp	.+150    	; 0x3d54 <keycode_to_action+0x10c>
    3cbe:	8b 3a       	cpi	r24, 0xAB	; 171
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <keycode_to_action+0x7c>
    3cc2:	4b c0       	rjmp	.+150    	; 0x3d5a <keycode_to_action+0x112>
    3cc4:	8c 3a       	cpi	r24, 0xAC	; 172
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <keycode_to_action+0x82>
    3cc8:	4b c0       	rjmp	.+150    	; 0x3d60 <keycode_to_action+0x118>
    3cca:	8d 3a       	cpi	r24, 0xAD	; 173
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <keycode_to_action+0x88>
    3cce:	4b c0       	rjmp	.+150    	; 0x3d66 <keycode_to_action+0x11e>
    3cd0:	8e 3a       	cpi	r24, 0xAE	; 174
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <keycode_to_action+0x8e>
    3cd4:	4b c0       	rjmp	.+150    	; 0x3d6c <keycode_to_action+0x124>
    3cd6:	8f 3a       	cpi	r24, 0xAF	; 175
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <keycode_to_action+0x94>
    3cda:	4b c0       	rjmp	.+150    	; 0x3d72 <keycode_to_action+0x12a>
    3cdc:	81 3b       	cpi	r24, 0xB1	; 177
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <keycode_to_action+0x9a>
    3ce0:	4b c0       	rjmp	.+150    	; 0x3d78 <keycode_to_action+0x130>
    3ce2:	80 3b       	cpi	r24, 0xB0	; 176
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <keycode_to_action+0xa0>
    3ce6:	4b c0       	rjmp	.+150    	; 0x3d7e <keycode_to_action+0x136>
    3ce8:	82 3b       	cpi	r24, 0xB2	; 178
    3cea:	09 f4       	brne	.+2      	; 0x3cee <keycode_to_action+0xa6>
    3cec:	4b c0       	rjmp	.+150    	; 0x3d84 <keycode_to_action+0x13c>
    3cee:	83 3b       	cpi	r24, 0xB3	; 179
    3cf0:	09 f4       	brne	.+2      	; 0x3cf4 <keycode_to_action+0xac>
    3cf2:	4b c0       	rjmp	.+150    	; 0x3d8a <keycode_to_action+0x142>
    3cf4:	84 3b       	cpi	r24, 0xB4	; 180
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <keycode_to_action+0xb2>
    3cf8:	4b c0       	rjmp	.+150    	; 0x3d90 <keycode_to_action+0x148>
    3cfa:	85 3b       	cpi	r24, 0xB5	; 181
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <keycode_to_action+0xb8>
    3cfe:	4b c0       	rjmp	.+150    	; 0x3d96 <keycode_to_action+0x14e>
    3d00:	86 3b       	cpi	r24, 0xB6	; 182
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <keycode_to_action+0xbe>
    3d04:	4b c0       	rjmp	.+150    	; 0x3d9c <keycode_to_action+0x154>
    3d06:	87 3b       	cpi	r24, 0xB7	; 183
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <keycode_to_action+0xc4>
    3d0a:	4b c0       	rjmp	.+150    	; 0x3da2 <keycode_to_action+0x15a>
    3d0c:	88 3b       	cpi	r24, 0xB8	; 184
    3d0e:	09 f4       	brne	.+2      	; 0x3d12 <keycode_to_action+0xca>
    3d10:	4b c0       	rjmp	.+150    	; 0x3da8 <keycode_to_action+0x160>
    3d12:	89 3b       	cpi	r24, 0xB9	; 185
    3d14:	09 f4       	brne	.+2      	; 0x3d18 <keycode_to_action+0xd0>
    3d16:	4b c0       	rjmp	.+150    	; 0x3dae <keycode_to_action+0x166>
    3d18:	8a 3b       	cpi	r24, 0xBA	; 186
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <keycode_to_action+0xd6>
    3d1c:	4b c0       	rjmp	.+150    	; 0x3db4 <keycode_to_action+0x16c>
    3d1e:	8b 3b       	cpi	r24, 0xBB	; 187
    3d20:	09 f4       	brne	.+2      	; 0x3d24 <keycode_to_action+0xdc>
    3d22:	4b c0       	rjmp	.+150    	; 0x3dba <keycode_to_action+0x172>
    3d24:	8c 3b       	cpi	r24, 0xBC	; 188
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <keycode_to_action+0xe2>
    3d28:	4b c0       	rjmp	.+150    	; 0x3dc0 <keycode_to_action+0x178>
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	94 e4       	ldi	r25, 0x44	; 68
    3d2e:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
    3d34:	08 95       	ret
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3d3c:	81 e8       	ldi	r24, 0x81	; 129
    3d3e:	90 e4       	ldi	r25, 0x40	; 64
    3d40:	08 95       	ret
    3d42:	82 e8       	ldi	r24, 0x82	; 130
    3d44:	90 e4       	ldi	r25, 0x40	; 64
    3d46:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3d48:	82 ee       	ldi	r24, 0xE2	; 226
    3d4a:	94 e4       	ldi	r25, 0x44	; 68
    3d4c:	08 95       	ret
    3d4e:	89 ee       	ldi	r24, 0xE9	; 233
    3d50:	94 e4       	ldi	r25, 0x44	; 68
    3d52:	08 95       	ret
    3d54:	8a ee       	ldi	r24, 0xEA	; 234
    3d56:	94 e4       	ldi	r25, 0x44	; 68
    3d58:	08 95       	ret
    3d5a:	85 eb       	ldi	r24, 0xB5	; 181
    3d5c:	94 e4       	ldi	r25, 0x44	; 68
    3d5e:	08 95       	ret
    3d60:	86 eb       	ldi	r24, 0xB6	; 182
    3d62:	94 e4       	ldi	r25, 0x44	; 68
    3d64:	08 95       	ret
    3d66:	83 eb       	ldi	r24, 0xB3	; 179
    3d68:	94 e4       	ldi	r25, 0x44	; 68
    3d6a:	08 95       	ret
    3d6c:	84 eb       	ldi	r24, 0xB4	; 180
    3d6e:	94 e4       	ldi	r25, 0x44	; 68
    3d70:	08 95       	ret
    3d72:	87 eb       	ldi	r24, 0xB7	; 183
    3d74:	94 e4       	ldi	r25, 0x44	; 68
    3d76:	08 95       	ret
    3d78:	8c ec       	ldi	r24, 0xCC	; 204
    3d7a:	94 e4       	ldi	r25, 0x44	; 68
    3d7c:	08 95       	ret
    3d7e:	8d ec       	ldi	r24, 0xCD	; 205
    3d80:	94 e4       	ldi	r25, 0x44	; 68
    3d82:	08 95       	ret
    3d84:	83 e8       	ldi	r24, 0x83	; 131
    3d86:	95 e4       	ldi	r25, 0x45	; 69
    3d88:	08 95       	ret
    3d8a:	8a e8       	ldi	r24, 0x8A	; 138
    3d8c:	95 e4       	ldi	r25, 0x45	; 69
    3d8e:	08 95       	ret
    3d90:	82 e9       	ldi	r24, 0x92	; 146
    3d92:	95 e4       	ldi	r25, 0x45	; 69
    3d94:	08 95       	ret
    3d96:	84 e9       	ldi	r24, 0x94	; 148
    3d98:	95 e4       	ldi	r25, 0x45	; 69
    3d9a:	08 95       	ret
    3d9c:	81 e2       	ldi	r24, 0x21	; 33
    3d9e:	96 e4       	ldi	r25, 0x46	; 70
    3da0:	08 95       	ret
    3da2:	83 e2       	ldi	r24, 0x23	; 35
    3da4:	96 e4       	ldi	r25, 0x46	; 70
    3da6:	08 95       	ret
    3da8:	84 e2       	ldi	r24, 0x24	; 36
    3daa:	96 e4       	ldi	r25, 0x46	; 70
    3dac:	08 95       	ret
    3dae:	85 e2       	ldi	r24, 0x25	; 37
    3db0:	96 e4       	ldi	r25, 0x46	; 70
    3db2:	08 95       	ret
    3db4:	86 e2       	ldi	r24, 0x26	; 38
    3db6:	96 e4       	ldi	r25, 0x46	; 70
    3db8:	08 95       	ret
    3dba:	87 e2       	ldi	r24, 0x27	; 39
    3dbc:	96 e4       	ldi	r25, 0x46	; 70
    3dbe:	08 95       	ret
    3dc0:	8a e2       	ldi	r24, 0x2A	; 42
    3dc2:	96 e4       	ldi	r25, 0x46	; 70
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3dc4:	08 95       	ret

00003dc6 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3dc6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <keymap_key_to_keycode>
    switch (keycode) {
    3dca:	80 3e       	cpi	r24, 0xE0	; 224
    3dcc:	a8 f4       	brcc	.+42     	; 0x3df8 <action_for_key+0x32>
    3dce:	80 3c       	cpi	r24, 0xC0	; 192
    3dd0:	00 f5       	brcc	.+64     	; 0x3e12 <action_for_key+0x4c>
    3dd2:	81 33       	cpi	r24, 0x31	; 49
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <action_for_key+0x12>
    3dd6:	5c c0       	rjmp	.+184    	; 0x3e90 <action_for_key+0xca>
    3dd8:	38 f4       	brcc	.+14     	; 0x3de8 <action_for_key+0x22>
    3dda:	89 32       	cpi	r24, 0x29	; 41
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <action_for_key+0x1a>
    3dde:	52 c0       	rjmp	.+164    	; 0x3e84 <action_for_key+0xbe>
    3de0:	8a 32       	cpi	r24, 0x2A	; 42
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <action_for_key+0x20>
    3de4:	5b c0       	rjmp	.+182    	; 0x3e9c <action_for_key+0xd6>
    3de6:	5f c0       	rjmp	.+190    	; 0x3ea6 <action_for_key+0xe0>
    3de8:	89 33       	cpi	r24, 0x39	; 57
    3dea:	b1 f0       	breq	.+44     	; 0x3e18 <action_for_key+0x52>
    3dec:	82 38       	cpi	r24, 0x82	; 130
    3dee:	a1 f0       	breq	.+40     	; 0x3e18 <action_for_key+0x52>
    3df0:	85 33       	cpi	r24, 0x35	; 53
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <action_for_key+0x30>
    3df4:	41 c0       	rjmp	.+130    	; 0x3e78 <action_for_key+0xb2>
    3df6:	57 c0       	rjmp	.+174    	; 0x3ea6 <action_for_key+0xe0>
    3df8:	83 3e       	cpi	r24, 0xE3	; 227
    3dfa:	41 f1       	breq	.+80     	; 0x3e4c <action_for_key+0x86>
    3dfc:	28 f4       	brcc	.+10     	; 0x3e08 <action_for_key+0x42>
    3dfe:	80 3e       	cpi	r24, 0xE0	; 224
    3e00:	99 f0       	breq	.+38     	; 0x3e28 <action_for_key+0x62>
    3e02:	82 3e       	cpi	r24, 0xE2	; 226
    3e04:	b9 f0       	breq	.+46     	; 0x3e34 <action_for_key+0x6e>
    3e06:	4f c0       	rjmp	.+158    	; 0x3ea6 <action_for_key+0xe0>
    3e08:	86 3e       	cpi	r24, 0xE6	; 230
    3e0a:	31 f1       	breq	.+76     	; 0x3e58 <action_for_key+0x92>
    3e0c:	87 3e       	cpi	r24, 0xE7	; 231
    3e0e:	71 f1       	breq	.+92     	; 0x3e6c <action_for_key+0xa6>
    3e10:	4a c0       	rjmp	.+148    	; 0x3ea6 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3e12:	0e 94 2f 07 	call	0xe5e	; 0xe5e <keymap_fn_to_action>
    3e16:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3e18:	90 91 eb 01 	lds	r25, 0x01EB
    3e1c:	90 fd       	sbrc	r25, 0
    3e1e:	02 c0       	rjmp	.+4      	; 0x3e24 <action_for_key+0x5e>
    3e20:	91 ff       	sbrs	r25, 1
    3e22:	41 c0       	rjmp	.+130    	; 0x3ea6 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3e24:	80 ee       	ldi	r24, 0xE0	; 224
    3e26:	3f c0       	rjmp	.+126    	; 0x3ea6 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3e28:	80 91 eb 01 	lds	r24, 0x01EB
    3e2c:	80 ff       	sbrs	r24, 0
    3e2e:	fa cf       	rjmp	.-12     	; 0x3e24 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3e30:	89 e3       	ldi	r24, 0x39	; 57
    3e32:	39 c0       	rjmp	.+114    	; 0x3ea6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3e34:	80 91 eb 01 	lds	r24, 0x01EB
    3e38:	82 ff       	sbrs	r24, 2
    3e3a:	0c c0       	rjmp	.+24     	; 0x3e54 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3e3c:	80 91 eb 01 	lds	r24, 0x01EB
    3e40:	84 ff       	sbrs	r24, 4
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	2f c0       	rjmp	.+94     	; 0x3ea6 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3e48:	83 ee       	ldi	r24, 0xE3	; 227
    3e4a:	2d c0       	rjmp	.+90     	; 0x3ea6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3e4c:	80 91 eb 01 	lds	r24, 0x01EB
    3e50:	82 ff       	sbrs	r24, 2
    3e52:	f4 cf       	rjmp	.-24     	; 0x3e3c <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3e54:	82 ee       	ldi	r24, 0xE2	; 226
    3e56:	27 c0       	rjmp	.+78     	; 0x3ea6 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3e58:	80 91 eb 01 	lds	r24, 0x01EB
    3e5c:	83 ff       	sbrs	r24, 3
    3e5e:	0a c0       	rjmp	.+20     	; 0x3e74 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3e60:	80 91 eb 01 	lds	r24, 0x01EB
    3e64:	84 fd       	sbrc	r24, 4
    3e66:	ee cf       	rjmp	.-36     	; 0x3e44 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3e68:	87 ee       	ldi	r24, 0xE7	; 231
    3e6a:	1d c0       	rjmp	.+58     	; 0x3ea6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3e6c:	80 91 eb 01 	lds	r24, 0x01EB
    3e70:	83 ff       	sbrs	r24, 3
    3e72:	f6 cf       	rjmp	.-20     	; 0x3e60 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3e74:	86 ee       	ldi	r24, 0xE6	; 230
    3e76:	17 c0       	rjmp	.+46     	; 0x3ea6 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3e78:	80 91 eb 01 	lds	r24, 0x01EB
    3e7c:	85 ff       	sbrs	r24, 5
    3e7e:	06 c0       	rjmp	.+12     	; 0x3e8c <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3e80:	89 e2       	ldi	r24, 0x29	; 41
    3e82:	11 c0       	rjmp	.+34     	; 0x3ea6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e84:	80 91 eb 01 	lds	r24, 0x01EB
    3e88:	85 ff       	sbrs	r24, 5
    3e8a:	fa cf       	rjmp	.-12     	; 0x3e80 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3e8c:	85 e3       	ldi	r24, 0x35	; 53
    3e8e:	0b c0       	rjmp	.+22     	; 0x3ea6 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e90:	80 91 eb 01 	lds	r24, 0x01EB
    3e94:	86 ff       	sbrs	r24, 6
    3e96:	06 c0       	rjmp	.+12     	; 0x3ea4 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3e98:	8a e2       	ldi	r24, 0x2A	; 42
    3e9a:	05 c0       	rjmp	.+10     	; 0x3ea6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e9c:	80 91 eb 01 	lds	r24, 0x01EB
    3ea0:	86 ff       	sbrs	r24, 6
    3ea2:	fa cf       	rjmp	.-12     	; 0x3e98 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3ea4:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3ea6:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <keycode_to_action>
    }
}
    3eaa:	08 95       	ret

00003eac <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	08 95       	ret

00003eb2 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3eb2:	08 95       	ret

00003eb4 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3eb4:	af 92       	push	r10
    3eb6:	bf 92       	push	r11
    3eb8:	cf 92       	push	r12
    3eba:	df 92       	push	r13
    3ebc:	ef 92       	push	r14
    3ebe:	ff 92       	push	r15
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
    3ec4:	cf 93       	push	r28
    3ec6:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ec8:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3eca:	cc 24       	eor	r12, r12
    3ecc:	c3 94       	inc	r12
    3ece:	d1 2c       	mov	r13, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3ed0:	8c 2f       	mov	r24, r28
    3ed2:	0e 94 99 08 	call	0x1132	; 0x1132 <matrix_get_row>
    3ed6:	5c 01       	movw	r10, r24
    3ed8:	00 e0       	ldi	r16, 0x00	; 0
    3eda:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3edc:	c6 01       	movw	r24, r12
    3ede:	00 2e       	mov	r0, r16
    3ee0:	02 c0       	rjmp	.+4      	; 0x3ee6 <scan_key+0x32>
    3ee2:	88 0f       	add	r24, r24
    3ee4:	99 1f       	adc	r25, r25
    3ee6:	0a 94       	dec	r0
    3ee8:	e2 f7       	brpl	.-8      	; 0x3ee2 <scan_key+0x2e>
    3eea:	8a 21       	and	r24, r10
    3eec:	9b 21       	and	r25, r11
    3eee:	89 2b       	or	r24, r25
    3ef0:	a9 f0       	breq	.+42     	; 0x3f1c <scan_key+0x68>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3ef2:	60 2f       	mov	r22, r16
    3ef4:	7c 2f       	mov	r23, r28
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <action_for_key>
                if (action.code == code ||
    3efc:	8e 15       	cp	r24, r14
    3efe:	9f 05       	cpc	r25, r15
    3f00:	59 f0       	breq	.+22     	; 0x3f18 <scan_key+0x64>
    3f02:	29 2f       	mov	r18, r25
    3f04:	20 7e       	andi	r18, 0xE0	; 224
    3f06:	39 2f       	mov	r19, r25
    3f08:	30 7c       	andi	r19, 0xC0	; 192
    3f0a:	11 f0       	breq	.+4      	; 0x3f10 <scan_key+0x5c>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3f0c:	20 3a       	cpi	r18, 0xA0	; 160
    3f0e:	31 f4       	brne	.+12     	; 0x3f1c <scan_key+0x68>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	e8 16       	cp	r14, r24
    3f14:	f9 06       	cpc	r15, r25
    3f16:	11 f4       	brne	.+4      	; 0x3f1c <scan_key+0x68>
                     action.key.code == code)) {
                    return true;
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	09 c0       	rjmp	.+18     	; 0x3f2e <scan_key+0x7a>
    3f1c:	0f 5f       	subi	r16, 0xFF	; 255
    3f1e:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3f20:	0f 30       	cpi	r16, 0x0F	; 15
    3f22:	11 05       	cpc	r17, r1
    3f24:	d9 f6       	brne	.-74     	; 0x3edc <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f26:	cf 5f       	subi	r28, 0xFF	; 255
    3f28:	c6 30       	cpi	r28, 0x06	; 6
    3f2a:	91 f6       	brne	.-92     	; 0x3ed0 <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
}
    3f2e:	cf 91       	pop	r28
    3f30:	1f 91       	pop	r17
    3f32:	0f 91       	pop	r16
    3f34:	ff 90       	pop	r15
    3f36:	ef 90       	pop	r14
    3f38:	df 90       	pop	r13
    3f3a:	cf 90       	pop	r12
    3f3c:	bf 90       	pop	r11
    3f3e:	af 90       	pop	r10
    3f40:	08 95       	ret

00003f42 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3f48:	8c e2       	ldi	r24, 0x2C	; 44
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <scan_key>
    3f50:	88 23       	and	r24, r24
    3f52:	29 f0       	breq	.+10     	; 0x3f5e <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3f54:	ce 01       	movw	r24, r28
}
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3f5a:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <scan_key>
}
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	08 95       	ret

00003f66 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3f66:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3f68:	0e 94 1b 21 	call	0x4236	; 0x4236 <eeconfig_is_enabled>
    3f6c:	81 11       	cpse	r24, r1
    3f6e:	02 c0       	rjmp	.+4      	; 0x3f74 <bootmagic+0xe>
        eeconfig_init();
    3f70:	0e 94 01 21 	call	0x4202	; 0x4202 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3f74:	8d ea       	ldi	r24, 0xAD	; 173
    3f76:	94 e0       	ldi	r25, 0x04	; 4
    3f78:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3f7c:	c5 e6       	ldi	r28, 0x65	; 101
    3f7e:	c1 50       	subi	r28, 0x01	; 1
    3f80:	49 f0       	breq	.+18     	; 0x3f94 <bootmagic+0x2e>
    3f82:	0e 94 60 07 	call	0xec0	; 0xec0 <matrix_scan>
    3f86:	8f e3       	ldi	r24, 0x3F	; 63
    3f88:	9c e9       	ldi	r25, 0x9C	; 156
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	f1 f7       	brne	.-4      	; 0x3f8a <bootmagic+0x24>
    3f8e:	00 c0       	rjmp	.+0      	; 0x3f90 <bootmagic+0x2a>
    3f90:	00 00       	nop
    3f92:	f5 cf       	rjmp	.-22     	; 0x3f7e <bootmagic+0x18>
    print("done.\n");
    3f94:	86 ea       	ldi	r24, 0xA6	; 166
    3f96:	94 e0       	ldi	r25, 0x04	; 4
    3f98:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3f9c:	89 e2       	ldi	r24, 0x29	; 41
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    3fa4:	81 11       	cpse	r24, r1
    3fa6:	2b c1       	rjmp	.+598    	; 0x41fe <bootmagic+0x298>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3fa8:	8a e2       	ldi	r24, 0x2A	; 42
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    3fb0:	81 11       	cpse	r24, r1
        eeconfig_init();
    3fb2:	0e 94 01 21 	call	0x4202	; 0x4202 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3fb6:	85 e0       	ldi	r24, 0x05	; 5
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    3fbe:	81 11       	cpse	r24, r1
        bootloader_jump();
    3fc0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3fc4:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3fc8:	0e 94 26 21 	call	0x424c	; 0x424c <eeconfig_read_debug>
    3fcc:	80 93 cd 01 	sts	0x01CD, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3fd0:	87 e0       	ldi	r24, 0x07	; 7
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    3fd8:	88 23       	and	r24, r24
    3fda:	c1 f1       	breq	.+112    	; 0x404c <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3fdc:	8b e1       	ldi	r24, 0x1B	; 27
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    3fe4:	88 23       	and	r24, r24
    3fe6:	51 f0       	breq	.+20     	; 0x3ffc <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3fe8:	80 91 cd 01 	lds	r24, 0x01CD
    3fec:	81 fb       	bst	r24, 1
    3fee:	22 27       	eor	r18, r18
    3ff0:	20 f9       	bld	r18, 0
    3ff2:	91 e0       	ldi	r25, 0x01	; 1
    3ff4:	92 27       	eor	r25, r18
    3ff6:	90 fb       	bst	r25, 0
    3ff8:	81 f9       	bld	r24, 1
    3ffa:	0f c0       	rjmp	.+30     	; 0x401a <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3ffc:	8e e0       	ldi	r24, 0x0E	; 14
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    4004:	88 23       	and	r24, r24
    4006:	61 f0       	breq	.+24     	; 0x4020 <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    4008:	80 91 cd 01 	lds	r24, 0x01CD
    400c:	82 fb       	bst	r24, 2
    400e:	22 27       	eor	r18, r18
    4010:	20 f9       	bld	r18, 0
    4012:	91 e0       	ldi	r25, 0x01	; 1
    4014:	92 27       	eor	r25, r18
    4016:	90 fb       	bst	r25, 0
    4018:	82 f9       	bld	r24, 2
    401a:	80 93 cd 01 	sts	0x01CD, r24
    401e:	16 c0       	rjmp	.+44     	; 0x404c <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4020:	80 e1       	ldi	r24, 0x10	; 16
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    4028:	90 91 cd 01 	lds	r25, 0x01CD
    402c:	88 23       	and	r24, r24
    402e:	41 f0       	breq	.+16     	; 0x4040 <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    4030:	93 fb       	bst	r25, 3
    4032:	22 27       	eor	r18, r18
    4034:	20 f9       	bld	r18, 0
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	82 27       	eor	r24, r18
    403a:	80 fb       	bst	r24, 0
    403c:	93 f9       	bld	r25, 3
    403e:	04 c0       	rjmp	.+8      	; 0x4048 <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    4040:	89 2f       	mov	r24, r25
    4042:	80 95       	com	r24
    4044:	80 fb       	bst	r24, 0
    4046:	90 f9       	bld	r25, 0
    4048:	90 93 cd 01 	sts	0x01CD, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    404c:	80 91 cd 01 	lds	r24, 0x01CD
    4050:	0e 94 2a 21 	call	0x4254	; 0x4254 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4054:	0e 94 38 21 	call	0x4270	; 0x4270 <eeconfig_read_keymap>
    4058:	80 93 eb 01 	sts	0x01EB, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    405c:	80 ee       	ldi	r24, 0xE0	; 224
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    4064:	88 23       	and	r24, r24
    4066:	41 f0       	breq	.+16     	; 0x4078 <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4068:	80 91 eb 01 	lds	r24, 0x01EB
    406c:	98 2f       	mov	r25, r24
    406e:	90 95       	com	r25
    4070:	90 fb       	bst	r25, 0
    4072:	80 f9       	bld	r24, 0
    4074:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4078:	89 e3       	ldi	r24, 0x39	; 57
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    4080:	88 23       	and	r24, r24
    4082:	59 f0       	breq	.+22     	; 0x409a <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4084:	80 91 eb 01 	lds	r24, 0x01EB
    4088:	81 fb       	bst	r24, 1
    408a:	22 27       	eor	r18, r18
    408c:	20 f9       	bld	r18, 0
    408e:	91 e0       	ldi	r25, 0x01	; 1
    4090:	92 27       	eor	r25, r18
    4092:	90 fb       	bst	r25, 0
    4094:	81 f9       	bld	r24, 1
    4096:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    409a:	82 ee       	ldi	r24, 0xE2	; 226
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    40a2:	88 23       	and	r24, r24
    40a4:	59 f0       	breq	.+22     	; 0x40bc <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    40a6:	80 91 eb 01 	lds	r24, 0x01EB
    40aa:	82 fb       	bst	r24, 2
    40ac:	22 27       	eor	r18, r18
    40ae:	20 f9       	bld	r18, 0
    40b0:	91 e0       	ldi	r25, 0x01	; 1
    40b2:	92 27       	eor	r25, r18
    40b4:	90 fb       	bst	r25, 0
    40b6:	82 f9       	bld	r24, 2
    40b8:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    40bc:	86 ee       	ldi	r24, 0xE6	; 230
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    40c4:	88 23       	and	r24, r24
    40c6:	59 f0       	breq	.+22     	; 0x40de <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    40c8:	80 91 eb 01 	lds	r24, 0x01EB
    40cc:	83 fb       	bst	r24, 3
    40ce:	22 27       	eor	r18, r18
    40d0:	20 f9       	bld	r18, 0
    40d2:	91 e0       	ldi	r25, 0x01	; 1
    40d4:	92 27       	eor	r25, r18
    40d6:	90 fb       	bst	r25, 0
    40d8:	83 f9       	bld	r24, 3
    40da:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    40de:	83 ee       	ldi	r24, 0xE3	; 227
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    40e6:	88 23       	and	r24, r24
    40e8:	59 f0       	breq	.+22     	; 0x4100 <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    40ea:	80 91 eb 01 	lds	r24, 0x01EB
    40ee:	84 fb       	bst	r24, 4
    40f0:	22 27       	eor	r18, r18
    40f2:	20 f9       	bld	r18, 0
    40f4:	91 e0       	ldi	r25, 0x01	; 1
    40f6:	92 27       	eor	r25, r18
    40f8:	90 fb       	bst	r25, 0
    40fa:	84 f9       	bld	r24, 4
    40fc:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4100:	85 e3       	ldi	r24, 0x35	; 53
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    4108:	88 23       	and	r24, r24
    410a:	59 f0       	breq	.+22     	; 0x4122 <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    410c:	80 91 eb 01 	lds	r24, 0x01EB
    4110:	85 fb       	bst	r24, 5
    4112:	22 27       	eor	r18, r18
    4114:	20 f9       	bld	r18, 0
    4116:	91 e0       	ldi	r25, 0x01	; 1
    4118:	92 27       	eor	r25, r18
    411a:	90 fb       	bst	r25, 0
    411c:	85 f9       	bld	r24, 5
    411e:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4122:	81 e3       	ldi	r24, 0x31	; 49
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    412a:	88 23       	and	r24, r24
    412c:	59 f0       	breq	.+22     	; 0x4144 <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    412e:	80 91 eb 01 	lds	r24, 0x01EB
    4132:	86 fb       	bst	r24, 6
    4134:	22 27       	eor	r18, r18
    4136:	20 f9       	bld	r18, 0
    4138:	91 e0       	ldi	r25, 0x01	; 1
    413a:	92 27       	eor	r25, r18
    413c:	90 fb       	bst	r25, 0
    413e:	86 f9       	bld	r24, 6
    4140:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4144:	81 e1       	ldi	r24, 0x11	; 17
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    414c:	88 23       	and	r24, r24
    414e:	59 f0       	breq	.+22     	; 0x4166 <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    4150:	80 91 eb 01 	lds	r24, 0x01EB
    4154:	87 fb       	bst	r24, 7
    4156:	22 27       	eor	r18, r18
    4158:	20 f9       	bld	r18, 0
    415a:	91 e0       	ldi	r25, 0x01	; 1
    415c:	92 27       	eor	r25, r18
    415e:	90 fb       	bst	r25, 0
    4160:	87 f9       	bld	r24, 7
    4162:	80 93 eb 01 	sts	0x01EB, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    4166:	80 91 eb 01 	lds	r24, 0x01EB
    416a:	0e 94 3c 21 	call	0x4278	; 0x4278 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    416e:	80 91 eb 01 	lds	r24, 0x01EB
    4172:	87 fb       	bst	r24, 7
    4174:	88 27       	eor	r24, r24
    4176:	80 f9       	bld	r24, 0
    4178:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    417c:	87 e2       	ldi	r24, 0x27	; 39
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    4184:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4186:	8e e1       	ldi	r24, 0x1E	; 30
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    418e:	81 11       	cpse	r24, r1
    4190:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4192:	8f e1       	ldi	r24, 0x1F	; 31
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    419a:	81 11       	cpse	r24, r1
    419c:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    419e:	80 e2       	ldi	r24, 0x20	; 32
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    41a6:	81 11       	cpse	r24, r1
    41a8:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    41aa:	81 e2       	ldi	r24, 0x21	; 33
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    41b2:	81 11       	cpse	r24, r1
    41b4:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    41b6:	82 e2       	ldi	r24, 0x22	; 34
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    41be:	81 11       	cpse	r24, r1
    41c0:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    41c2:	83 e2       	ldi	r24, 0x23	; 35
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    41ca:	81 11       	cpse	r24, r1
    41cc:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    41ce:	84 e2       	ldi	r24, 0x24	; 36
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <bootmagic_scan_key>
    41d6:	88 23       	and	r24, r24
    41d8:	11 f0       	breq	.+4      	; 0x41de <bootmagic+0x278>
    41da:	c0 68       	ori	r28, 0x80	; 128
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <bootmagic+0x27c>
    if (default_layer) {
    41de:	cc 23       	and	r28, r28
    41e0:	29 f0       	breq	.+10     	; 0x41ec <bootmagic+0x286>
        eeconfig_write_default_layer(default_layer);
    41e2:	8c 2f       	mov	r24, r28
    41e4:	0e 94 33 21 	call	0x4266	; 0x4266 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    41e8:	6c 2f       	mov	r22, r28
    41ea:	03 c0       	rjmp	.+6      	; 0x41f2 <bootmagic+0x28c>
    } else {
        default_layer = eeconfig_read_default_layer();
    41ec:	0e 94 2f 21 	call	0x425e	; 0x425e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    41f0:	68 2f       	mov	r22, r24
    41f2:	70 e0       	ldi	r23, 0x00	; 0
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    41f8:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    41fa:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <default_layer_set>
    }
}
    41fe:	cf 91       	pop	r28
    4200:	08 95       	ret

00004202 <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    4202:	6d ee       	ldi	r22, 0xED	; 237
    4204:	7e ef       	ldi	r23, 0xFE	; 254
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 99 2a 	call	0x5532	; 0x5532 <eeprom_write_word>
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	0e 94 8b 2a 	call	0x5516	; 0x5516 <eeprom_write_byte>
    4218:	60 e0       	ldi	r22, 0x00	; 0
    421a:	83 e0       	ldi	r24, 0x03	; 3
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	0e 94 8b 2a 	call	0x5516	; 0x5516 <eeprom_write_byte>
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	84 e0       	ldi	r24, 0x04	; 4
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	0e 94 8b 2a 	call	0x5516	; 0x5516 <eeprom_write_byte>
    422c:	60 e0       	ldi	r22, 0x00	; 0
    422e:	85 e0       	ldi	r24, 0x05	; 5
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	0c 94 8b 2a 	jmp	0x5516	; 0x5516 <eeprom_write_byte>

00004236 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 85 2a 	call	0x550a	; 0x550a <eeprom_read_word>
    423e:	21 e0       	ldi	r18, 0x01	; 1
    4240:	8d 3e       	cpi	r24, 0xED	; 237
    4242:	9e 4f       	sbci	r25, 0xFE	; 254
    4244:	09 f0       	breq	.+2      	; 0x4248 <eeconfig_is_enabled+0x12>
    4246:	20 e0       	ldi	r18, 0x00	; 0
}
    4248:	82 2f       	mov	r24, r18
    424a:	08 95       	ret

0000424c <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	0c 94 7d 2a 	jmp	0x54fa	; 0x54fa <eeprom_read_byte>

00004254 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4254:	68 2f       	mov	r22, r24
    4256:	82 e0       	ldi	r24, 0x02	; 2
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	0c 94 8b 2a 	jmp	0x5516	; 0x5516 <eeprom_write_byte>

0000425e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    425e:	83 e0       	ldi	r24, 0x03	; 3
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	0c 94 7d 2a 	jmp	0x54fa	; 0x54fa <eeprom_read_byte>

00004266 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4266:	68 2f       	mov	r22, r24
    4268:	83 e0       	ldi	r24, 0x03	; 3
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	0c 94 8b 2a 	jmp	0x5516	; 0x5516 <eeprom_write_byte>

00004270 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4270:	84 e0       	ldi	r24, 0x04	; 4
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0c 94 7d 2a 	jmp	0x54fa	; 0x54fa <eeprom_read_byte>

00004278 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4278:	68 2f       	mov	r22, r24
    427a:	84 e0       	ldi	r24, 0x04	; 4
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	0c 94 8b 2a 	jmp	0x5516	; 0x5516 <eeprom_write_byte>

00004282 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4282:	80 91 d5 01 	lds	r24, 0x01D5
    4286:	80 ff       	sbrs	r24, 0
    4288:	0b c0       	rjmp	.+22     	; 0x42a0 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    428a:	60 91 12 01 	lds	r22, 0x0112
    428e:	85 e0       	ldi	r24, 0x05	; 5
    4290:	68 9f       	mul	r22, r24
    4292:	b0 01       	movw	r22, r0
    4294:	11 24       	eor	r1, r1
    4296:	75 95       	asr	r23
    4298:	67 95       	ror	r22
    429a:	75 95       	asr	r23
    429c:	67 95       	ror	r22
    429e:	2b c0       	rjmp	.+86     	; 0x42f6 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    42a0:	81 ff       	sbrs	r24, 1
    42a2:	09 c0       	rjmp	.+18     	; 0x42b6 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    42a4:	60 91 12 01 	lds	r22, 0x0112
    42a8:	85 e0       	ldi	r24, 0x05	; 5
    42aa:	68 9f       	mul	r22, r24
    42ac:	b0 01       	movw	r22, r0
    42ae:	11 24       	eor	r1, r1
    42b0:	75 95       	asr	r23
    42b2:	67 95       	ror	r22
    42b4:	20 c0       	rjmp	.+64     	; 0x42f6 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    42b6:	82 ff       	sbrs	r24, 2
    42b8:	07 c0       	rjmp	.+14     	; 0x42c8 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    42ba:	60 91 12 01 	lds	r22, 0x0112
    42be:	85 e0       	ldi	r24, 0x05	; 5
    42c0:	68 9f       	mul	r22, r24
    42c2:	b0 01       	movw	r22, r0
    42c4:	11 24       	eor	r1, r1
    42c6:	17 c0       	rjmp	.+46     	; 0x42f6 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    42c8:	90 91 d6 01 	lds	r25, 0x01D6
    42cc:	99 23       	and	r25, r25
    42ce:	d1 f0       	breq	.+52     	; 0x4304 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    42d0:	60 91 11 01 	lds	r22, 0x0111
    42d4:	96 17       	cp	r25, r22
    42d6:	88 f7       	brcc	.-30     	; 0x42ba <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    42d8:	20 91 12 01 	lds	r18, 0x0112
    42dc:	85 e0       	ldi	r24, 0x05	; 5
    42de:	28 9f       	mul	r18, r24
    42e0:	90 01       	movw	r18, r0
    42e2:	11 24       	eor	r1, r1
    42e4:	92 9f       	mul	r25, r18
    42e6:	a0 01       	movw	r20, r0
    42e8:	93 9f       	mul	r25, r19
    42ea:	50 0d       	add	r21, r0
    42ec:	11 24       	eor	r1, r1
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	ca 01       	movw	r24, r20
    42f2:	0e 94 4f 2a 	call	0x549e	; 0x549e <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    42f6:	60 38       	cpi	r22, 0x80	; 128
    42f8:	71 05       	cpc	r23, r1
    42fa:	40 f4       	brcc	.+16     	; 0x430c <move_unit+0x8a>
    42fc:	61 15       	cp	r22, r1
    42fe:	71 05       	cpc	r23, r1
    4300:	19 f4       	brne	.+6      	; 0x4308 <move_unit+0x86>
    4302:	06 c0       	rjmp	.+12     	; 0x4310 <move_unit+0x8e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4304:	65 e0       	ldi	r22, 0x05	; 5
    4306:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4308:	86 2f       	mov	r24, r22
    430a:	08 95       	ret
    430c:	8f e7       	ldi	r24, 0x7F	; 127
    430e:	08 95       	ret
    4310:	81 e0       	ldi	r24, 0x01	; 1
}
    4312:	08 95       	ret

00004314 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4314:	80 91 d5 01 	lds	r24, 0x01D5
    4318:	80 ff       	sbrs	r24, 0
    431a:	08 c0       	rjmp	.+16     	; 0x432c <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    431c:	60 91 10 01 	lds	r22, 0x0110
    4320:	70 e0       	ldi	r23, 0x00	; 0
    4322:	75 95       	asr	r23
    4324:	67 95       	ror	r22
    4326:	75 95       	asr	r23
    4328:	67 95       	ror	r22
    432a:	21 c0       	rjmp	.+66     	; 0x436e <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    432c:	81 ff       	sbrs	r24, 1
    432e:	06 c0       	rjmp	.+12     	; 0x433c <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4330:	60 91 10 01 	lds	r22, 0x0110
    4334:	70 e0       	ldi	r23, 0x00	; 0
    4336:	75 95       	asr	r23
    4338:	67 95       	ror	r22
    433a:	19 c0       	rjmp	.+50     	; 0x436e <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    433c:	82 ff       	sbrs	r24, 2
    433e:	04 c0       	rjmp	.+8      	; 0x4348 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4340:	60 91 10 01 	lds	r22, 0x0110
    4344:	70 e0       	ldi	r23, 0x00	; 0
    4346:	10 c0       	rjmp	.+32     	; 0x4368 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4348:	90 91 d6 01 	lds	r25, 0x01D6
    434c:	99 23       	and	r25, r25
    434e:	99 f0       	breq	.+38     	; 0x4376 <wheel_unit+0x62>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4350:	60 91 0f 01 	lds	r22, 0x010F
    4354:	96 17       	cp	r25, r22
    4356:	a0 f7       	brcc	.-24     	; 0x4340 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4358:	80 91 10 01 	lds	r24, 0x0110
    435c:	89 9f       	mul	r24, r25
    435e:	c0 01       	movw	r24, r0
    4360:	11 24       	eor	r1, r1
    4362:	70 e0       	ldi	r23, 0x00	; 0
    4364:	0e 94 4f 2a 	call	0x549e	; 0x549e <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4368:	60 38       	cpi	r22, 0x80	; 128
    436a:	71 05       	cpc	r23, r1
    436c:	40 f4       	brcc	.+16     	; 0x437e <wheel_unit+0x6a>
    436e:	61 15       	cp	r22, r1
    4370:	71 05       	cpc	r23, r1
    4372:	19 f4       	brne	.+6      	; 0x437a <wheel_unit+0x66>
    4374:	06 c0       	rjmp	.+12     	; 0x4382 <wheel_unit+0x6e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4376:	61 e0       	ldi	r22, 0x01	; 1
    4378:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    437a:	86 2f       	mov	r24, r22
    437c:	08 95       	ret
    437e:	8f e7       	ldi	r24, 0x7F	; 127
    4380:	08 95       	ret
    4382:	81 e0       	ldi	r24, 0x01	; 1
}
    4384:	08 95       	ret

00004386 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4386:	80 3f       	cpi	r24, 0xF0	; 240
    4388:	21 f4       	brne	.+8      	; 0x4392 <mousekey_on+0xc>
    438a:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    438e:	81 95       	neg	r24
    4390:	04 c0       	rjmp	.+8      	; 0x439a <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4392:	81 3f       	cpi	r24, 0xF1	; 241
    4394:	29 f4       	brne	.+10     	; 0x43a0 <mousekey_on+0x1a>
    4396:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    439a:	80 93 d9 01 	sts	0x01D9, r24
    439e:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    43a0:	82 3f       	cpi	r24, 0xF2	; 242
    43a2:	21 f4       	brne	.+8      	; 0x43ac <mousekey_on+0x26>
    43a4:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    43a8:	81 95       	neg	r24
    43aa:	04 c0       	rjmp	.+8      	; 0x43b4 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    43ac:	83 3f       	cpi	r24, 0xF3	; 243
    43ae:	29 f4       	brne	.+10     	; 0x43ba <mousekey_on+0x34>
    43b0:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    43b4:	80 93 d8 01 	sts	0x01D8, r24
    43b8:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    43ba:	89 3f       	cpi	r24, 0xF9	; 249
    43bc:	19 f4       	brne	.+6      	; 0x43c4 <mousekey_on+0x3e>
    43be:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    43c2:	05 c0       	rjmp	.+10     	; 0x43ce <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    43c4:	8a 3f       	cpi	r24, 0xFA	; 250
    43c6:	31 f4       	brne	.+12     	; 0x43d4 <mousekey_on+0x4e>
    43c8:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    43cc:	81 95       	neg	r24
    43ce:	80 93 da 01 	sts	0x01DA, r24
    43d2:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    43d4:	8b 3f       	cpi	r24, 0xFB	; 251
    43d6:	21 f4       	brne	.+8      	; 0x43e0 <mousekey_on+0x5a>
    43d8:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    43dc:	81 95       	neg	r24
    43de:	04 c0       	rjmp	.+8      	; 0x43e8 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    43e0:	8c 3f       	cpi	r24, 0xFC	; 252
    43e2:	29 f4       	brne	.+10     	; 0x43ee <mousekey_on+0x68>
    43e4:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    43e8:	80 93 db 01 	sts	0x01DB, r24
    43ec:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    43ee:	84 3f       	cpi	r24, 0xF4	; 244
    43f0:	21 f4       	brne	.+8      	; 0x43fa <mousekey_on+0x74>
    43f2:	80 91 d7 01 	lds	r24, 0x01D7
    43f6:	81 60       	ori	r24, 0x01	; 1
    43f8:	17 c0       	rjmp	.+46     	; 0x4428 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    43fa:	85 3f       	cpi	r24, 0xF5	; 245
    43fc:	21 f4       	brne	.+8      	; 0x4406 <mousekey_on+0x80>
    43fe:	80 91 d7 01 	lds	r24, 0x01D7
    4402:	82 60       	ori	r24, 0x02	; 2
    4404:	11 c0       	rjmp	.+34     	; 0x4428 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4406:	86 3f       	cpi	r24, 0xF6	; 246
    4408:	21 f4       	brne	.+8      	; 0x4412 <mousekey_on+0x8c>
    440a:	80 91 d7 01 	lds	r24, 0x01D7
    440e:	84 60       	ori	r24, 0x04	; 4
    4410:	0b c0       	rjmp	.+22     	; 0x4428 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4412:	87 3f       	cpi	r24, 0xF7	; 247
    4414:	21 f4       	brne	.+8      	; 0x441e <mousekey_on+0x98>
    4416:	80 91 d7 01 	lds	r24, 0x01D7
    441a:	88 60       	ori	r24, 0x08	; 8
    441c:	05 c0       	rjmp	.+10     	; 0x4428 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    441e:	88 3f       	cpi	r24, 0xF8	; 248
    4420:	31 f4       	brne	.+12     	; 0x442e <mousekey_on+0xa8>
    4422:	80 91 d7 01 	lds	r24, 0x01D7
    4426:	80 61       	ori	r24, 0x10	; 16
    4428:	80 93 d7 01 	sts	0x01D7, r24
    442c:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    442e:	8d 3f       	cpi	r24, 0xFD	; 253
    4430:	21 f4       	brne	.+8      	; 0x443a <mousekey_on+0xb4>
    4432:	80 91 d5 01 	lds	r24, 0x01D5
    4436:	81 60       	ori	r24, 0x01	; 1
    4438:	0b c0       	rjmp	.+22     	; 0x4450 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    443a:	8e 3f       	cpi	r24, 0xFE	; 254
    443c:	21 f4       	brne	.+8      	; 0x4446 <mousekey_on+0xc0>
    443e:	80 91 d5 01 	lds	r24, 0x01D5
    4442:	82 60       	ori	r24, 0x02	; 2
    4444:	05 c0       	rjmp	.+10     	; 0x4450 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4446:	8f 3f       	cpi	r24, 0xFF	; 255
    4448:	29 f4       	brne	.+10     	; 0x4454 <mousekey_on+0xce>
    444a:	80 91 d5 01 	lds	r24, 0x01D5
    444e:	84 60       	ori	r24, 0x04	; 4
    4450:	80 93 d5 01 	sts	0x01D5, r24
    4454:	08 95       	ret

00004456 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4456:	80 3f       	cpi	r24, 0xF0	; 240
    4458:	39 f4       	brne	.+14     	; 0x4468 <mousekey_off+0x12>
    445a:	80 91 d9 01 	lds	r24, 0x01D9
    445e:	87 ff       	sbrs	r24, 7
    4460:	6c c0       	rjmp	.+216    	; 0x453a <mousekey_off+0xe4>
    4462:	10 92 d9 01 	sts	0x01D9, r1
    4466:	69 c0       	rjmp	.+210    	; 0x453a <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4468:	81 3f       	cpi	r24, 0xF1	; 241
    446a:	29 f4       	brne	.+10     	; 0x4476 <mousekey_off+0x20>
    446c:	80 91 d9 01 	lds	r24, 0x01D9
    4470:	18 16       	cp	r1, r24
    4472:	bc f3       	brlt	.-18     	; 0x4462 <mousekey_off+0xc>
    4474:	62 c0       	rjmp	.+196    	; 0x453a <mousekey_off+0xe4>
    4476:	90 91 d8 01 	lds	r25, 0x01D8
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    447a:	82 3f       	cpi	r24, 0xF2	; 242
    447c:	29 f4       	brne	.+10     	; 0x4488 <mousekey_off+0x32>
    447e:	97 ff       	sbrs	r25, 7
    4480:	5c c0       	rjmp	.+184    	; 0x453a <mousekey_off+0xe4>
    4482:	10 92 d8 01 	sts	0x01D8, r1
    4486:	59 c0       	rjmp	.+178    	; 0x453a <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4488:	83 3f       	cpi	r24, 0xF3	; 243
    448a:	19 f4       	brne	.+6      	; 0x4492 <mousekey_off+0x3c>
    448c:	19 16       	cp	r1, r25
    448e:	cc f3       	brlt	.-14     	; 0x4482 <mousekey_off+0x2c>
    4490:	54 c0       	rjmp	.+168    	; 0x453a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4492:	89 3f       	cpi	r24, 0xF9	; 249
    4494:	41 f4       	brne	.+16     	; 0x44a6 <mousekey_off+0x50>
    4496:	80 91 da 01 	lds	r24, 0x01DA
    449a:	18 16       	cp	r1, r24
    449c:	0c f0       	brlt	.+2      	; 0x44a0 <mousekey_off+0x4a>
    449e:	4d c0       	rjmp	.+154    	; 0x453a <mousekey_off+0xe4>
    44a0:	10 92 da 01 	sts	0x01DA, r1
    44a4:	4a c0       	rjmp	.+148    	; 0x453a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    44a6:	8a 3f       	cpi	r24, 0xFA	; 250
    44a8:	29 f4       	brne	.+10     	; 0x44b4 <mousekey_off+0x5e>
    44aa:	80 91 da 01 	lds	r24, 0x01DA
    44ae:	87 ff       	sbrs	r24, 7
    44b0:	44 c0       	rjmp	.+136    	; 0x453a <mousekey_off+0xe4>
    44b2:	f6 cf       	rjmp	.-20     	; 0x44a0 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    44b4:	8b 3f       	cpi	r24, 0xFB	; 251
    44b6:	39 f4       	brne	.+14     	; 0x44c6 <mousekey_off+0x70>
    44b8:	80 91 db 01 	lds	r24, 0x01DB
    44bc:	87 ff       	sbrs	r24, 7
    44be:	3d c0       	rjmp	.+122    	; 0x453a <mousekey_off+0xe4>
    44c0:	10 92 db 01 	sts	0x01DB, r1
    44c4:	3a c0       	rjmp	.+116    	; 0x453a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    44c6:	8c 3f       	cpi	r24, 0xFC	; 252
    44c8:	29 f4       	brne	.+10     	; 0x44d4 <mousekey_off+0x7e>
    44ca:	80 91 db 01 	lds	r24, 0x01DB
    44ce:	18 16       	cp	r1, r24
    44d0:	bc f3       	brlt	.-18     	; 0x44c0 <mousekey_off+0x6a>
    44d2:	33 c0       	rjmp	.+102    	; 0x453a <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    44d4:	84 3f       	cpi	r24, 0xF4	; 244
    44d6:	21 f4       	brne	.+8      	; 0x44e0 <mousekey_off+0x8a>
    44d8:	80 91 d7 01 	lds	r24, 0x01D7
    44dc:	8e 7f       	andi	r24, 0xFE	; 254
    44de:	17 c0       	rjmp	.+46     	; 0x450e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    44e0:	85 3f       	cpi	r24, 0xF5	; 245
    44e2:	21 f4       	brne	.+8      	; 0x44ec <mousekey_off+0x96>
    44e4:	80 91 d7 01 	lds	r24, 0x01D7
    44e8:	8d 7f       	andi	r24, 0xFD	; 253
    44ea:	11 c0       	rjmp	.+34     	; 0x450e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    44ec:	86 3f       	cpi	r24, 0xF6	; 246
    44ee:	21 f4       	brne	.+8      	; 0x44f8 <mousekey_off+0xa2>
    44f0:	80 91 d7 01 	lds	r24, 0x01D7
    44f4:	8b 7f       	andi	r24, 0xFB	; 251
    44f6:	0b c0       	rjmp	.+22     	; 0x450e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    44f8:	87 3f       	cpi	r24, 0xF7	; 247
    44fa:	21 f4       	brne	.+8      	; 0x4504 <mousekey_off+0xae>
    44fc:	80 91 d7 01 	lds	r24, 0x01D7
    4500:	87 7f       	andi	r24, 0xF7	; 247
    4502:	05 c0       	rjmp	.+10     	; 0x450e <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4504:	88 3f       	cpi	r24, 0xF8	; 248
    4506:	31 f4       	brne	.+12     	; 0x4514 <mousekey_off+0xbe>
    4508:	80 91 d7 01 	lds	r24, 0x01D7
    450c:	8f 7e       	andi	r24, 0xEF	; 239
    450e:	80 93 d7 01 	sts	0x01D7, r24
    4512:	13 c0       	rjmp	.+38     	; 0x453a <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4514:	8d 3f       	cpi	r24, 0xFD	; 253
    4516:	21 f4       	brne	.+8      	; 0x4520 <mousekey_off+0xca>
    4518:	80 91 d5 01 	lds	r24, 0x01D5
    451c:	8e 7f       	andi	r24, 0xFE	; 254
    451e:	0b c0       	rjmp	.+22     	; 0x4536 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4520:	8e 3f       	cpi	r24, 0xFE	; 254
    4522:	21 f4       	brne	.+8      	; 0x452c <mousekey_off+0xd6>
    4524:	80 91 d5 01 	lds	r24, 0x01D5
    4528:	8d 7f       	andi	r24, 0xFD	; 253
    452a:	05 c0       	rjmp	.+10     	; 0x4536 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    452c:	8f 3f       	cpi	r24, 0xFF	; 255
    452e:	29 f4       	brne	.+10     	; 0x453a <mousekey_off+0xe4>
    4530:	80 91 d5 01 	lds	r24, 0x01D5
    4534:	8b 7f       	andi	r24, 0xFB	; 251
    4536:	80 93 d5 01 	sts	0x01D5, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    453a:	80 91 d8 01 	lds	r24, 0x01D8
    453e:	81 11       	cpse	r24, r1
    4540:	0e c0       	rjmp	.+28     	; 0x455e <mousekey_off+0x108>
    4542:	80 91 d9 01 	lds	r24, 0x01D9
    4546:	81 11       	cpse	r24, r1
    4548:	0a c0       	rjmp	.+20     	; 0x455e <mousekey_off+0x108>
    454a:	80 91 da 01 	lds	r24, 0x01DA
    454e:	81 11       	cpse	r24, r1
    4550:	06 c0       	rjmp	.+12     	; 0x455e <mousekey_off+0x108>
    4552:	80 91 db 01 	lds	r24, 0x01DB
    4556:	81 11       	cpse	r24, r1
    4558:	02 c0       	rjmp	.+4      	; 0x455e <mousekey_off+0x108>
        mousekey_repeat = 0;
    455a:	10 92 d6 01 	sts	0x01D6, r1
    455e:	08 95       	ret

00004560 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4560:	80 91 cd 01 	lds	r24, 0x01CD
    4564:	83 ff       	sbrs	r24, 3
    4566:	7e c0       	rjmp	.+252    	; 0x4664 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4568:	89 ee       	ldi	r24, 0xE9	; 233
    456a:	94 e0       	ldi	r25, 0x04	; 4
    456c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    phex(mouse_report.buttons); print("|");
    4570:	80 91 d7 01 	lds	r24, 0x01D7
    4574:	1f 92       	push	r1
    4576:	8f 93       	push	r24
    4578:	84 ee       	ldi	r24, 0xE4	; 228
    457a:	94 e0       	ldi	r25, 0x04	; 4
    457c:	9f 93       	push	r25
    457e:	8f 93       	push	r24
    4580:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4584:	82 ee       	ldi	r24, 0xE2	; 226
    4586:	94 e0       	ldi	r25, 0x04	; 4
    4588:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.x); print(" ");
    458c:	80 91 d8 01 	lds	r24, 0x01D8
    4590:	28 2f       	mov	r18, r24
    4592:	08 2e       	mov	r0, r24
    4594:	00 0c       	add	r0, r0
    4596:	33 0b       	sbc	r19, r19
    4598:	3f 93       	push	r19
    459a:	8f 93       	push	r24
    459c:	8f ed       	ldi	r24, 0xDF	; 223
    459e:	94 e0       	ldi	r25, 0x04	; 4
    45a0:	9f 93       	push	r25
    45a2:	8f 93       	push	r24
    45a4:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    45a8:	8d ed       	ldi	r24, 0xDD	; 221
    45aa:	94 e0       	ldi	r25, 0x04	; 4
    45ac:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.y); print(" ");
    45b0:	80 91 d9 01 	lds	r24, 0x01D9
    45b4:	28 2f       	mov	r18, r24
    45b6:	08 2e       	mov	r0, r24
    45b8:	00 0c       	add	r0, r0
    45ba:	33 0b       	sbc	r19, r19
    45bc:	3f 93       	push	r19
    45be:	8f 93       	push	r24
    45c0:	8a ed       	ldi	r24, 0xDA	; 218
    45c2:	94 e0       	ldi	r25, 0x04	; 4
    45c4:	9f 93       	push	r25
    45c6:	8f 93       	push	r24
    45c8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    45cc:	88 ed       	ldi	r24, 0xD8	; 216
    45ce:	94 e0       	ldi	r25, 0x04	; 4
    45d0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.v); print(" ");
    45d4:	80 91 da 01 	lds	r24, 0x01DA
    45d8:	28 2f       	mov	r18, r24
    45da:	08 2e       	mov	r0, r24
    45dc:	00 0c       	add	r0, r0
    45de:	33 0b       	sbc	r19, r19
    45e0:	3f 93       	push	r19
    45e2:	8f 93       	push	r24
    45e4:	85 ed       	ldi	r24, 0xD5	; 213
    45e6:	94 e0       	ldi	r25, 0x04	; 4
    45e8:	9f 93       	push	r25
    45ea:	8f 93       	push	r24
    45ec:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    45f0:	83 ed       	ldi	r24, 0xD3	; 211
    45f2:	94 e0       	ldi	r25, 0x04	; 4
    45f4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_decs(mouse_report.h); print("](");
    45f8:	80 91 db 01 	lds	r24, 0x01DB
    45fc:	28 2f       	mov	r18, r24
    45fe:	08 2e       	mov	r0, r24
    4600:	00 0c       	add	r0, r0
    4602:	33 0b       	sbc	r19, r19
    4604:	3f 93       	push	r19
    4606:	8f 93       	push	r24
    4608:	80 ed       	ldi	r24, 0xD0	; 208
    460a:	94 e0       	ldi	r25, 0x04	; 4
    460c:	9f 93       	push	r25
    460e:	8f 93       	push	r24
    4610:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4614:	8d ec       	ldi	r24, 0xCD	; 205
    4616:	94 e0       	ldi	r25, 0x04	; 4
    4618:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_dec(mousekey_repeat); print("/");
    461c:	80 91 d6 01 	lds	r24, 0x01D6
    4620:	1f 92       	push	r1
    4622:	8f 93       	push	r24
    4624:	8a ec       	ldi	r24, 0xCA	; 202
    4626:	94 e0       	ldi	r25, 0x04	; 4
    4628:	9f 93       	push	r25
    462a:	8f 93       	push	r24
    462c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4630:	88 ec       	ldi	r24, 0xC8	; 200
    4632:	94 e0       	ldi	r25, 0x04	; 4
    4634:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print_dec(mousekey_accel); print(")\n");
    4638:	80 91 d5 01 	lds	r24, 0x01D5
    463c:	1f 92       	push	r1
    463e:	8f 93       	push	r24
    4640:	85 ec       	ldi	r24, 0xC5	; 197
    4642:	94 e0       	ldi	r25, 0x04	; 4
    4644:	9f 93       	push	r25
    4646:	8f 93       	push	r24
    4648:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    464c:	82 ec       	ldi	r24, 0xC2	; 194
    464e:	94 e0       	ldi	r25, 0x04	; 4
    4650:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4654:	8d b7       	in	r24, 0x3d	; 61
    4656:	9e b7       	in	r25, 0x3e	; 62
    4658:	4c 96       	adiw	r24, 0x1c	; 28
    465a:	0f b6       	in	r0, 0x3f	; 63
    465c:	f8 94       	cli
    465e:	9e bf       	out	0x3e, r25	; 62
    4660:	0f be       	out	0x3f, r0	; 63
    4662:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4664:	87 ed       	ldi	r24, 0xD7	; 215
    4666:	91 e0       	ldi	r25, 0x01	; 1
    4668:	0e 94 06 11 	call	0x220c	; 0x220c <host_mouse_send>
    last_timer = timer_read();
    466c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <timer_read>
    4670:	90 93 d4 01 	sts	0x01D4, r25
    4674:	80 93 d3 01 	sts	0x01D3, r24
    4678:	08 95       	ret

0000467a <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    467a:	1f 93       	push	r17
    467c:	cf 93       	push	r28
    467e:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4680:	80 91 d3 01 	lds	r24, 0x01D3
    4684:	90 91 d4 01 	lds	r25, 0x01D4
    4688:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <timer_elapsed>
    468c:	ac 01       	movw	r20, r24
    468e:	90 91 d6 01 	lds	r25, 0x01D6
    4692:	99 23       	and	r25, r25
    4694:	21 f0       	breq	.+8      	; 0x469e <mousekey_task+0x24>
    4696:	20 91 13 01 	lds	r18, 0x0113
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	06 c0       	rjmp	.+12     	; 0x46aa <mousekey_task+0x30>
    469e:	20 91 14 01 	lds	r18, 0x0114
    46a2:	8a e0       	ldi	r24, 0x0A	; 10
    46a4:	28 9f       	mul	r18, r24
    46a6:	90 01       	movw	r18, r0
    46a8:	11 24       	eor	r1, r1
    46aa:	42 17       	cp	r20, r18
    46ac:	53 07       	cpc	r21, r19
    46ae:	08 f4       	brcc	.+2      	; 0x46b2 <mousekey_task+0x38>
    46b0:	85 c0       	rjmp	.+266    	; 0x47bc <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    46b2:	80 91 d8 01 	lds	r24, 0x01D8
    46b6:	c0 91 d9 01 	lds	r28, 0x01D9
    46ba:	d0 91 da 01 	lds	r29, 0x01DA
    46be:	10 91 db 01 	lds	r17, 0x01DB
    46c2:	81 11       	cpse	r24, r1
    46c4:	07 c0       	rjmp	.+14     	; 0x46d4 <mousekey_task+0x5a>
    46c6:	c1 11       	cpse	r28, r1
    46c8:	75 c0       	rjmp	.+234    	; 0x47b4 <mousekey_task+0x13a>
    46ca:	d1 11       	cpse	r29, r1
    46cc:	73 c0       	rjmp	.+230    	; 0x47b4 <mousekey_task+0x13a>
    46ce:	11 11       	cpse	r17, r1
    46d0:	71 c0       	rjmp	.+226    	; 0x47b4 <mousekey_task+0x13a>
    46d2:	74 c0       	rjmp	.+232    	; 0x47bc <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    46d4:	9f 3f       	cpi	r25, 0xFF	; 255
    46d6:	19 f0       	breq	.+6      	; 0x46de <mousekey_task+0x64>
        mousekey_repeat++;
    46d8:	9f 5f       	subi	r25, 0xFF	; 255
    46da:	90 93 d6 01 	sts	0x01D6, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    46de:	18 16       	cp	r1, r24
    46e0:	24 f4       	brge	.+8      	; 0x46ea <mousekey_task+0x70>
    46e2:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    46e6:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    46ea:	80 91 d8 01 	lds	r24, 0x01D8
    46ee:	87 ff       	sbrs	r24, 7
    46f0:	05 c0       	rjmp	.+10     	; 0x46fc <mousekey_task+0x82>
    46f2:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    46f6:	81 95       	neg	r24
    46f8:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    46fc:	1c 16       	cp	r1, r28
    46fe:	24 f4       	brge	.+8      	; 0x4708 <mousekey_task+0x8e>
    4700:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    4704:	80 93 d9 01 	sts	0x01D9, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4708:	80 91 d9 01 	lds	r24, 0x01D9
    470c:	87 ff       	sbrs	r24, 7
    470e:	05 c0       	rjmp	.+10     	; 0x471a <mousekey_task+0xa0>
    4710:	0e 94 41 21 	call	0x4282	; 0x4282 <move_unit>
    4714:	81 95       	neg	r24
    4716:	80 93 d9 01 	sts	0x01D9, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    471a:	60 91 d8 01 	lds	r22, 0x01D8
    471e:	66 23       	and	r22, r22
    4720:	31 f1       	breq	.+76     	; 0x476e <mousekey_task+0xf4>
    4722:	c0 91 d9 01 	lds	r28, 0x01D9
    4726:	cc 23       	and	r28, r28
    4728:	11 f1       	breq	.+68     	; 0x476e <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    472a:	06 2e       	mov	r0, r22
    472c:	00 0c       	add	r0, r0
    472e:	77 0b       	sbc	r23, r23
    4730:	88 0b       	sbc	r24, r24
    4732:	99 0b       	sbc	r25, r25
    4734:	0e 94 4a 29 	call	0x5294	; 0x5294 <__floatsisf>
    4738:	23 e3       	ldi	r18, 0x33	; 51
    473a:	33 e3       	ldi	r19, 0x33	; 51
    473c:	43 e3       	ldi	r20, 0x33	; 51
    473e:	5f e3       	ldi	r21, 0x3F	; 63
    4740:	0e 94 ae 29 	call	0x535c	; 0x535c <__mulsf3>
    4744:	0e 94 12 29 	call	0x5224	; 0x5224 <__fixsfsi>
    4748:	60 93 d8 01 	sts	0x01D8, r22
        mouse_report.y *= 0.7;
    474c:	6c 2f       	mov	r22, r28
    474e:	cc 0f       	add	r28, r28
    4750:	77 0b       	sbc	r23, r23
    4752:	88 0b       	sbc	r24, r24
    4754:	99 0b       	sbc	r25, r25
    4756:	0e 94 4a 29 	call	0x5294	; 0x5294 <__floatsisf>
    475a:	23 e3       	ldi	r18, 0x33	; 51
    475c:	33 e3       	ldi	r19, 0x33	; 51
    475e:	43 e3       	ldi	r20, 0x33	; 51
    4760:	5f e3       	ldi	r21, 0x3F	; 63
    4762:	0e 94 ae 29 	call	0x535c	; 0x535c <__mulsf3>
    4766:	0e 94 12 29 	call	0x5224	; 0x5224 <__fixsfsi>
    476a:	60 93 d9 01 	sts	0x01D9, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    476e:	1d 16       	cp	r1, r29
    4770:	24 f4       	brge	.+8      	; 0x477a <mousekey_task+0x100>
    4772:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    4776:	80 93 da 01 	sts	0x01DA, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    477a:	80 91 da 01 	lds	r24, 0x01DA
    477e:	87 ff       	sbrs	r24, 7
    4780:	05 c0       	rjmp	.+10     	; 0x478c <mousekey_task+0x112>
    4782:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    4786:	81 95       	neg	r24
    4788:	80 93 da 01 	sts	0x01DA, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    478c:	11 16       	cp	r1, r17
    478e:	24 f4       	brge	.+8      	; 0x4798 <mousekey_task+0x11e>
    4790:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    4794:	80 93 db 01 	sts	0x01DB, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4798:	80 91 db 01 	lds	r24, 0x01DB
    479c:	87 ff       	sbrs	r24, 7
    479e:	05 c0       	rjmp	.+10     	; 0x47aa <mousekey_task+0x130>
    47a0:	0e 94 8a 21 	call	0x4314	; 0x4314 <wheel_unit>
    47a4:	81 95       	neg	r24
    47a6:	80 93 db 01 	sts	0x01DB, r24

    mousekey_send();
}
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    47b0:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    47b4:	9f 3f       	cpi	r25, 0xFF	; 255
    47b6:	09 f0       	breq	.+2      	; 0x47ba <mousekey_task+0x140>
    47b8:	8f cf       	rjmp	.-226    	; 0x46d8 <mousekey_task+0x5e>
    47ba:	a0 cf       	rjmp	.-192    	; 0x46fc <mousekey_task+0x82>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    47bc:	df 91       	pop	r29
    47be:	cf 91       	pop	r28
    47c0:	1f 91       	pop	r17
    47c2:	08 95       	ret

000047c4 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    47c4:	e7 ed       	ldi	r30, 0xD7	; 215
    47c6:	f1 e0       	ldi	r31, 0x01	; 1
    47c8:	85 e0       	ldi	r24, 0x05	; 5
    47ca:	df 01       	movw	r26, r30
    47cc:	1d 92       	st	X+, r1
    47ce:	8a 95       	dec	r24
    47d0:	e9 f7       	brne	.-6      	; 0x47cc <mousekey_clear+0x8>
    mousekey_repeat = 0;
    47d2:	10 92 d6 01 	sts	0x01D6, r1
    mousekey_accel = 0;
    47d6:	10 92 d5 01 	sts	0x01D5, r1
    47da:	08 95       	ret

000047dc <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    47dc:	8c e0       	ldi	r24, 0x0C	; 12
    47de:	97 e0       	ldi	r25, 0x07	; 7
    47e0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    47e4:	1f 92       	push	r1
    47e6:	81 e0       	ldi	r24, 0x01	; 1
    47e8:	8f 93       	push	r24
    47ea:	1f 92       	push	r1
    47ec:	85 e0       	ldi	r24, 0x05	; 5
    47ee:	8f 93       	push	r24
    47f0:	8e eb       	ldi	r24, 0xBE	; 190
    47f2:	96 e0       	ldi	r25, 0x06	; 6
    47f4:	9f 93       	push	r25
    47f6:	8f 93       	push	r24
    47f8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    47fc:	0f 90       	pop	r0
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	08 95       	ret

0000480a <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    480a:	83 30       	cpi	r24, 0x03	; 3
    480c:	e9 f1       	breq	.+122    	; 0x4888 <mousekey_param_inc+0x7e>
    480e:	28 f4       	brcc	.+10     	; 0x481a <mousekey_param_inc+0x10>
    4810:	81 30       	cpi	r24, 0x01	; 1
    4812:	61 f0       	breq	.+24     	; 0x482c <mousekey_param_inc+0x22>
    4814:	82 30       	cpi	r24, 0x02	; 2
    4816:	09 f1       	breq	.+66     	; 0x485a <mousekey_param_inc+0x50>
    4818:	08 95       	ret
    481a:	85 30       	cpi	r24, 0x05	; 5
    481c:	09 f4       	brne	.+2      	; 0x4820 <mousekey_param_inc+0x16>
    481e:	62 c0       	rjmp	.+196    	; 0x48e4 <mousekey_param_inc+0xda>
    4820:	08 f4       	brcc	.+2      	; 0x4824 <mousekey_param_inc+0x1a>
    4822:	49 c0       	rjmp	.+146    	; 0x48b6 <mousekey_param_inc+0xac>
    4824:	86 30       	cpi	r24, 0x06	; 6
    4826:	09 f4       	brne	.+2      	; 0x482a <mousekey_param_inc+0x20>
    4828:	74 c0       	rjmp	.+232    	; 0x4912 <mousekey_param_inc+0x108>
    482a:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    482c:	80 91 14 01 	lds	r24, 0x0114
    4830:	26 2f       	mov	r18, r22
    4832:	30 e0       	ldi	r19, 0x00	; 0
    4834:	28 0f       	add	r18, r24
    4836:	31 1d       	adc	r19, r1
    4838:	2f 3f       	cpi	r18, 0xFF	; 255
    483a:	31 05       	cpc	r19, r1
    483c:	24 f4       	brge	.+8      	; 0x4846 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    483e:	68 0f       	add	r22, r24
    4840:	60 93 14 01 	sts	0x0114, r22
    4844:	03 c0       	rjmp	.+6      	; 0x484c <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4846:	8f ef       	ldi	r24, 0xFF	; 255
    4848:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    484c:	80 91 14 01 	lds	r24, 0x0114
    4850:	1f 92       	push	r1
    4852:	8f 93       	push	r24
    4854:	87 ef       	ldi	r24, 0xF7	; 247
    4856:	95 e0       	ldi	r25, 0x05	; 5
    4858:	72 c0       	rjmp	.+228    	; 0x493e <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    485a:	80 91 13 01 	lds	r24, 0x0113
    485e:	26 2f       	mov	r18, r22
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	28 0f       	add	r18, r24
    4864:	31 1d       	adc	r19, r1
    4866:	2f 3f       	cpi	r18, 0xFF	; 255
    4868:	31 05       	cpc	r19, r1
    486a:	24 f4       	brge	.+8      	; 0x4874 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    486c:	68 0f       	add	r22, r24
    486e:	60 93 13 01 	sts	0x0113, r22
    4872:	03 c0       	rjmp	.+6      	; 0x487a <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4874:	8f ef       	ldi	r24, 0xFF	; 255
    4876:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    487a:	80 91 13 01 	lds	r24, 0x0113
    487e:	1f 92       	push	r1
    4880:	8f 93       	push	r24
    4882:	85 ee       	ldi	r24, 0xE5	; 229
    4884:	95 e0       	ldi	r25, 0x05	; 5
    4886:	5b c0       	rjmp	.+182    	; 0x493e <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4888:	80 91 12 01 	lds	r24, 0x0112
    488c:	26 2f       	mov	r18, r22
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	28 0f       	add	r18, r24
    4892:	31 1d       	adc	r19, r1
    4894:	2f 3f       	cpi	r18, 0xFF	; 255
    4896:	31 05       	cpc	r19, r1
    4898:	24 f4       	brge	.+8      	; 0x48a2 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    489a:	68 0f       	add	r22, r24
    489c:	60 93 12 01 	sts	0x0112, r22
    48a0:	03 c0       	rjmp	.+6      	; 0x48a8 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    48a2:	8f ef       	ldi	r24, 0xFF	; 255
    48a4:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    48a8:	80 91 12 01 	lds	r24, 0x0112
    48ac:	1f 92       	push	r1
    48ae:	8f 93       	push	r24
    48b0:	82 ed       	ldi	r24, 0xD2	; 210
    48b2:	95 e0       	ldi	r25, 0x05	; 5
    48b4:	44 c0       	rjmp	.+136    	; 0x493e <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    48b6:	80 91 11 01 	lds	r24, 0x0111
    48ba:	26 2f       	mov	r18, r22
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	28 0f       	add	r18, r24
    48c0:	31 1d       	adc	r19, r1
    48c2:	2f 3f       	cpi	r18, 0xFF	; 255
    48c4:	31 05       	cpc	r19, r1
    48c6:	24 f4       	brge	.+8      	; 0x48d0 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    48c8:	68 0f       	add	r22, r24
    48ca:	60 93 11 01 	sts	0x0111, r22
    48ce:	03 c0       	rjmp	.+6      	; 0x48d6 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    48d0:	8f ef       	ldi	r24, 0xFF	; 255
    48d2:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    48d6:	80 91 11 01 	lds	r24, 0x0111
    48da:	1f 92       	push	r1
    48dc:	8f 93       	push	r24
    48de:	8d eb       	ldi	r24, 0xBD	; 189
    48e0:	95 e0       	ldi	r25, 0x05	; 5
    48e2:	2d c0       	rjmp	.+90     	; 0x493e <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    48e4:	80 91 10 01 	lds	r24, 0x0110
    48e8:	26 2f       	mov	r18, r22
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	28 0f       	add	r18, r24
    48ee:	31 1d       	adc	r19, r1
    48f0:	2f 3f       	cpi	r18, 0xFF	; 255
    48f2:	31 05       	cpc	r19, r1
    48f4:	24 f4       	brge	.+8      	; 0x48fe <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    48f6:	68 0f       	add	r22, r24
    48f8:	60 93 10 01 	sts	0x0110, r22
    48fc:	03 c0       	rjmp	.+6      	; 0x4904 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    48fe:	8f ef       	ldi	r24, 0xFF	; 255
    4900:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4904:	80 91 10 01 	lds	r24, 0x0110
    4908:	1f 92       	push	r1
    490a:	8f 93       	push	r24
    490c:	84 ea       	ldi	r24, 0xA4	; 164
    490e:	95 e0       	ldi	r25, 0x05	; 5
    4910:	16 c0       	rjmp	.+44     	; 0x493e <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4912:	80 91 0f 01 	lds	r24, 0x010F
    4916:	26 2f       	mov	r18, r22
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	28 0f       	add	r18, r24
    491c:	31 1d       	adc	r19, r1
    491e:	2f 3f       	cpi	r18, 0xFF	; 255
    4920:	31 05       	cpc	r19, r1
    4922:	24 f4       	brge	.+8      	; 0x492c <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4924:	68 0f       	add	r22, r24
    4926:	60 93 0f 01 	sts	0x010F, r22
    492a:	03 c0       	rjmp	.+6      	; 0x4932 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    492c:	8f ef       	ldi	r24, 0xFF	; 255
    492e:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4932:	80 91 0f 01 	lds	r24, 0x010F
    4936:	1f 92       	push	r1
    4938:	8f 93       	push	r24
    493a:	89 e8       	ldi	r24, 0x89	; 137
    493c:	95 e0       	ldi	r25, 0x05	; 5
    493e:	9f 93       	push	r25
    4940:	8f 93       	push	r24
    4942:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            break;
    4946:	0f 90       	pop	r0
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0
    494e:	08 95       	ret

00004950 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4950:	83 30       	cpi	r24, 0x03	; 3
    4952:	81 f1       	breq	.+96     	; 0x49b4 <mousekey_param_dec+0x64>
    4954:	28 f4       	brcc	.+10     	; 0x4960 <mousekey_param_dec+0x10>
    4956:	81 30       	cpi	r24, 0x01	; 1
    4958:	59 f0       	breq	.+22     	; 0x4970 <mousekey_param_dec+0x20>
    495a:	82 30       	cpi	r24, 0x02	; 2
    495c:	d1 f0       	breq	.+52     	; 0x4992 <mousekey_param_dec+0x42>
    495e:	08 95       	ret
    4960:	85 30       	cpi	r24, 0x05	; 5
    4962:	09 f4       	brne	.+2      	; 0x4966 <mousekey_param_dec+0x16>
    4964:	49 c0       	rjmp	.+146    	; 0x49f8 <mousekey_param_dec+0xa8>
    4966:	b8 f1       	brcs	.+110    	; 0x49d6 <mousekey_param_dec+0x86>
    4968:	86 30       	cpi	r24, 0x06	; 6
    496a:	09 f4       	brne	.+2      	; 0x496e <mousekey_param_dec+0x1e>
    496c:	56 c0       	rjmp	.+172    	; 0x4a1a <mousekey_param_dec+0xca>
    496e:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4970:	80 91 14 01 	lds	r24, 0x0114
    4974:	68 17       	cp	r22, r24
    4976:	20 f4       	brcc	.+8      	; 0x4980 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4978:	86 1b       	sub	r24, r22
    497a:	80 93 14 01 	sts	0x0114, r24
    497e:	02 c0       	rjmp	.+4      	; 0x4984 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4980:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4984:	80 91 14 01 	lds	r24, 0x0114
    4988:	1f 92       	push	r1
    498a:	8f 93       	push	r24
    498c:	8a e7       	ldi	r24, 0x7A	; 122
    498e:	95 e0       	ldi	r25, 0x05	; 5
    4990:	54 c0       	rjmp	.+168    	; 0x4a3a <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4992:	80 91 13 01 	lds	r24, 0x0113
    4996:	68 17       	cp	r22, r24
    4998:	20 f4       	brcc	.+8      	; 0x49a2 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    499a:	86 1b       	sub	r24, r22
    499c:	80 93 13 01 	sts	0x0113, r24
    49a0:	02 c0       	rjmp	.+4      	; 0x49a6 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    49a2:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    49a6:	80 91 13 01 	lds	r24, 0x0113
    49aa:	1f 92       	push	r1
    49ac:	8f 93       	push	r24
    49ae:	88 e6       	ldi	r24, 0x68	; 104
    49b0:	95 e0       	ldi	r25, 0x05	; 5
    49b2:	43 c0       	rjmp	.+134    	; 0x4a3a <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    49b4:	80 91 12 01 	lds	r24, 0x0112
    49b8:	68 17       	cp	r22, r24
    49ba:	20 f4       	brcc	.+8      	; 0x49c4 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    49bc:	86 1b       	sub	r24, r22
    49be:	80 93 12 01 	sts	0x0112, r24
    49c2:	02 c0       	rjmp	.+4      	; 0x49c8 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    49c4:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    49c8:	80 91 12 01 	lds	r24, 0x0112
    49cc:	1f 92       	push	r1
    49ce:	8f 93       	push	r24
    49d0:	85 e5       	ldi	r24, 0x55	; 85
    49d2:	95 e0       	ldi	r25, 0x05	; 5
    49d4:	32 c0       	rjmp	.+100    	; 0x4a3a <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    49d6:	80 91 11 01 	lds	r24, 0x0111
    49da:	68 17       	cp	r22, r24
    49dc:	20 f4       	brcc	.+8      	; 0x49e6 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    49de:	86 1b       	sub	r24, r22
    49e0:	80 93 11 01 	sts	0x0111, r24
    49e4:	02 c0       	rjmp	.+4      	; 0x49ea <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    49e6:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    49ea:	80 91 11 01 	lds	r24, 0x0111
    49ee:	1f 92       	push	r1
    49f0:	8f 93       	push	r24
    49f2:	80 e4       	ldi	r24, 0x40	; 64
    49f4:	95 e0       	ldi	r25, 0x05	; 5
    49f6:	21 c0       	rjmp	.+66     	; 0x4a3a <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    49f8:	80 91 10 01 	lds	r24, 0x0110
    49fc:	68 17       	cp	r22, r24
    49fe:	20 f4       	brcc	.+8      	; 0x4a08 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4a00:	86 1b       	sub	r24, r22
    4a02:	80 93 10 01 	sts	0x0110, r24
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4a08:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4a0c:	80 91 10 01 	lds	r24, 0x0110
    4a10:	1f 92       	push	r1
    4a12:	8f 93       	push	r24
    4a14:	87 e2       	ldi	r24, 0x27	; 39
    4a16:	95 e0       	ldi	r25, 0x05	; 5
    4a18:	10 c0       	rjmp	.+32     	; 0x4a3a <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4a1a:	80 91 0f 01 	lds	r24, 0x010F
    4a1e:	68 17       	cp	r22, r24
    4a20:	20 f4       	brcc	.+8      	; 0x4a2a <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4a22:	86 1b       	sub	r24, r22
    4a24:	80 93 0f 01 	sts	0x010F, r24
    4a28:	02 c0       	rjmp	.+4      	; 0x4a2e <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4a2a:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a2e:	80 91 0f 01 	lds	r24, 0x010F
    4a32:	1f 92       	push	r1
    4a34:	8f 93       	push	r24
    4a36:	8c e0       	ldi	r24, 0x0C	; 12
    4a38:	95 e0       	ldi	r25, 0x05	; 5
    4a3a:	9f 93       	push	r25
    4a3c:	8f 93       	push	r24
    4a3e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            break;
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0
    4a46:	0f 90       	pop	r0
    4a48:	0f 90       	pop	r0
    4a4a:	08 95       	ret

00004a4c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4a4c:	cf 93       	push	r28
    4a4e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4a50:	1f 92       	push	r1
    4a52:	8f 93       	push	r24
    4a54:	81 e1       	ldi	r24, 0x11	; 17
    4a56:	98 e0       	ldi	r25, 0x08	; 8
    4a58:	9f 93       	push	r25
    4a5a:	8f 93       	push	r24
    4a5c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    default_layer_set(1UL<<layer);
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	a0 e0       	ldi	r26, 0x00	; 0
    4a66:	b0 e0       	ldi	r27, 0x00	; 0
    4a68:	bc 01       	movw	r22, r24
    4a6a:	cd 01       	movw	r24, r26
    4a6c:	04 c0       	rjmp	.+8      	; 0x4a76 <switch_default_layer+0x2a>
    4a6e:	66 0f       	add	r22, r22
    4a70:	77 1f       	adc	r23, r23
    4a72:	88 1f       	adc	r24, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	ca 95       	dec	r28
    4a78:	d2 f7       	brpl	.-12     	; 0x4a6e <switch_default_layer+0x22>
    4a7a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <default_layer_set>
    clear_keyboard();
    4a7e:	0f 90       	pop	r0
    4a80:	0f 90       	pop	r0
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
}
    4a86:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4a88:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <clear_keyboard>

00004a8c <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4a8c:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4a8e:	8b 31       	cpi	r24, 0x1B	; 27
    4a90:	09 f4       	brne	.+2      	; 0x4a94 <command_common+0x8>
    4a92:	cb c1       	rjmp	.+918    	; 0x4e2a <command_common+0x39e>
    4a94:	08 f0       	brcs	.+2      	; 0x4a98 <command_common+0xc>
    4a96:	49 c0       	rjmp	.+146    	; 0x4b2a <command_common+0x9e>
    4a98:	8e 30       	cpi	r24, 0x0E	; 14
    4a9a:	09 f4       	brne	.+2      	; 0x4a9e <command_common+0x12>
    4a9c:	da c1       	rjmp	.+948    	; 0x4e52 <command_common+0x3c6>
    4a9e:	00 f5       	brcc	.+64     	; 0x4ae0 <command_common+0x54>
    4aa0:	87 30       	cpi	r24, 0x07	; 7
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <command_common+0x1a>
    4aa4:	a9 c1       	rjmp	.+850    	; 0x4df8 <command_common+0x36c>
    4aa6:	a8 f4       	brcc	.+42     	; 0x4ad2 <command_common+0x46>
    4aa8:	86 30       	cpi	r24, 0x06	; 6
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <command_common+0x22>
    4aac:	5a c2       	rjmp	.+1204   	; 0x4f62 <command_common+0x4d6>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4aae:	80 91 cd 01 	lds	r24, 0x01CD
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4ab2:	81 7f       	andi	r24, 0xF1	; 241
    4ab4:	8e 7f       	andi	r24, 0xFE	; 254
    4ab6:	80 93 cd 01 	sts	0x01CD, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4aba:	86 e1       	ldi	r24, 0x16	; 22
    4abc:	98 e0       	ldi	r25, 0x08	; 8
    4abe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4ac2:	81 e4       	ldi	r24, 0x41	; 65
    4ac4:	9c e0       	ldi	r25, 0x0C	; 12
    4ac6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            command_state = CONSOLE;
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	80 93 dd 01 	sts	0x01DD, r24
    4ad0:	91 c1       	rjmp	.+802    	; 0x4df4 <command_common+0x368>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4ad2:	88 30       	cpi	r24, 0x08	; 8
    4ad4:	09 f4       	brne	.+2      	; 0x4ad8 <command_common+0x4c>
    4ad6:	5b c0       	rjmp	.+182    	; 0x4b8e <command_common+0x102>
    4ad8:	8b 30       	cpi	r24, 0x0B	; 11
    4ada:	09 f4       	brne	.+2      	; 0x4ade <command_common+0x52>
    4adc:	87 c1       	rjmp	.+782    	; 0x4dec <command_common+0x360>
    4ade:	41 c2       	rjmp	.+1154   	; 0x4f62 <command_common+0x4d6>
    4ae0:	81 31       	cpi	r24, 0x11	; 17
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <command_common+0x5a>
    4ae4:	26 c2       	rjmp	.+1100   	; 0x4f32 <command_common+0x4a6>
    4ae6:	20 f4       	brcc	.+8      	; 0x4af0 <command_common+0x64>
    4ae8:	80 31       	cpi	r24, 0x10	; 16
    4aea:	09 f4       	brne	.+2      	; 0x4aee <command_common+0x62>
    4aec:	c6 c1       	rjmp	.+908    	; 0x4e7a <command_common+0x3ee>
    4aee:	39 c2       	rjmp	.+1138   	; 0x4f62 <command_common+0x4d6>
    4af0:	86 31       	cpi	r24, 0x16	; 22
    4af2:	09 f4       	brne	.+2      	; 0x4af6 <command_common+0x6a>
    4af4:	dd c1       	rjmp	.+954    	; 0x4eb0 <command_common+0x424>
    4af6:	89 31       	cpi	r24, 0x19	; 25
    4af8:	09 f0       	breq	.+2      	; 0x4afc <command_common+0x70>
    4afa:	33 c2       	rjmp	.+1126   	; 0x4f62 <command_common+0x4d6>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4afc:	85 eb       	ldi	r24, 0xB5	; 181
    4afe:	9b e0       	ldi	r25, 0x0B	; 11
    4b00:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4b04:	8a e8       	ldi	r24, 0x8A	; 138
    4b06:	9b e0       	ldi	r25, 0x0B	; 11
    4b08:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4b0c:	85 e5       	ldi	r24, 0x55	; 85
    4b0e:	9b e0       	ldi	r25, 0x0B	; 11
    4b10:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4b14:	88 e2       	ldi	r24, 0x28	; 40
    4b16:	9b e0       	ldi	r25, 0x0B	; 11
    4b18:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            /* build options */
            print("OPTIONS:"
    4b1c:	83 ee       	ldi	r24, 0xE3	; 227
    4b1e:	9a e0       	ldi	r25, 0x0A	; 10
    4b20:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4b24:	88 eb       	ldi	r24, 0xB8	; 184
    4b26:	9a e0       	ldi	r25, 0x0A	; 10
    4b28:	63 c1       	rjmp	.+710    	; 0x4df0 <command_common+0x364>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4b2a:	85 33       	cpi	r24, 0x35	; 53
    4b2c:	09 f4       	brne	.+2      	; 0x4b30 <command_common+0xa4>
    4b2e:	13 c2       	rjmp	.+1062   	; 0x4f56 <command_common+0x4ca>
    4b30:	68 f4       	brcc	.+26     	; 0x4b4c <command_common+0xc0>
    4b32:	87 32       	cpi	r24, 0x27	; 39
    4b34:	09 f4       	brne	.+2      	; 0x4b38 <command_common+0xac>
    4b36:	0f c2       	rjmp	.+1054   	; 0x4f56 <command_common+0x4ca>
    4b38:	28 f4       	brcc	.+10     	; 0x4b44 <command_common+0xb8>
    4b3a:	8e 31       	cpi	r24, 0x1E	; 30
    4b3c:	08 f4       	brcc	.+2      	; 0x4b40 <command_common+0xb4>
    4b3e:	11 c2       	rjmp	.+1058   	; 0x4f62 <command_common+0x4d6>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4b40:	8d 51       	subi	r24, 0x1D	; 29
    4b42:	0c c2       	rjmp	.+1048   	; 0x4f5c <command_common+0x4d0>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4b44:	89 32       	cpi	r24, 0x29	; 41
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <command_common+0xbe>
    4b48:	06 c2       	rjmp	.+1036   	; 0x4f56 <command_common+0x4ca>
    4b4a:	0b c2       	rjmp	.+1046   	; 0x4f62 <command_common+0x4d6>
    4b4c:	83 34       	cpi	r24, 0x43	; 67
    4b4e:	38 f4       	brcc	.+14     	; 0x4b5e <command_common+0xd2>
    4b50:	8a 33       	cpi	r24, 0x3A	; 58
    4b52:	08 f0       	brcs	.+2      	; 0x4b56 <command_common+0xca>
    4b54:	02 c2       	rjmp	.+1028   	; 0x4f5a <command_common+0x4ce>
    4b56:	88 33       	cpi	r24, 0x38	; 56
    4b58:	09 f4       	brne	.+2      	; 0x4b5c <command_common+0xd0>
    4b5a:	48 c1       	rjmp	.+656    	; 0x4dec <command_common+0x360>
    4b5c:	02 c2       	rjmp	.+1028   	; 0x4f62 <command_common+0x4d6>
    4b5e:	83 34       	cpi	r24, 0x43	; 67
    4b60:	09 f4       	brne	.+2      	; 0x4b64 <command_common+0xd8>
    4b62:	f9 c1       	rjmp	.+1010   	; 0x4f56 <command_common+0x4ca>
    4b64:	88 34       	cpi	r24, 0x48	; 72
    4b66:	09 f0       	breq	.+2      	; 0x4b6a <command_common+0xde>
    4b68:	fc c1       	rjmp	.+1016   	; 0x4f62 <command_common+0x4d6>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4b6a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <clear_keyboard>
            print("\n\nbootloader... ");
    4b6e:	80 e3       	ldi	r24, 0x30	; 48
    4b70:	9c e0       	ldi	r25, 0x0C	; 12
    4b72:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4b76:	9f ef       	ldi	r25, 0xFF	; 255
    4b78:	23 ed       	ldi	r18, 0xD3	; 211
    4b7a:	80 e3       	ldi	r24, 0x30	; 48
    4b7c:	91 50       	subi	r25, 0x01	; 1
    4b7e:	20 40       	sbci	r18, 0x00	; 0
    4b80:	80 40       	sbci	r24, 0x00	; 0
    4b82:	e1 f7       	brne	.-8      	; 0x4b7c <command_common+0xf0>
    4b84:	00 c0       	rjmp	.+0      	; 0x4b86 <command_common+0xfa>
    4b86:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4b88:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <bootloader_jump>
    4b8c:	33 c1       	rjmp	.+614    	; 0x4df4 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4b8e:	85 e4       	ldi	r24, 0x45	; 69
    4b90:	9c e0       	ldi	r25, 0x0C	; 12
    4b92:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4b96:	85 e1       	ldi	r24, 0x15	; 21
    4b98:	9a e0       	ldi	r25, 0x0A	; 10
    4b9a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4b9e:	0e 94 2f 21 	call	0x425e	; 0x425e <eeconfig_read_default_layer>
    4ba2:	1f 92       	push	r1
    4ba4:	8f 93       	push	r24
    4ba6:	82 e1       	ldi	r24, 0x12	; 18
    4ba8:	9a e0       	ldi	r25, 0x0A	; 10
    4baa:	9f 93       	push	r25
    4bac:	8f 93       	push	r24
    4bae:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4bb2:	80 e1       	ldi	r24, 0x10	; 16
    4bb4:	9a e0       	ldi	r25, 0x0A	; 10
    4bb6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4bba:	0e 94 26 21 	call	0x424c	; 0x424c <eeconfig_read_debug>
    4bbe:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4bc0:	8d ef       	ldi	r24, 0xFD	; 253
    4bc2:	99 e0       	ldi	r25, 0x09	; 9
    4bc4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4bc8:	1f 92       	push	r1
    4bca:	cf 93       	push	r28
    4bcc:	88 ef       	ldi	r24, 0xF8	; 248
    4bce:	99 e0       	ldi	r25, 0x09	; 9
    4bd0:	9f 93       	push	r25
    4bd2:	8f 93       	push	r24
    4bd4:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4bd8:	86 ef       	ldi	r24, 0xF6	; 246
    4bda:	99 e0       	ldi	r25, 0x09	; 9
    4bdc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4be0:	8c ee       	ldi	r24, 0xEC	; 236
    4be2:	99 e0       	ldi	r25, 0x09	; 9
    4be4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4be8:	8c 2f       	mov	r24, r28
    4bea:	81 70       	andi	r24, 0x01	; 1
    4bec:	1f 92       	push	r1
    4bee:	8f 93       	push	r24
    4bf0:	89 ee       	ldi	r24, 0xE9	; 233
    4bf2:	99 e0       	ldi	r25, 0x09	; 9
    4bf4:	9f 93       	push	r25
    4bf6:	8f 93       	push	r24
    4bf8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4bfc:	87 ee       	ldi	r24, 0xE7	; 231
    4bfe:	99 e0       	ldi	r25, 0x09	; 9
    4c00:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4c04:	8d ed       	ldi	r24, 0xDD	; 221
    4c06:	99 e0       	ldi	r25, 0x09	; 9
    4c08:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c0c:	c1 fb       	bst	r28, 1
    4c0e:	88 27       	eor	r24, r24
    4c10:	80 f9       	bld	r24, 0
    4c12:	1f 92       	push	r1
    4c14:	8f 93       	push	r24
    4c16:	8a ed       	ldi	r24, 0xDA	; 218
    4c18:	99 e0       	ldi	r25, 0x09	; 9
    4c1a:	9f 93       	push	r25
    4c1c:	8f 93       	push	r24
    4c1e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c22:	88 ed       	ldi	r24, 0xD8	; 216
    4c24:	99 e0       	ldi	r25, 0x09	; 9
    4c26:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4c2a:	8c ec       	ldi	r24, 0xCC	; 204
    4c2c:	99 e0       	ldi	r25, 0x09	; 9
    4c2e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c32:	c2 fb       	bst	r28, 2
    4c34:	88 27       	eor	r24, r24
    4c36:	80 f9       	bld	r24, 0
    4c38:	1f 92       	push	r1
    4c3a:	8f 93       	push	r24
    4c3c:	89 ec       	ldi	r24, 0xC9	; 201
    4c3e:	99 e0       	ldi	r25, 0x09	; 9
    4c40:	9f 93       	push	r25
    4c42:	8f 93       	push	r24
    4c44:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c48:	87 ec       	ldi	r24, 0xC7	; 199
    4c4a:	99 e0       	ldi	r25, 0x09	; 9
    4c4c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4c50:	8e eb       	ldi	r24, 0xBE	; 190
    4c52:	99 e0       	ldi	r25, 0x09	; 9
    4c54:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c58:	c3 fb       	bst	r28, 3
    4c5a:	cc 27       	eor	r28, r28
    4c5c:	c0 f9       	bld	r28, 0
    4c5e:	1f 92       	push	r1
    4c60:	cf 93       	push	r28
    4c62:	8b eb       	ldi	r24, 0xBB	; 187
    4c64:	99 e0       	ldi	r25, 0x09	; 9
    4c66:	9f 93       	push	r25
    4c68:	8f 93       	push	r24
    4c6a:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c6e:	89 eb       	ldi	r24, 0xB9	; 185
    4c70:	99 e0       	ldi	r25, 0x09	; 9
    4c72:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4c76:	0e 94 38 21 	call	0x4270	; 0x4270 <eeconfig_read_keymap>
    4c7a:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4c7c:	85 ea       	ldi	r24, 0xA5	; 165
    4c7e:	99 e0       	ldi	r25, 0x09	; 9
    4c80:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4c84:	1f 92       	push	r1
    4c86:	cf 93       	push	r28
    4c88:	80 ea       	ldi	r24, 0xA0	; 160
    4c8a:	99 e0       	ldi	r25, 0x09	; 9
    4c8c:	9f 93       	push	r25
    4c8e:	8f 93       	push	r24
    4c90:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4c94:	8e e9       	ldi	r24, 0x9E	; 158
    4c96:	99 e0       	ldi	r25, 0x09	; 9
    4c98:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4c9c:	85 e8       	ldi	r24, 0x85	; 133
    4c9e:	99 e0       	ldi	r25, 0x09	; 9
    4ca0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4ca4:	8c 2f       	mov	r24, r28
    4ca6:	81 70       	andi	r24, 0x01	; 1
    4ca8:	1f 92       	push	r1
    4caa:	8f 93       	push	r24
    4cac:	82 e8       	ldi	r24, 0x82	; 130
    4cae:	99 e0       	ldi	r25, 0x09	; 9
    4cb0:	9f 93       	push	r25
    4cb2:	8f 93       	push	r24
    4cb4:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4cb8:	8d b7       	in	r24, 0x3d	; 61
    4cba:	9e b7       	in	r25, 0x3e	; 62
    4cbc:	80 96       	adiw	r24, 0x20	; 32
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	9e bf       	out	0x3e, r25	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	8d bf       	out	0x3d, r24	; 61
    4cc8:	80 e8       	ldi	r24, 0x80	; 128
    4cca:	99 e0       	ldi	r25, 0x09	; 9
    4ccc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4cd0:	89 e6       	ldi	r24, 0x69	; 105
    4cd2:	99 e0       	ldi	r25, 0x09	; 9
    4cd4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4cd8:	c1 fb       	bst	r28, 1
    4cda:	88 27       	eor	r24, r24
    4cdc:	80 f9       	bld	r24, 0
    4cde:	1f 92       	push	r1
    4ce0:	8f 93       	push	r24
    4ce2:	86 e6       	ldi	r24, 0x66	; 102
    4ce4:	99 e0       	ldi	r25, 0x09	; 9
    4ce6:	9f 93       	push	r25
    4ce8:	8f 93       	push	r24
    4cea:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4cee:	84 e6       	ldi	r24, 0x64	; 100
    4cf0:	99 e0       	ldi	r25, 0x09	; 9
    4cf2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4cf6:	82 e5       	ldi	r24, 0x52	; 82
    4cf8:	99 e0       	ldi	r25, 0x09	; 9
    4cfa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4cfe:	c2 fb       	bst	r28, 2
    4d00:	88 27       	eor	r24, r24
    4d02:	80 f9       	bld	r24, 0
    4d04:	1f 92       	push	r1
    4d06:	8f 93       	push	r24
    4d08:	8f e4       	ldi	r24, 0x4F	; 79
    4d0a:	99 e0       	ldi	r25, 0x09	; 9
    4d0c:	9f 93       	push	r25
    4d0e:	8f 93       	push	r24
    4d10:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d14:	8d e4       	ldi	r24, 0x4D	; 77
    4d16:	99 e0       	ldi	r25, 0x09	; 9
    4d18:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4d1c:	8b e3       	ldi	r24, 0x3B	; 59
    4d1e:	99 e0       	ldi	r25, 0x09	; 9
    4d20:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d24:	c3 fb       	bst	r28, 3
    4d26:	88 27       	eor	r24, r24
    4d28:	80 f9       	bld	r24, 0
    4d2a:	1f 92       	push	r1
    4d2c:	8f 93       	push	r24
    4d2e:	88 e3       	ldi	r24, 0x38	; 56
    4d30:	99 e0       	ldi	r25, 0x09	; 9
    4d32:	9f 93       	push	r25
    4d34:	8f 93       	push	r24
    4d36:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d3a:	86 e3       	ldi	r24, 0x36	; 54
    4d3c:	99 e0       	ldi	r25, 0x09	; 9
    4d3e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4d42:	8c e2       	ldi	r24, 0x2C	; 44
    4d44:	99 e0       	ldi	r25, 0x09	; 9
    4d46:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d4a:	c4 fb       	bst	r28, 4
    4d4c:	88 27       	eor	r24, r24
    4d4e:	80 f9       	bld	r24, 0
    4d50:	1f 92       	push	r1
    4d52:	8f 93       	push	r24
    4d54:	89 e2       	ldi	r24, 0x29	; 41
    4d56:	99 e0       	ldi	r25, 0x09	; 9
    4d58:	9f 93       	push	r25
    4d5a:	8f 93       	push	r24
    4d5c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d60:	87 e2       	ldi	r24, 0x27	; 39
    4d62:	99 e0       	ldi	r25, 0x09	; 9
    4d64:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4d68:	85 e1       	ldi	r24, 0x15	; 21
    4d6a:	99 e0       	ldi	r25, 0x09	; 9
    4d6c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d70:	c5 fb       	bst	r28, 5
    4d72:	88 27       	eor	r24, r24
    4d74:	80 f9       	bld	r24, 0
    4d76:	1f 92       	push	r1
    4d78:	8f 93       	push	r24
    4d7a:	82 e1       	ldi	r24, 0x12	; 18
    4d7c:	99 e0       	ldi	r25, 0x09	; 9
    4d7e:	9f 93       	push	r25
    4d80:	8f 93       	push	r24
    4d82:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4d86:	80 e1       	ldi	r24, 0x10	; 16
    4d88:	99 e0       	ldi	r25, 0x09	; 9
    4d8a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4d8e:	84 ef       	ldi	r24, 0xF4	; 244
    4d90:	98 e0       	ldi	r25, 0x08	; 8
    4d92:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4d96:	c6 fb       	bst	r28, 6
    4d98:	88 27       	eor	r24, r24
    4d9a:	80 f9       	bld	r24, 0
    4d9c:	1f 92       	push	r1
    4d9e:	8f 93       	push	r24
    4da0:	81 ef       	ldi	r24, 0xF1	; 241
    4da2:	98 e0       	ldi	r25, 0x08	; 8
    4da4:	9f 93       	push	r25
    4da6:	8f 93       	push	r24
    4da8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4dac:	8f ee       	ldi	r24, 0xEF	; 239
    4dae:	98 e0       	ldi	r25, 0x08	; 8
    4db0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4db4:	87 ee       	ldi	r24, 0xE7	; 231
    4db6:	98 e0       	ldi	r25, 0x08	; 8
    4db8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4dbc:	c7 fb       	bst	r28, 7
    4dbe:	cc 27       	eor	r28, r28
    4dc0:	c0 f9       	bld	r28, 0
    4dc2:	1f 92       	push	r1
    4dc4:	cf 93       	push	r28
    4dc6:	84 ee       	ldi	r24, 0xE4	; 228
    4dc8:	98 e0       	ldi	r25, 0x08	; 8
    4dca:	9f 93       	push	r25
    4dcc:	8f 93       	push	r24
    4dce:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    4dd2:	82 ee       	ldi	r24, 0xE2	; 226
    4dd4:	98 e0       	ldi	r25, 0x08	; 8
    4dd6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4dda:	8d b7       	in	r24, 0x3d	; 61
    4ddc:	9e b7       	in	r25, 0x3e	; 62
    4dde:	4c 96       	adiw	r24, 0x1c	; 28
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	9e bf       	out	0x3e, r25	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	8d bf       	out	0x3d, r24	; 61
    4dea:	04 c0       	rjmp	.+8      	; 0x4df4 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4dec:	8d e3       	ldi	r24, 0x3D	; 61
    4dee:	98 e0       	ldi	r25, 0x08	; 8
    4df0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4df4:	c1 e0       	ldi	r28, 0x01	; 1
    4df6:	ba c0       	rjmp	.+372    	; 0x4f6c <command_common+0x4e0>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4df8:	80 91 cd 01 	lds	r24, 0x01CD
    4dfc:	c8 2f       	mov	r28, r24
    4dfe:	c1 70       	andi	r28, 0x01	; 1
    4e00:	80 ff       	sbrs	r24, 0
    4e02:	09 c0       	rjmp	.+18     	; 0x4e16 <command_common+0x38a>
                print("\ndebug: off\n");
    4e04:	83 e2       	ldi	r24, 0x23	; 35
    4e06:	9c e0       	ldi	r25, 0x0C	; 12
    4e08:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                debug_matrix   = false;
    4e0c:	80 91 cd 01 	lds	r24, 0x01CD
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4e10:	81 7f       	andi	r24, 0xF1	; 241
    4e12:	8e 7f       	andi	r24, 0xFE	; 254
    4e14:	47 c0       	rjmp	.+142    	; 0x4ea4 <command_common+0x418>
            } else {
                print("\ndebug: on\n");
    4e16:	87 e1       	ldi	r24, 0x17	; 23
    4e18:	9c e0       	ldi	r25, 0x0C	; 12
    4e1a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                debug_enable   = true;
    4e1e:	80 91 cd 01 	lds	r24, 0x01CD
    4e22:	81 60       	ori	r24, 0x01	; 1
    4e24:	80 93 cd 01 	sts	0x01CD, r24
    4e28:	e5 cf       	rjmp	.-54     	; 0x4df4 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4e2a:	90 91 cd 01 	lds	r25, 0x01CD
    4e2e:	91 fb       	bst	r25, 1
    4e30:	cc 27       	eor	r28, r28
    4e32:	c0 f9       	bld	r28, 0
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	c8 27       	eor	r28, r24
    4e38:	89 2f       	mov	r24, r25
    4e3a:	c0 fb       	bst	r28, 0
    4e3c:	81 f9       	bld	r24, 1
    4e3e:	80 93 cd 01 	sts	0x01CD, r24
            if (debug_matrix) {
    4e42:	cc 23       	and	r28, r28
    4e44:	19 f0       	breq	.+6      	; 0x4e4c <command_common+0x3c0>
                print("\nmatrix: on\n");
    4e46:	8a e0       	ldi	r24, 0x0A	; 10
    4e48:	9c e0       	ldi	r25, 0x0C	; 12
    4e4a:	27 c0       	rjmp	.+78     	; 0x4e9a <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4e4c:	8c ef       	ldi	r24, 0xFC	; 252
    4e4e:	9b e0       	ldi	r25, 0x0B	; 11
    4e50:	cf cf       	rjmp	.-98     	; 0x4df0 <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4e52:	90 91 cd 01 	lds	r25, 0x01CD
    4e56:	92 fb       	bst	r25, 2
    4e58:	cc 27       	eor	r28, r28
    4e5a:	c0 f9       	bld	r28, 0
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	c8 27       	eor	r28, r24
    4e60:	89 2f       	mov	r24, r25
    4e62:	c0 fb       	bst	r28, 0
    4e64:	82 f9       	bld	r24, 2
    4e66:	80 93 cd 01 	sts	0x01CD, r24
            if (debug_keyboard) {
    4e6a:	cc 23       	and	r28, r28
    4e6c:	19 f0       	breq	.+6      	; 0x4e74 <command_common+0x3e8>
                print("\nkeyboard: on\n");
    4e6e:	8d ee       	ldi	r24, 0xED	; 237
    4e70:	9b e0       	ldi	r25, 0x0B	; 11
    4e72:	13 c0       	rjmp	.+38     	; 0x4e9a <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4e74:	8d ed       	ldi	r24, 0xDD	; 221
    4e76:	9b e0       	ldi	r25, 0x0B	; 11
    4e78:	bb cf       	rjmp	.-138    	; 0x4df0 <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4e7a:	90 91 cd 01 	lds	r25, 0x01CD
    4e7e:	93 fb       	bst	r25, 3
    4e80:	cc 27       	eor	r28, r28
    4e82:	c0 f9       	bld	r28, 0
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	c8 27       	eor	r28, r24
    4e88:	89 2f       	mov	r24, r25
    4e8a:	c0 fb       	bst	r28, 0
    4e8c:	83 f9       	bld	r24, 3
    4e8e:	80 93 cd 01 	sts	0x01CD, r24
            if (debug_mouse) {
    4e92:	cc 23       	and	r28, r28
    4e94:	51 f0       	breq	.+20     	; 0x4eaa <command_common+0x41e>
                print("\nmouse: on\n");
    4e96:	81 ed       	ldi	r24, 0xD1	; 209
    4e98:	9b e0       	ldi	r25, 0x0B	; 11
    4e9a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                debug_enable = true;
    4e9e:	80 91 cd 01 	lds	r24, 0x01CD
    4ea2:	81 60       	ori	r24, 0x01	; 1
    4ea4:	80 93 cd 01 	sts	0x01CD, r24
    4ea8:	61 c0       	rjmp	.+194    	; 0x4f6c <command_common+0x4e0>
            } else {
                print("\nmouse: off\n");
    4eaa:	84 ec       	ldi	r24, 0xC4	; 196
    4eac:	9b e0       	ldi	r25, 0x0B	; 11
    4eae:	a0 cf       	rjmp	.-192    	; 0x4df0 <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4eb0:	8a ea       	ldi	r24, 0xAA	; 170
    4eb2:	9a e0       	ldi	r25, 0x0A	; 10
    4eb4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            print_val_hex8(host_keyboard_leds());
    4eb8:	0e 94 b2 10 	call	0x2164	; 0x2164 <host_keyboard_leds>
    4ebc:	1f 92       	push	r1
    4ebe:	8f 93       	push	r24
    4ec0:	80 e9       	ldi	r24, 0x90	; 144
    4ec2:	9a e0       	ldi	r25, 0x0A	; 10
    4ec4:	9f 93       	push	r25
    4ec6:	8f 93       	push	r24
    4ec8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            print_val_hex8(keyboard_protocol);
    4ecc:	80 91 0b 01 	lds	r24, 0x010B
    4ed0:	1f 92       	push	r1
    4ed2:	8f 93       	push	r24
    4ed4:	89 e7       	ldi	r24, 0x79	; 121
    4ed6:	9a e0       	ldi	r25, 0x0A	; 10
    4ed8:	9f 93       	push	r25
    4eda:	8f 93       	push	r24
    4edc:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
            print_val_hex8(keyboard_idle);
    4ee0:	80 91 66 01 	lds	r24, 0x0166
    4ee4:	1f 92       	push	r1
    4ee6:	8f 93       	push	r24
    4ee8:	86 e6       	ldi	r24, 0x66	; 102
    4eea:	9a e0       	ldi	r25, 0x0A	; 10
    4eec:	9f 93       	push	r25
    4eee:	8f 93       	push	r24
    4ef0:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4ef4:	80 91 0c 01 	lds	r24, 0x010C
    4ef8:	1f 92       	push	r1
    4efa:	8f 93       	push	r24
    4efc:	83 e5       	ldi	r24, 0x53	; 83
    4efe:	9a e0       	ldi	r25, 0x0A	; 10
    4f00:	9f 93       	push	r25
    4f02:	8f 93       	push	r24
    4f04:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
#endif
            print_val_hex32(timer_read32());
    4f08:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <timer_read32>
    4f0c:	9f 93       	push	r25
    4f0e:	8f 93       	push	r24
    4f10:	7f 93       	push	r23
    4f12:	6f 93       	push	r22
    4f14:	8c e3       	ldi	r24, 0x3C	; 60
    4f16:	9a e0       	ldi	r25, 0x0A	; 10
    4f18:	9f 93       	push	r25
    4f1a:	8f 93       	push	r24
    4f1c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4f20:	8d b7       	in	r24, 0x3d	; 61
    4f22:	9e b7       	in	r25, 0x3e	; 62
    4f24:	46 96       	adiw	r24, 0x16	; 22
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	f8 94       	cli
    4f2a:	9e bf       	out	0x3e, r25	; 62
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	8d bf       	out	0x3d, r24	; 61
    4f30:	61 cf       	rjmp	.-318    	; 0x4df4 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4f32:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4f36:	c0 91 0c 01 	lds	r28, 0x010C
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	c8 27       	eor	r28, r24
    4f3e:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    4f42:	cc 23       	and	r28, r28
    4f44:	29 f0       	breq	.+10     	; 0x4f50 <command_common+0x4c4>
                print("NKRO: on\n");
    4f46:	82 e3       	ldi	r24, 0x32	; 50
    4f48:	9a e0       	ldi	r25, 0x0A	; 10
    4f4a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    4f4e:	0e c0       	rjmp	.+28     	; 0x4f6c <command_common+0x4e0>
            } else {
                print("NKRO: off\n");
    4f50:	87 e2       	ldi	r24, 0x27	; 39
    4f52:	9a e0       	ldi	r25, 0x0A	; 10
    4f54:	4d cf       	rjmp	.-358    	; 0x4df0 <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4f56:	80 e0       	ldi	r24, 0x00	; 0
    4f58:	01 c0       	rjmp	.+2      	; 0x4f5c <command_common+0x4d0>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4f5a:	89 53       	subi	r24, 0x39	; 57
    4f5c:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <switch_default_layer>
    4f60:	49 cf       	rjmp	.-366    	; 0x4df4 <command_common+0x368>
            break;
        default:
            print("?");
    4f62:	85 e2       	ldi	r24, 0x25	; 37
    4f64:	9a e0       	ldi	r25, 0x0A	; 10
    4f66:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            return false;
    4f6a:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4f6c:	8c 2f       	mov	r24, r28
    4f6e:	cf 91       	pop	r28
    4f70:	08 95       	ret

00004f72 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	08 95       	ret

00004f76 <command_extra>:
    4f76:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <command_console_extra>

00004f7a <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4f7a:	cf 93       	push	r28
    4f7c:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4f7e:	80 91 dd 01 	lds	r24, 0x01DD
    4f82:	81 30       	cpi	r24, 0x01	; 1
    4f84:	71 f0       	breq	.+28     	; 0x4fa2 <command_proc+0x28>
    4f86:	20 f0       	brcs	.+8      	; 0x4f90 <command_proc+0x16>
    4f88:	82 30       	cpi	r24, 0x02	; 2
    4f8a:	09 f4       	brne	.+2      	; 0x4f8e <command_proc+0x14>
    4f8c:	4b c0       	rjmp	.+150    	; 0x5024 <command_proc+0xaa>
    4f8e:	42 c1       	rjmp	.+644    	; 0x5214 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    4f90:	e0 91 0d 01 	lds	r30, 0x010D
    4f94:	f0 91 0e 01 	lds	r31, 0x010E
    4f98:	80 81       	ld	r24, Z
    4f9a:	82 32       	cpi	r24, 0x22	; 34
    4f9c:	09 f0       	breq	.+2      	; 0x4fa0 <command_proc+0x26>
    4f9e:	3c c1       	rjmp	.+632    	; 0x5218 <command_proc+0x29e>
    4fa0:	07 c0       	rjmp	.+14     	; 0x4fb0 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4fa2:	e0 91 0d 01 	lds	r30, 0x010D
    4fa6:	f0 91 0e 01 	lds	r31, 0x010E
    4faa:	80 81       	ld	r24, Z
    4fac:	82 32       	cpi	r24, 0x22	; 34
    4fae:	61 f4       	brne	.+24     	; 0x4fc8 <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    4fb0:	8c 2f       	mov	r24, r28
    4fb2:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <command_extra>
    4fb6:	81 11       	cpse	r24, r1
    4fb8:	04 c0       	rjmp	.+8      	; 0x4fc2 <command_proc+0x48>
    4fba:	8c 2f       	mov	r24, r28
    4fbc:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <command_common>
    4fc0:	2f c0       	rjmp	.+94     	; 0x5020 <command_proc+0xa6>
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	2c c0       	rjmp	.+88     	; 0x5020 <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    4fc8:	8c 2f       	mov	r24, r28
    4fca:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <command_console_extra>
    4fce:	81 11       	cpse	r24, r1
    4fd0:	26 c0       	rjmp	.+76     	; 0x501e <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4fd2:	c4 31       	cpi	r28, 0x14	; 20
    4fd4:	e1 f0       	breq	.+56     	; 0x500e <command_proc+0x94>
    4fd6:	70 f4       	brcc	.+28     	; 0x4ff4 <command_proc+0x7a>
    4fd8:	cb 30       	cpi	r28, 0x0B	; 11
    4fda:	81 f0       	breq	.+32     	; 0x4ffc <command_proc+0x82>
    4fdc:	c0 31       	cpi	r28, 0x10	; 16
    4fde:	d1 f4       	brne	.+52     	; 0x5014 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4fe0:	0e 94 ee 23 	call	0x47dc	; 0x47dc <mousekey_console_help>
            print("M> ");
    4fe4:	89 e0       	ldi	r24, 0x09	; 9
    4fe6:	98 e0       	ldi	r25, 0x08	; 8
    4fe8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
            command_state = MOUSEKEY;
    4fec:	82 e0       	ldi	r24, 0x02	; 2
    4fee:	80 93 dd 01 	sts	0x01DD, r24
    4ff2:	15 c0       	rjmp	.+42     	; 0x501e <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4ff4:	c9 32       	cpi	r28, 0x29	; 41
    4ff6:	59 f0       	breq	.+22     	; 0x500e <command_proc+0x94>
    4ff8:	c8 33       	cpi	r28, 0x38	; 56
    4ffa:	61 f4       	brne	.+24     	; 0x5014 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4ffc:	86 e1       	ldi	r24, 0x16	; 22
    4ffe:	98 e0       	ldi	r25, 0x08	; 8
    5000:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5004:	8d e0       	ldi	r24, 0x0D	; 13
    5006:	98 e0       	ldi	r25, 0x08	; 8
    5008:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    500c:	08 c0       	rjmp	.+16     	; 0x501e <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    500e:	10 92 dd 01 	sts	0x01DD, r1
    5012:	04 c1       	rjmp	.+520    	; 0x521c <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    5014:	87 e0       	ldi	r24, 0x07	; 7
    5016:	98 e0       	ldi	r25, 0x08	; 8
    5018:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    501c:	ff c0       	rjmp	.+510    	; 0x521c <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	81 70       	andi	r24, 0x01	; 1
    5022:	fe c0       	rjmp	.+508    	; 0x5220 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5024:	c4 32       	cpi	r28, 0x24	; 36
    5026:	28 f5       	brcc	.+74     	; 0x5072 <command_proc+0xf8>
    5028:	ce 31       	cpi	r28, 0x1E	; 30
    502a:	08 f0       	brcs	.+2      	; 0x502e <command_proc+0xb4>
    502c:	c1 c0       	rjmp	.+386    	; 0x51b0 <command_proc+0x236>
    502e:	cb 30       	cpi	r28, 0x0B	; 11
    5030:	a1 f1       	breq	.+104    	; 0x509a <command_proc+0x120>
    5032:	d0 f4       	brcc	.+52     	; 0x5068 <command_proc+0xee>
    5034:	c7 30       	cpi	r28, 0x07	; 7
    5036:	09 f0       	breq	.+2      	; 0x503a <command_proc+0xc0>
    5038:	d3 c0       	rjmp	.+422    	; 0x51e0 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    503a:	8e e1       	ldi	r24, 0x1E	; 30
    503c:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5040:	82 e3       	ldi	r24, 0x32	; 50
    5042:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5046:	8a e0       	ldi	r24, 0x0A	; 10
    5048:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    504c:	84 e1       	ldi	r24, 0x14	; 20
    504e:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5052:	88 e0       	ldi	r24, 0x08	; 8
    5054:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5058:	88 e2       	ldi	r24, 0x28	; 40
    505a:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    505e:	8d ea       	ldi	r24, 0xAD	; 173
    5060:	96 e0       	ldi	r25, 0x06	; 6
    5062:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    5066:	bf c0       	rjmp	.+382    	; 0x51e6 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5068:	c3 31       	cpi	r28, 0x13	; 19
    506a:	49 f1       	breq	.+82     	; 0x50be <command_proc+0x144>
    506c:	c4 31       	cpi	r28, 0x14	; 20
    506e:	c1 f0       	breq	.+48     	; 0x50a0 <command_proc+0x126>
    5070:	b7 c0       	rjmp	.+366    	; 0x51e0 <command_proc+0x266>
    5072:	cb 34       	cpi	r28, 0x4B	; 75
    5074:	09 f4       	brne	.+2      	; 0x5078 <command_proc+0xfe>
    5076:	a9 c0       	rjmp	.+338    	; 0x51ca <command_proc+0x250>
    5078:	28 f4       	brcc	.+10     	; 0x5084 <command_proc+0x10a>
    507a:	c9 32       	cpi	r28, 0x29	; 41
    507c:	89 f0       	breq	.+34     	; 0x50a0 <command_proc+0x126>
    507e:	c8 33       	cpi	r28, 0x38	; 56
    5080:	61 f0       	breq	.+24     	; 0x509a <command_proc+0x120>
    5082:	ae c0       	rjmp	.+348    	; 0x51e0 <command_proc+0x266>
    5084:	c1 35       	cpi	r28, 0x51	; 81
    5086:	09 f4       	brne	.+2      	; 0x508a <command_proc+0x110>
    5088:	9e c0       	rjmp	.+316    	; 0x51c6 <command_proc+0x24c>
    508a:	c2 35       	cpi	r28, 0x52	; 82
    508c:	09 f4       	brne	.+2      	; 0x5090 <command_proc+0x116>
    508e:	99 c0       	rjmp	.+306    	; 0x51c2 <command_proc+0x248>
    5090:	ce 34       	cpi	r28, 0x4E	; 78
    5092:	09 f0       	breq	.+2      	; 0x5096 <command_proc+0x11c>
    5094:	a5 c0       	rjmp	.+330    	; 0x51e0 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5096:	6a e0       	ldi	r22, 0x0A	; 10
    5098:	9e c0       	rjmp	.+316    	; 0x51d6 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    509a:	0e 94 ee 23 	call	0x47dc	; 0x47dc <mousekey_console_help>
    509e:	a3 c0       	rjmp	.+326    	; 0x51e6 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    50a0:	80 91 dc 01 	lds	r24, 0x01DC
    50a4:	88 23       	and	r24, r24
    50a6:	19 f0       	breq	.+6      	; 0x50ae <command_proc+0x134>
                mousekey_param = 0;
    50a8:	10 92 dc 01 	sts	0x01DC, r1
    50ac:	9c c0       	rjmp	.+312    	; 0x51e6 <command_proc+0x26c>
            } else {
                print("C> ");
    50ae:	8a eb       	ldi	r24, 0xBA	; 186
    50b0:	96 e0       	ldi	r25, 0x06	; 6
    50b2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
                command_state = CONSOLE;
    50b6:	81 e0       	ldi	r24, 0x01	; 1
    50b8:	80 93 dd 01 	sts	0x01DD, r24
    50bc:	b1 c0       	rjmp	.+354    	; 0x5220 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    50be:	84 e9       	ldi	r24, 0x94	; 148
    50c0:	96 e0       	ldi	r25, 0x06	; 6
    50c2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    50c6:	82 e8       	ldi	r24, 0x82	; 130
    50c8:	96 e0       	ldi	r25, 0x06	; 6
    50ca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    50ce:	80 91 14 01 	lds	r24, 0x0114
    50d2:	1f 92       	push	r1
    50d4:	8f 93       	push	r24
    50d6:	8f e7       	ldi	r24, 0x7F	; 127
    50d8:	96 e0       	ldi	r25, 0x06	; 6
    50da:	9f 93       	push	r25
    50dc:	8f 93       	push	r24
    50de:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    50e2:	8d e7       	ldi	r24, 0x7D	; 125
    50e4:	96 e0       	ldi	r25, 0x06	; 6
    50e6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    50ea:	8b e6       	ldi	r24, 0x6B	; 107
    50ec:	96 e0       	ldi	r25, 0x06	; 6
    50ee:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    50f2:	80 91 13 01 	lds	r24, 0x0113
    50f6:	1f 92       	push	r1
    50f8:	8f 93       	push	r24
    50fa:	88 e6       	ldi	r24, 0x68	; 104
    50fc:	96 e0       	ldi	r25, 0x06	; 6
    50fe:	9f 93       	push	r25
    5100:	8f 93       	push	r24
    5102:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    5106:	86 e6       	ldi	r24, 0x66	; 102
    5108:	96 e0       	ldi	r25, 0x06	; 6
    510a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    510e:	87 e5       	ldi	r24, 0x57	; 87
    5110:	96 e0       	ldi	r25, 0x06	; 6
    5112:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    5116:	80 91 12 01 	lds	r24, 0x0112
    511a:	1f 92       	push	r1
    511c:	8f 93       	push	r24
    511e:	84 e5       	ldi	r24, 0x54	; 84
    5120:	96 e0       	ldi	r25, 0x06	; 6
    5122:	9f 93       	push	r25
    5124:	8f 93       	push	r24
    5126:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    512a:	82 e5       	ldi	r24, 0x52	; 82
    512c:	96 e0       	ldi	r25, 0x06	; 6
    512e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5132:	81 e4       	ldi	r24, 0x41	; 65
    5134:	96 e0       	ldi	r25, 0x06	; 6
    5136:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    513a:	80 91 11 01 	lds	r24, 0x0111
    513e:	1f 92       	push	r1
    5140:	8f 93       	push	r24
    5142:	8e e3       	ldi	r24, 0x3E	; 62
    5144:	96 e0       	ldi	r25, 0x06	; 6
    5146:	9f 93       	push	r25
    5148:	8f 93       	push	r24
    514a:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    514e:	8c e3       	ldi	r24, 0x3C	; 60
    5150:	96 e0       	ldi	r25, 0x06	; 6
    5152:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5156:	87 e2       	ldi	r24, 0x27	; 39
    5158:	96 e0       	ldi	r25, 0x06	; 6
    515a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    515e:	80 91 10 01 	lds	r24, 0x0110
    5162:	1f 92       	push	r1
    5164:	8f 93       	push	r24
    5166:	84 e2       	ldi	r24, 0x24	; 36
    5168:	96 e0       	ldi	r25, 0x06	; 6
    516a:	9f 93       	push	r25
    516c:	8f 93       	push	r24
    516e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    5172:	82 e2       	ldi	r24, 0x22	; 34
    5174:	96 e0       	ldi	r25, 0x06	; 6
    5176:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    517a:	8b e0       	ldi	r24, 0x0B	; 11
    517c:	96 e0       	ldi	r25, 0x06	; 6
    517e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    5182:	80 91 0f 01 	lds	r24, 0x010F
    5186:	1f 92       	push	r1
    5188:	8f 93       	push	r24
    518a:	88 e0       	ldi	r24, 0x08	; 8
    518c:	96 e0       	ldi	r25, 0x06	; 6
    518e:	9f 93       	push	r25
    5190:	8f 93       	push	r24
    5192:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    5196:	86 e0       	ldi	r24, 0x06	; 6
    5198:	96 e0       	ldi	r25, 0x06	; 6
    519a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
    519e:	8d b7       	in	r24, 0x3d	; 61
    51a0:	9e b7       	in	r25, 0x3e	; 62
    51a2:	48 96       	adiw	r24, 0x18	; 24
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	f8 94       	cli
    51a8:	9e bf       	out	0x3e, r25	; 62
    51aa:	0f be       	out	0x3f, r0	; 63
    51ac:	8d bf       	out	0x3d, r24	; 61
    51ae:	1b c0       	rjmp	.+54     	; 0x51e6 <command_proc+0x26c>
    51b0:	ce 51       	subi	r28, 0x1E	; 30
    51b2:	ec 2f       	mov	r30, r28
    51b4:	f0 e0       	ldi	r31, 0x00	; 0
    51b6:	e2 5d       	subi	r30, 0xD2	; 210
    51b8:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    51ba:	80 81       	ld	r24, Z
    51bc:	80 93 dc 01 	sts	0x01DC, r24
    51c0:	12 c0       	rjmp	.+36     	; 0x51e6 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    51c2:	61 e0       	ldi	r22, 0x01	; 1
    51c4:	03 c0       	rjmp	.+6      	; 0x51cc <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    51c6:	61 e0       	ldi	r22, 0x01	; 1
    51c8:	06 c0       	rjmp	.+12     	; 0x51d6 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    51ca:	6a e0       	ldi	r22, 0x0A	; 10
    51cc:	80 91 dc 01 	lds	r24, 0x01DC
    51d0:	0e 94 05 24 	call	0x480a	; 0x480a <mousekey_param_inc>
    51d4:	08 c0       	rjmp	.+16     	; 0x51e6 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    51d6:	80 91 dc 01 	lds	r24, 0x01DC
    51da:	0e 94 a8 24 	call	0x4950	; 0x4950 <mousekey_param_dec>
    51de:	03 c0       	rjmp	.+6      	; 0x51e6 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    51e0:	8b ea       	ldi	r24, 0xAB	; 171
    51e2:	96 e0       	ldi	r25, 0x06	; 6
    51e4:	13 c0       	rjmp	.+38     	; 0x520c <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    51e6:	80 91 dc 01 	lds	r24, 0x01DC
    51ea:	88 23       	and	r24, r24
    51ec:	69 f0       	breq	.+26     	; 0x5208 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    51ee:	1f 92       	push	r1
    51f0:	8f 93       	push	r24
    51f2:	85 ea       	ldi	r24, 0xA5	; 165
    51f4:	96 e0       	ldi	r25, 0x06	; 6
    51f6:	9f 93       	push	r25
    51f8:	8f 93       	push	r24
    51fa:	0e 94 16 07 	call	0xe2c	; 0xe2c <__xprintf>
    51fe:	0f 90       	pop	r0
    5200:	0f 90       	pop	r0
    5202:	0f 90       	pop	r0
    5204:	0f 90       	pop	r0
    5206:	04 c0       	rjmp	.+8      	; 0x5210 <command_proc+0x296>
    } else {
        print("M>" );
    5208:	82 ea       	ldi	r24, 0xA2	; 162
    520a:	96 e0       	ldi	r25, 0x06	; 6
    520c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	06 c0       	rjmp	.+12     	; 0x5220 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5214:	10 92 dd 01 	sts	0x01DD, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	02 c0       	rjmp	.+4      	; 0x5220 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	00 cf       	rjmp	.-512    	; 0x5020 <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5220:	cf 91       	pop	r28
    5222:	08 95       	ret

00005224 <__fixsfsi>:
    5224:	0e 94 19 29 	call	0x5232	; 0x5232 <__fixunssfsi>
    5228:	68 94       	set
    522a:	b1 11       	cpse	r27, r1
    522c:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <__fp_szero>
    5230:	08 95       	ret

00005232 <__fixunssfsi>:
    5232:	0e 94 8d 29 	call	0x531a	; 0x531a <__fp_splitA>
    5236:	88 f0       	brcs	.+34     	; 0x525a <__fixunssfsi+0x28>
    5238:	9f 57       	subi	r25, 0x7F	; 127
    523a:	98 f0       	brcs	.+38     	; 0x5262 <__fixunssfsi+0x30>
    523c:	b9 2f       	mov	r27, r25
    523e:	99 27       	eor	r25, r25
    5240:	b7 51       	subi	r27, 0x17	; 23
    5242:	b0 f0       	brcs	.+44     	; 0x5270 <__fixunssfsi+0x3e>
    5244:	e1 f0       	breq	.+56     	; 0x527e <__fixunssfsi+0x4c>
    5246:	66 0f       	add	r22, r22
    5248:	77 1f       	adc	r23, r23
    524a:	88 1f       	adc	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	1a f0       	brmi	.+6      	; 0x5256 <__fixunssfsi+0x24>
    5250:	ba 95       	dec	r27
    5252:	c9 f7       	brne	.-14     	; 0x5246 <__fixunssfsi+0x14>
    5254:	14 c0       	rjmp	.+40     	; 0x527e <__fixunssfsi+0x4c>
    5256:	b1 30       	cpi	r27, 0x01	; 1
    5258:	91 f0       	breq	.+36     	; 0x527e <__fixunssfsi+0x4c>
    525a:	0e 94 a7 29 	call	0x534e	; 0x534e <__fp_zero>
    525e:	b1 e0       	ldi	r27, 0x01	; 1
    5260:	08 95       	ret
    5262:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__fp_zero>
    5266:	67 2f       	mov	r22, r23
    5268:	78 2f       	mov	r23, r24
    526a:	88 27       	eor	r24, r24
    526c:	b8 5f       	subi	r27, 0xF8	; 248
    526e:	39 f0       	breq	.+14     	; 0x527e <__fixunssfsi+0x4c>
    5270:	b9 3f       	cpi	r27, 0xF9	; 249
    5272:	cc f3       	brlt	.-14     	; 0x5266 <__fixunssfsi+0x34>
    5274:	86 95       	lsr	r24
    5276:	77 95       	ror	r23
    5278:	67 95       	ror	r22
    527a:	b3 95       	inc	r27
    527c:	d9 f7       	brne	.-10     	; 0x5274 <__fixunssfsi+0x42>
    527e:	3e f4       	brtc	.+14     	; 0x528e <__fixunssfsi+0x5c>
    5280:	90 95       	com	r25
    5282:	80 95       	com	r24
    5284:	70 95       	com	r23
    5286:	61 95       	neg	r22
    5288:	7f 4f       	sbci	r23, 0xFF	; 255
    528a:	8f 4f       	sbci	r24, 0xFF	; 255
    528c:	9f 4f       	sbci	r25, 0xFF	; 255
    528e:	08 95       	ret

00005290 <__floatunsisf>:
    5290:	e8 94       	clt
    5292:	09 c0       	rjmp	.+18     	; 0x52a6 <__floatsisf+0x12>

00005294 <__floatsisf>:
    5294:	97 fb       	bst	r25, 7
    5296:	3e f4       	brtc	.+14     	; 0x52a6 <__floatsisf+0x12>
    5298:	90 95       	com	r25
    529a:	80 95       	com	r24
    529c:	70 95       	com	r23
    529e:	61 95       	neg	r22
    52a0:	7f 4f       	sbci	r23, 0xFF	; 255
    52a2:	8f 4f       	sbci	r24, 0xFF	; 255
    52a4:	9f 4f       	sbci	r25, 0xFF	; 255
    52a6:	99 23       	and	r25, r25
    52a8:	a9 f0       	breq	.+42     	; 0x52d4 <__floatsisf+0x40>
    52aa:	f9 2f       	mov	r31, r25
    52ac:	96 e9       	ldi	r25, 0x96	; 150
    52ae:	bb 27       	eor	r27, r27
    52b0:	93 95       	inc	r25
    52b2:	f6 95       	lsr	r31
    52b4:	87 95       	ror	r24
    52b6:	77 95       	ror	r23
    52b8:	67 95       	ror	r22
    52ba:	b7 95       	ror	r27
    52bc:	f1 11       	cpse	r31, r1
    52be:	f8 cf       	rjmp	.-16     	; 0x52b0 <__floatsisf+0x1c>
    52c0:	fa f4       	brpl	.+62     	; 0x5300 <__floatsisf+0x6c>
    52c2:	bb 0f       	add	r27, r27
    52c4:	11 f4       	brne	.+4      	; 0x52ca <__floatsisf+0x36>
    52c6:	60 ff       	sbrs	r22, 0
    52c8:	1b c0       	rjmp	.+54     	; 0x5300 <__floatsisf+0x6c>
    52ca:	6f 5f       	subi	r22, 0xFF	; 255
    52cc:	7f 4f       	sbci	r23, 0xFF	; 255
    52ce:	8f 4f       	sbci	r24, 0xFF	; 255
    52d0:	9f 4f       	sbci	r25, 0xFF	; 255
    52d2:	16 c0       	rjmp	.+44     	; 0x5300 <__floatsisf+0x6c>
    52d4:	88 23       	and	r24, r24
    52d6:	11 f0       	breq	.+4      	; 0x52dc <__floatsisf+0x48>
    52d8:	96 e9       	ldi	r25, 0x96	; 150
    52da:	11 c0       	rjmp	.+34     	; 0x52fe <__floatsisf+0x6a>
    52dc:	77 23       	and	r23, r23
    52de:	21 f0       	breq	.+8      	; 0x52e8 <__floatsisf+0x54>
    52e0:	9e e8       	ldi	r25, 0x8E	; 142
    52e2:	87 2f       	mov	r24, r23
    52e4:	76 2f       	mov	r23, r22
    52e6:	05 c0       	rjmp	.+10     	; 0x52f2 <__floatsisf+0x5e>
    52e8:	66 23       	and	r22, r22
    52ea:	71 f0       	breq	.+28     	; 0x5308 <__floatsisf+0x74>
    52ec:	96 e8       	ldi	r25, 0x86	; 134
    52ee:	86 2f       	mov	r24, r22
    52f0:	70 e0       	ldi	r23, 0x00	; 0
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	2a f0       	brmi	.+10     	; 0x5300 <__floatsisf+0x6c>
    52f6:	9a 95       	dec	r25
    52f8:	66 0f       	add	r22, r22
    52fa:	77 1f       	adc	r23, r23
    52fc:	88 1f       	adc	r24, r24
    52fe:	da f7       	brpl	.-10     	; 0x52f6 <__floatsisf+0x62>
    5300:	88 0f       	add	r24, r24
    5302:	96 95       	lsr	r25
    5304:	87 95       	ror	r24
    5306:	97 f9       	bld	r25, 7
    5308:	08 95       	ret

0000530a <__fp_split3>:
    530a:	57 fd       	sbrc	r21, 7
    530c:	90 58       	subi	r25, 0x80	; 128
    530e:	44 0f       	add	r20, r20
    5310:	55 1f       	adc	r21, r21
    5312:	59 f0       	breq	.+22     	; 0x532a <__fp_splitA+0x10>
    5314:	5f 3f       	cpi	r21, 0xFF	; 255
    5316:	71 f0       	breq	.+28     	; 0x5334 <__fp_splitA+0x1a>
    5318:	47 95       	ror	r20

0000531a <__fp_splitA>:
    531a:	88 0f       	add	r24, r24
    531c:	97 fb       	bst	r25, 7
    531e:	99 1f       	adc	r25, r25
    5320:	61 f0       	breq	.+24     	; 0x533a <__fp_splitA+0x20>
    5322:	9f 3f       	cpi	r25, 0xFF	; 255
    5324:	79 f0       	breq	.+30     	; 0x5344 <__fp_splitA+0x2a>
    5326:	87 95       	ror	r24
    5328:	08 95       	ret
    532a:	12 16       	cp	r1, r18
    532c:	13 06       	cpc	r1, r19
    532e:	14 06       	cpc	r1, r20
    5330:	55 1f       	adc	r21, r21
    5332:	f2 cf       	rjmp	.-28     	; 0x5318 <__fp_split3+0xe>
    5334:	46 95       	lsr	r20
    5336:	f1 df       	rcall	.-30     	; 0x531a <__fp_splitA>
    5338:	08 c0       	rjmp	.+16     	; 0x534a <__fp_splitA+0x30>
    533a:	16 16       	cp	r1, r22
    533c:	17 06       	cpc	r1, r23
    533e:	18 06       	cpc	r1, r24
    5340:	99 1f       	adc	r25, r25
    5342:	f1 cf       	rjmp	.-30     	; 0x5326 <__fp_splitA+0xc>
    5344:	86 95       	lsr	r24
    5346:	71 05       	cpc	r23, r1
    5348:	61 05       	cpc	r22, r1
    534a:	08 94       	sec
    534c:	08 95       	ret

0000534e <__fp_zero>:
    534e:	e8 94       	clt

00005350 <__fp_szero>:
    5350:	bb 27       	eor	r27, r27
    5352:	66 27       	eor	r22, r22
    5354:	77 27       	eor	r23, r23
    5356:	cb 01       	movw	r24, r22
    5358:	97 f9       	bld	r25, 7
    535a:	08 95       	ret

0000535c <__mulsf3>:
    535c:	0e 94 c1 29 	call	0x5382	; 0x5382 <__mulsf3x>
    5360:	0c 94 32 2a 	jmp	0x5464	; 0x5464 <__fp_round>
    5364:	0e 94 24 2a 	call	0x5448	; 0x5448 <__fp_pscA>
    5368:	38 f0       	brcs	.+14     	; 0x5378 <__mulsf3+0x1c>
    536a:	0e 94 2b 2a 	call	0x5456	; 0x5456 <__fp_pscB>
    536e:	20 f0       	brcs	.+8      	; 0x5378 <__mulsf3+0x1c>
    5370:	95 23       	and	r25, r21
    5372:	11 f0       	breq	.+4      	; 0x5378 <__mulsf3+0x1c>
    5374:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <__fp_inf>
    5378:	0c 94 21 2a 	jmp	0x5442	; 0x5442 <__fp_nan>
    537c:	11 24       	eor	r1, r1
    537e:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <__fp_szero>

00005382 <__mulsf3x>:
    5382:	0e 94 85 29 	call	0x530a	; 0x530a <__fp_split3>
    5386:	70 f3       	brcs	.-36     	; 0x5364 <__mulsf3+0x8>

00005388 <__mulsf3_pse>:
    5388:	95 9f       	mul	r25, r21
    538a:	c1 f3       	breq	.-16     	; 0x537c <__mulsf3+0x20>
    538c:	95 0f       	add	r25, r21
    538e:	50 e0       	ldi	r21, 0x00	; 0
    5390:	55 1f       	adc	r21, r21
    5392:	62 9f       	mul	r22, r18
    5394:	f0 01       	movw	r30, r0
    5396:	72 9f       	mul	r23, r18
    5398:	bb 27       	eor	r27, r27
    539a:	f0 0d       	add	r31, r0
    539c:	b1 1d       	adc	r27, r1
    539e:	63 9f       	mul	r22, r19
    53a0:	aa 27       	eor	r26, r26
    53a2:	f0 0d       	add	r31, r0
    53a4:	b1 1d       	adc	r27, r1
    53a6:	aa 1f       	adc	r26, r26
    53a8:	64 9f       	mul	r22, r20
    53aa:	66 27       	eor	r22, r22
    53ac:	b0 0d       	add	r27, r0
    53ae:	a1 1d       	adc	r26, r1
    53b0:	66 1f       	adc	r22, r22
    53b2:	82 9f       	mul	r24, r18
    53b4:	22 27       	eor	r18, r18
    53b6:	b0 0d       	add	r27, r0
    53b8:	a1 1d       	adc	r26, r1
    53ba:	62 1f       	adc	r22, r18
    53bc:	73 9f       	mul	r23, r19
    53be:	b0 0d       	add	r27, r0
    53c0:	a1 1d       	adc	r26, r1
    53c2:	62 1f       	adc	r22, r18
    53c4:	83 9f       	mul	r24, r19
    53c6:	a0 0d       	add	r26, r0
    53c8:	61 1d       	adc	r22, r1
    53ca:	22 1f       	adc	r18, r18
    53cc:	74 9f       	mul	r23, r20
    53ce:	33 27       	eor	r19, r19
    53d0:	a0 0d       	add	r26, r0
    53d2:	61 1d       	adc	r22, r1
    53d4:	23 1f       	adc	r18, r19
    53d6:	84 9f       	mul	r24, r20
    53d8:	60 0d       	add	r22, r0
    53da:	21 1d       	adc	r18, r1
    53dc:	82 2f       	mov	r24, r18
    53de:	76 2f       	mov	r23, r22
    53e0:	6a 2f       	mov	r22, r26
    53e2:	11 24       	eor	r1, r1
    53e4:	9f 57       	subi	r25, 0x7F	; 127
    53e6:	50 40       	sbci	r21, 0x00	; 0
    53e8:	9a f0       	brmi	.+38     	; 0x5410 <__mulsf3_pse+0x88>
    53ea:	f1 f0       	breq	.+60     	; 0x5428 <__mulsf3_pse+0xa0>
    53ec:	88 23       	and	r24, r24
    53ee:	4a f0       	brmi	.+18     	; 0x5402 <__mulsf3_pse+0x7a>
    53f0:	ee 0f       	add	r30, r30
    53f2:	ff 1f       	adc	r31, r31
    53f4:	bb 1f       	adc	r27, r27
    53f6:	66 1f       	adc	r22, r22
    53f8:	77 1f       	adc	r23, r23
    53fa:	88 1f       	adc	r24, r24
    53fc:	91 50       	subi	r25, 0x01	; 1
    53fe:	50 40       	sbci	r21, 0x00	; 0
    5400:	a9 f7       	brne	.-22     	; 0x53ec <__mulsf3_pse+0x64>
    5402:	9e 3f       	cpi	r25, 0xFE	; 254
    5404:	51 05       	cpc	r21, r1
    5406:	80 f0       	brcs	.+32     	; 0x5428 <__mulsf3_pse+0xa0>
    5408:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <__fp_inf>
    540c:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <__fp_szero>
    5410:	5f 3f       	cpi	r21, 0xFF	; 255
    5412:	e4 f3       	brlt	.-8      	; 0x540c <__mulsf3_pse+0x84>
    5414:	98 3e       	cpi	r25, 0xE8	; 232
    5416:	d4 f3       	brlt	.-12     	; 0x540c <__mulsf3_pse+0x84>
    5418:	86 95       	lsr	r24
    541a:	77 95       	ror	r23
    541c:	67 95       	ror	r22
    541e:	b7 95       	ror	r27
    5420:	f7 95       	ror	r31
    5422:	e7 95       	ror	r30
    5424:	9f 5f       	subi	r25, 0xFF	; 255
    5426:	c1 f7       	brne	.-16     	; 0x5418 <__mulsf3_pse+0x90>
    5428:	fe 2b       	or	r31, r30
    542a:	88 0f       	add	r24, r24
    542c:	91 1d       	adc	r25, r1
    542e:	96 95       	lsr	r25
    5430:	87 95       	ror	r24
    5432:	97 f9       	bld	r25, 7
    5434:	08 95       	ret

00005436 <__fp_inf>:
    5436:	97 f9       	bld	r25, 7
    5438:	9f 67       	ori	r25, 0x7F	; 127
    543a:	80 e8       	ldi	r24, 0x80	; 128
    543c:	70 e0       	ldi	r23, 0x00	; 0
    543e:	60 e0       	ldi	r22, 0x00	; 0
    5440:	08 95       	ret

00005442 <__fp_nan>:
    5442:	9f ef       	ldi	r25, 0xFF	; 255
    5444:	80 ec       	ldi	r24, 0xC0	; 192
    5446:	08 95       	ret

00005448 <__fp_pscA>:
    5448:	00 24       	eor	r0, r0
    544a:	0a 94       	dec	r0
    544c:	16 16       	cp	r1, r22
    544e:	17 06       	cpc	r1, r23
    5450:	18 06       	cpc	r1, r24
    5452:	09 06       	cpc	r0, r25
    5454:	08 95       	ret

00005456 <__fp_pscB>:
    5456:	00 24       	eor	r0, r0
    5458:	0a 94       	dec	r0
    545a:	12 16       	cp	r1, r18
    545c:	13 06       	cpc	r1, r19
    545e:	14 06       	cpc	r1, r20
    5460:	05 06       	cpc	r0, r21
    5462:	08 95       	ret

00005464 <__fp_round>:
    5464:	09 2e       	mov	r0, r25
    5466:	03 94       	inc	r0
    5468:	00 0c       	add	r0, r0
    546a:	11 f4       	brne	.+4      	; 0x5470 <__fp_round+0xc>
    546c:	88 23       	and	r24, r24
    546e:	52 f0       	brmi	.+20     	; 0x5484 <__fp_round+0x20>
    5470:	bb 0f       	add	r27, r27
    5472:	40 f4       	brcc	.+16     	; 0x5484 <__fp_round+0x20>
    5474:	bf 2b       	or	r27, r31
    5476:	11 f4       	brne	.+4      	; 0x547c <__fp_round+0x18>
    5478:	60 ff       	sbrs	r22, 0
    547a:	04 c0       	rjmp	.+8      	; 0x5484 <__fp_round+0x20>
    547c:	6f 5f       	subi	r22, 0xFF	; 255
    547e:	7f 4f       	sbci	r23, 0xFF	; 255
    5480:	8f 4f       	sbci	r24, 0xFF	; 255
    5482:	9f 4f       	sbci	r25, 0xFF	; 255
    5484:	08 95       	ret

00005486 <__udivmodqi4>:
    5486:	99 1b       	sub	r25, r25
    5488:	79 e0       	ldi	r23, 0x09	; 9
    548a:	04 c0       	rjmp	.+8      	; 0x5494 <__udivmodqi4_ep>

0000548c <__udivmodqi4_loop>:
    548c:	99 1f       	adc	r25, r25
    548e:	96 17       	cp	r25, r22
    5490:	08 f0       	brcs	.+2      	; 0x5494 <__udivmodqi4_ep>
    5492:	96 1b       	sub	r25, r22

00005494 <__udivmodqi4_ep>:
    5494:	88 1f       	adc	r24, r24
    5496:	7a 95       	dec	r23
    5498:	c9 f7       	brne	.-14     	; 0x548c <__udivmodqi4_loop>
    549a:	80 95       	com	r24
    549c:	08 95       	ret

0000549e <__divmodhi4>:
    549e:	97 fb       	bst	r25, 7
    54a0:	07 2e       	mov	r0, r23
    54a2:	16 f4       	brtc	.+4      	; 0x54a8 <__divmodhi4+0xa>
    54a4:	00 94       	com	r0
    54a6:	07 d0       	rcall	.+14     	; 0x54b6 <__divmodhi4_neg1>
    54a8:	77 fd       	sbrc	r23, 7
    54aa:	09 d0       	rcall	.+18     	; 0x54be <__divmodhi4_neg2>
    54ac:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__udivmodhi4>
    54b0:	07 fc       	sbrc	r0, 7
    54b2:	05 d0       	rcall	.+10     	; 0x54be <__divmodhi4_neg2>
    54b4:	3e f4       	brtc	.+14     	; 0x54c4 <__divmodhi4_exit>

000054b6 <__divmodhi4_neg1>:
    54b6:	90 95       	com	r25
    54b8:	81 95       	neg	r24
    54ba:	9f 4f       	sbci	r25, 0xFF	; 255
    54bc:	08 95       	ret

000054be <__divmodhi4_neg2>:
    54be:	70 95       	com	r23
    54c0:	61 95       	neg	r22
    54c2:	7f 4f       	sbci	r23, 0xFF	; 255

000054c4 <__divmodhi4_exit>:
    54c4:	08 95       	ret

000054c6 <__tablejump2__>:
    54c6:	ee 0f       	add	r30, r30
    54c8:	ff 1f       	adc	r31, r31
    54ca:	05 90       	lpm	r0, Z+
    54cc:	f4 91       	lpm	r31, Z
    54ce:	e0 2d       	mov	r30, r0
    54d0:	09 94       	ijmp

000054d2 <__udivmodhi4>:
    54d2:	aa 1b       	sub	r26, r26
    54d4:	bb 1b       	sub	r27, r27
    54d6:	51 e1       	ldi	r21, 0x11	; 17
    54d8:	07 c0       	rjmp	.+14     	; 0x54e8 <__udivmodhi4_ep>

000054da <__udivmodhi4_loop>:
    54da:	aa 1f       	adc	r26, r26
    54dc:	bb 1f       	adc	r27, r27
    54de:	a6 17       	cp	r26, r22
    54e0:	b7 07       	cpc	r27, r23
    54e2:	10 f0       	brcs	.+4      	; 0x54e8 <__udivmodhi4_ep>
    54e4:	a6 1b       	sub	r26, r22
    54e6:	b7 0b       	sbc	r27, r23

000054e8 <__udivmodhi4_ep>:
    54e8:	88 1f       	adc	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	5a 95       	dec	r21
    54ee:	a9 f7       	brne	.-22     	; 0x54da <__udivmodhi4_loop>
    54f0:	80 95       	com	r24
    54f2:	90 95       	com	r25
    54f4:	bc 01       	movw	r22, r24
    54f6:	cd 01       	movw	r24, r26
    54f8:	08 95       	ret

000054fa <eeprom_read_byte>:
    54fa:	f9 99       	sbic	0x1f, 1	; 31
    54fc:	fe cf       	rjmp	.-4      	; 0x54fa <eeprom_read_byte>
    54fe:	92 bd       	out	0x22, r25	; 34
    5500:	81 bd       	out	0x21, r24	; 33
    5502:	f8 9a       	sbi	0x1f, 0	; 31
    5504:	99 27       	eor	r25, r25
    5506:	80 b5       	in	r24, 0x20	; 32
    5508:	08 95       	ret

0000550a <eeprom_read_word>:
    550a:	a8 e1       	ldi	r26, 0x18	; 24
    550c:	b0 e0       	ldi	r27, 0x00	; 0
    550e:	42 e0       	ldi	r20, 0x02	; 2
    5510:	50 e0       	ldi	r21, 0x00	; 0
    5512:	0c 94 a0 2a 	jmp	0x5540	; 0x5540 <eeprom_read_blraw>

00005516 <eeprom_write_byte>:
    5516:	26 2f       	mov	r18, r22

00005518 <eeprom_write_r18>:
    5518:	f9 99       	sbic	0x1f, 1	; 31
    551a:	fe cf       	rjmp	.-4      	; 0x5518 <eeprom_write_r18>
    551c:	1f ba       	out	0x1f, r1	; 31
    551e:	92 bd       	out	0x22, r25	; 34
    5520:	81 bd       	out	0x21, r24	; 33
    5522:	20 bd       	out	0x20, r18	; 32
    5524:	0f b6       	in	r0, 0x3f	; 63
    5526:	f8 94       	cli
    5528:	fa 9a       	sbi	0x1f, 2	; 31
    552a:	f9 9a       	sbi	0x1f, 1	; 31
    552c:	0f be       	out	0x3f, r0	; 63
    552e:	01 96       	adiw	r24, 0x01	; 1
    5530:	08 95       	ret

00005532 <eeprom_write_word>:
    5532:	0e 94 8b 2a 	call	0x5516	; 0x5516 <eeprom_write_byte>
    5536:	27 2f       	mov	r18, r23
    5538:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <eeprom_write_r18>

0000553c <eeprom_read_block>:
    553c:	dc 01       	movw	r26, r24
    553e:	cb 01       	movw	r24, r22

00005540 <eeprom_read_blraw>:
    5540:	fc 01       	movw	r30, r24
    5542:	f9 99       	sbic	0x1f, 1	; 31
    5544:	fe cf       	rjmp	.-4      	; 0x5542 <eeprom_read_blraw+0x2>
    5546:	06 c0       	rjmp	.+12     	; 0x5554 <eeprom_read_blraw+0x14>
    5548:	f2 bd       	out	0x22, r31	; 34
    554a:	e1 bd       	out	0x21, r30	; 33
    554c:	f8 9a       	sbi	0x1f, 0	; 31
    554e:	31 96       	adiw	r30, 0x01	; 1
    5550:	00 b4       	in	r0, 0x20	; 32
    5552:	0d 92       	st	X+, r0
    5554:	41 50       	subi	r20, 0x01	; 1
    5556:	50 40       	sbci	r21, 0x00	; 0
    5558:	b8 f7       	brcc	.-18     	; 0x5548 <eeprom_read_blraw+0x8>
    555a:	08 95       	ret

0000555c <_exit>:
    555c:	f8 94       	cli

0000555e <__stop_program>:
    555e:	ff cf       	rjmp	.-2      	; 0x555e <__stop_program>

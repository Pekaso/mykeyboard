
gh60_lufa.elf:     ファイル形式 elf32-avr

セクション:
索引名          サイズ      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000055cc  00005660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800138  00800138  00005698  2**0
                  ALLOC
  3 .noinit       00000004  008001ec  008001ec  00005698  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005698  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005fc3  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005fd4  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000928  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000febf  00000000  00000000  0000693c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004278  00000000  00000000  000167fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007885  00000000  00000000  0001aa73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a40  00000000  00000000  000222f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041ff  00000000  00000000  00023d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007d45  00000000  00000000  00027f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002fc7c  2**0
                  CONTENTS, READONLY, DEBUGGING

セクション .text の逆アセンブル:

00000000 <__vectors>:
       0:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__ctors_end>
       4:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
       8:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
       c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      10:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      14:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      18:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      1c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      20:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      24:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      28:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__vector_10>
      2c:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__vector_11>
      30:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__vector_12>
      34:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      38:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      3c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      40:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      44:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      48:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      4c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      50:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      54:	0c 94 13 1e 	jmp	0x3c26	; 0x3c26 <__vector_21>
      58:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      5c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      60:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      64:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      68:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      6c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      70:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      74:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      78:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      7c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      80:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      84:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      88:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      8c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      90:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      94:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      98:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      9c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      a0:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      a4:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      a8:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__bad_interrupt>
      ac:	b6 0f       	add	r27, r22
      ae:	d8 0f       	add	r29, r24
      b0:	cb 10       	cpse	r12, r11
      b2:	d8 0f       	add	r29, r24
      b4:	cb 10       	cpse	r12, r11
      b6:	1d 10       	cpse	r1, r13
      b8:	40 10       	cpse	r4, r0
      ba:	cb 10       	cpse	r12, r11
      bc:	95 10       	cpse	r9, r5
      be:	a8 10       	cpse	r10, r8
      c0:	00 14       	cp	r0, r0
      c2:	00 14       	cp	r0, r0
      c4:	2e 14       	cp	r2, r14
      c6:	2e 14       	cp	r2, r14
      c8:	8b 14       	cp	r8, r11
      ca:	c5 14       	cp	r12, r5
      cc:	c2 16       	cp	r12, r18
      ce:	c2 16       	cp	r12, r18
      d0:	de 14       	cp	r13, r14
      d2:	c2 16       	cp	r12, r18
      d4:	d3 15       	cp	r29, r3
      d6:	d3 15       	cp	r29, r3
      d8:	96 16       	cp	r9, r22
      da:	c2 16       	cp	r12, r18
      dc:	c2 16       	cp	r12, r18
      de:	ad 16       	cp	r10, r29

000000e0 <__trampolines_end>:
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21
      e2:	04 8a       	std	Z+20, r0	; 0x14
      e4:	f1 a3       	std	Z+33, r31	; 0x21

000000e6 <keymaps>:
      e6:	29 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 c1 4c 35     ):;<=>?@ABCDE.L5
      f6:	1e 1f 20 21 22 23 24 25 26 27 2d 2e 00 2a 2b 14     .. !"#$%&'-..*+.
     106:	1a 08 15 17 1c 18 0c 12 13 2f 30 00 31 e0 04 16     ........./0.1...
     116:	07 09 0a 0b 0d 0e 0f 33 34 00 28 00 e1 1d 1b 06     .......34.(.....
     126:	19 05 11 10 36 37 38 00 e5 00 00 00 e3 e2 00 00     ....678.........
     136:	2c 00 00 00 c0 c2 00 00 00 00 01 01 01 01 01 01     ,...............
     146:	01 ac b0 ab a8 aa a9 01 01 01 01 01 01 01 01 01     ................
     156:	01 01 01 01 01 01 00 01 01 01 01 01 01 01 01 01     ................
     166:	46 47 48 52 01 00 01 01 01 01 01 01 01 01 01 4a     FGHR...........J
     176:	4b 50 4f 00 01 00 01 01 01 01 01 01 01 01 4d 4e     KPO...........MN
     186:	51 00 01 00 00 00 01 01 00 00 01 00 00 00 01 01     Q...............
     196:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1a6:	01 01 01 01 13 14 0e 25 1f 1b 17 04 22 0d 01 01     .......%...."...
     1b6:	00 01 01 08 0f 12 0c 06 0b 21 27 18 07 01 01 00     .........!'.....
     1c6:	01 01 0a 1c 15 1a 20 27 11 23 10 01 01 00 01 00     ...... '.#......
     1d6:	01 05 09 1e 1d 16 1d 24 01 01 01 00 01 00 00 00     .......$........
     1e6:	01 01 00 00 01 00 00 00 01 01 00 00 00 00 01 01     ................
     1f6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     206:	01 01 01 01 01 01 01 01 01 01 00 01 01 f4 01 f5     ................
     216:	01 01 01 01 01 01 01 f0 01 00 01 01 01 01 01 01     ................
     226:	01 01 01 01 01 f2 f3 00 01 00 01 01 01 01 01 01     ................
     236:	01 01 01 01 f1 00 01 00 00 00 01 01 00 00 01 00     ................
     246:	00 00 01 01 00 00 00 00                             ........

0000024e <__c.2030>:
     24e:	0a 00                                               ..

00000250 <__c.2028>:
     250:	25 30 31 36 62 00                                   %016b.

00000256 <__c.2026>:
     256:	3a 20 00                                            : .

00000259 <__c.2024>:
     259:	25 30 32 58 00                                      %02X.

0000025e <__c.2021>:
     25e:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     26e:	42 43 44 45 46 0a 00                                BCDEF..

00000275 <__c.1999>:
     275:	0a 00                                               ..

00000277 <__c.1997>:
     277:	25 30 32 58 00                                      %02X.

0000027c <__c.1995>:
     27c:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000286 <__c.4977>:
     286:	5b 73 5d 00                                         [s].

0000028a <__c.4975>:
     28a:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     29a:	00                                                  .

0000029b <__c.4973>:
     29b:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     2ab:	00                                                  .

000002ac <__c.4871>:
     2ac:	5b 57 5d 00                                         [W].

000002b0 <__c.4867>:
     2b0:	5b 53 5d 00                                         [S].

000002b4 <__c.4863>:
     2b4:	5b 52 5d 00                                         [R].

000002b8 <__c.4858>:
     2b8:	5b 44 5d 00                                         [D].

000002bc <__c.4853>:
     2bc:	5b 43 5d 00                                         [C].

000002c0 <ProductString>:
     2c0:	18 03 42 00 6c 00 75 00 6e 00 74 00 57 00 65 00     ..B.l.u.n.t.W.e.
     2d0:	61 00 70 00 6f 00 6e 00 00 00                       a.p.o.n...

000002da <ManufacturerString>:
     2da:	0e 03 50 00 65 00 6b 00 61 00 73 00 6f 00 00 00     ..P.e.k.a.s.o...

000002ea <LanguageString>:
     2ea:	04 03 09 04                                         ....

000002ee <ConfigurationDescriptor>:
     2ee:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     2fe:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     30e:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     31e:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     32e:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     33e:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     34e:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     35e:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     36e:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

0000037b <DeviceDescriptor>:
     37b:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     38b:	00 01                                               ..

0000038d <NKROReport>:
     38d:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     39d:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     3ad:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     3bd:	25 01 95 78 75 01 81 02 c0                          %..xu....

000003c6 <ConsoleReport>:
     3c6:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     3d6:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     3e6:	02 c0                                               ..

000003e8 <ExtrakeyReport>:
     3e8:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     3f8:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     408:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     418:	10 95 01 81 00 c0                                   ......

0000041e <MouseReport>:
     41e:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     42e:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     43e:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     44e:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     45e:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000046b <KeyboardReport>:
     46b:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     47b:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     48b:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     49b:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

000004ab <__c.4591>:
     4ab:	0a 00                                               ..

000004ad <__c.4586>:
     4ad:	25 30 32 58 20 00                                   %02X .

000004b3 <__c.4583>:
     4b3:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     4c3:	20 00                                                .

000004c5 <__c.4946>:
     4c5:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000004d0 <__c.4731>:
     4d0:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     4e0:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000004ee <__c.4726>:
     4ee:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     4fe:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000050c <__c.4896>:
     50c:	64 6f 6e 65 2e 0a 00                                done...

00000513 <__c.4890>:
     513:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     523:	2e 2e 2e 20 00                                      ... .

00000528 <__c.4663>:
     528:	29 0a 00                                            )..

0000052b <__c.4661>:
     52b:	25 75 00                                            %u.

0000052e <__c.4659>:
     52e:	2f 00                                               /.

00000530 <__c.4657>:
     530:	25 75 00                                            %u.

00000533 <__c.4655>:
     533:	5d 28 00                                            ](.

00000536 <__c.4653>:
     536:	25 64 00                                            %d.

00000539 <__c.4651>:
     539:	20 00                                                .

0000053b <__c.4649>:
     53b:	25 64 00                                            %d.

0000053e <__c.4647>:
     53e:	20 00                                                .

00000540 <__c.4645>:
     540:	25 64 00                                            %d.

00000543 <__c.4643>:
     543:	20 00                                                .

00000545 <__c.4641>:
     545:	25 64 00                                            %d.

00000548 <__c.4639>:
     548:	7c 00                                               |.

0000054a <__c.4637>:
     54a:	25 30 32 58 00                                      %02X.

0000054f <__c.4635>:
     54f:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     55f:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     56f:	20 5b 00                                             [.

00000572 <__c.5260>:
     572:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     582:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000058d <__c.5257>:
     58d:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     59d:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005a6 <__c.5254>:
     5a6:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5b6:	20 25 64 0a 00                                       %d..

000005bb <__c.5251>:
     5bb:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5cb:	64 0a 00                                            d..

000005ce <__c.5248>:
     5ce:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     5de:	0a 00                                               ..

000005e0 <__c.5244>:
     5e0:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005ef <__c.5237>:
     5ef:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     5ff:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000060a <__c.5234>:
     60a:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     61a:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000623 <__c.5231>:
     623:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     633:	20 25 64 0a 00                                       %d..

00000638 <__c.5228>:
     638:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     648:	64 0a 00                                            d..

0000064b <__c.5225>:
     64b:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     65b:	0a 00                                               ..

0000065d <__c.5221>:
     65d:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000066c <__c.5214>:
     66c:	0a 00                                               ..

0000066e <__c.5212>:
     66e:	25 75 00                                            %u.

00000671 <__c.5210>:
     671:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     681:	5f 6d 61 78 3a 20 00                                _max: .

00000688 <__c.5208>:
     688:	0a 00                                               ..

0000068a <__c.5206>:
     68a:	25 75 00                                            %u.

0000068d <__c.5204>:
     68d:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     69d:	65 64 3a 20 00                                      ed: .

000006a2 <__c.5202>:
     6a2:	0a 00                                               ..

000006a4 <__c.5200>:
     6a4:	25 75 00                                            %u.

000006a7 <__c.5198>:
     6a7:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     6b7:	00                                                  .

000006b8 <__c.5196>:
     6b8:	0a 00                                               ..

000006ba <__c.5194>:
     6ba:	25 75 00                                            %u.

000006bd <__c.5192>:
     6bd:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000006cc <__c.5190>:
     6cc:	0a 00                                               ..

000006ce <__c.5188>:
     6ce:	25 75 00                                            %u.

000006d1 <__c.5186>:
     6d1:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     6e1:	20 00                                                .

000006e3 <__c.5184>:
     6e3:	0a 00                                               ..

000006e5 <__c.5182>:
     6e5:	25 75 00                                            %u.

000006e8 <__c.5180>:
     6e8:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     6f8:	20 00                                                .

000006fa <__c.5178>:
     6fa:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000708 <__c.5298>:
     708:	4d 3e 00                                            M>.

0000070b <__c.5296>:
     70b:	4d 25 64 3e 20 00                                   M%d> .

00000711 <__c.5294>:
     711:	3f 00                                               ?.

00000713 <__c.5291>:
     713:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000720 <__c.5277>:
     720:	43 3e 20 00                                         C> .

00000724 <__c.5267>:
     724:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     734:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     744:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     754:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     764:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000772 <__c.5265>:
     772:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     782:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     792:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     7a2:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     7b2:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     7c2:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     7d2:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     7e2:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     7f2:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     802:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     812:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     822:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     832:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     842:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     852:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     862:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000086d <__c.5170>:
     86d:	3f 00                                               ?.

0000086f <__c.5167>:
     86f:	4d 3e 20 00                                         M> .

00000873 <__c.5172>:
     873:	43 3e 20 00                                         C> .

00000877 <__c.5316>:
     877:	4c 25 64 0a 00                                      L%d..

0000087c <__c.5156>:
     87c:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     88c:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     89c:	73 65 6b 65 79 0a 00                                sekey..

000008a3 <__c.4981>:
     8a3:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     8b3:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     8c3:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     8d3:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     8e3:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     8f3:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     903:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     913:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     923:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     933:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     943:	4b 52 4f 0a 00                                      KRO..

00000948 <__c.5076>:
     948:	0a 00                                               ..

0000094a <__c.5074>:
     94a:	25 75 00                                            %u.

0000094d <__c.5072>:
     94d:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000955 <__c.5070>:
     955:	0a 00                                               ..

00000957 <__c.5068>:
     957:	25 75 00                                            %u.

0000095a <__c.5066>:
     95a:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     96a:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000976 <__c.5064>:
     976:	0a 00                                               ..

00000978 <__c.5062>:
     978:	25 75 00                                            %u.

0000097b <__c.5060>:
     97b:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     98b:	20 00                                                .

0000098d <__c.5058>:
     98d:	0a 00                                               ..

0000098f <__c.5056>:
     98f:	25 75 00                                            %u.

00000992 <__c.5054>:
     992:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

0000099c <__c.5052>:
     99c:	0a 00                                               ..

0000099e <__c.5050>:
     99e:	25 75 00                                            %u.

000009a1 <__c.5048>:
     9a1:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     9b1:	20 00                                                .

000009b3 <__c.5046>:
     9b3:	0a 00                                               ..

000009b5 <__c.5044>:
     9b5:	25 75 00                                            %u.

000009b8 <__c.5042>:
     9b8:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     9c8:	20 00                                                .

000009ca <__c.5040>:
     9ca:	0a 00                                               ..

000009cc <__c.5038>:
     9cc:	25 75 00                                            %u.

000009cf <__c.5036>:
     9cf:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     9df:	74 72 6f 6c 3a 20 00                                trol: .

000009e6 <__c.5034>:
     9e6:	0a 00                                               ..

000009e8 <__c.5032>:
     9e8:	25 75 00                                            %u.

000009eb <__c.5030>:
     9eb:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     9fb:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000a04 <__c.5028>:
     a04:	0a 00                                               ..

00000a06 <__c.5026>:
     a06:	25 30 32 58 00                                      %02X.

00000a0b <__c.5024>:
     a0b:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     a1b:	77 3a 20 00                                         w: .

00000a1f <__c.5021>:
     a1f:	0a 00                                               ..

00000a21 <__c.5019>:
     a21:	25 75 00                                            %u.

00000a24 <__c.5017>:
     a24:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000a2d <__c.5015>:
     a2d:	0a 00                                               ..

00000a2f <__c.5013>:
     a2f:	25 75 00                                            %u.

00000a32 <__c.5011>:
     a32:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000a3e <__c.5009>:
     a3e:	0a 00                                               ..

00000a40 <__c.5007>:
     a40:	25 75 00                                            %u.

00000a43 <__c.5005>:
     a43:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000a4d <__c.5003>:
     a4d:	0a 00                                               ..

00000a4f <__c.5001>:
     a4f:	25 75 00                                            %u.

00000a52 <__c.4999>:
     a52:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000a5c <__c.4997>:
     a5c:	0a 00                                               ..

00000a5e <__c.4995>:
     a5e:	25 30 32 58 00                                      %02X.

00000a63 <__c.4993>:
     a63:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     a73:	3a 20 00                                            : .

00000a76 <__c.4990>:
     a76:	0a 00                                               ..

00000a78 <__c.4988>:
     a78:	25 75 00                                            %u.

00000a7b <__c.4986>:
     a7b:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000a8b <__c.5151>:
     a8b:	3f 00                                               ?.

00000a8d <__c.5142>:
     a8d:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000a98 <__c.5140>:
     a98:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000aa2 <__c.5137>:
     aa2:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     ab2:	25 30 34 6c 58 0a 00                                %04lX..

00000ab9 <__c.5135>:
     ab9:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     ac9:	58 0a 00                                            X..

00000acc <__c.5133>:
     acc:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     adc:	58 0a 00                                            X..

00000adf <__c.5131>:
     adf:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     aef:	6c 3a 20 25 58 0a 00                                l: %X..

00000af6 <__c.5129>:
     af6:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     b06:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000b10 <__c.5127>:
     b10:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000b1e <__c.5124>:
     b1e:	47 43 43 3a 20 35 2e 33 2e 30 20 41 56 52 2d 4c     GCC: 5.3.0 AVR-L
     b2e:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     b3e:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000b49 <__c.5122>:
     b49:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     b59:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     b69:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     b79:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     b89:	30 39 36 0a 00                                      096..

00000b8e <__c.5120>:
     b8e:	42 55 49 4c 44 3a 20 39 62 39 38 61 32 34 2d 64     BUILD: 9b98a24-d
     b9e:	69 72 74 79 20 28 30 30 3a 32 30 3a 30 34 20 4a     irty (00:20:04 J
     bae:	75 6c 20 31 38 20 32 30 31 36 29 0a 00              ul 18 2016)..

00000bbb <__c.5118>:
     bbb:	56 49 44 3a 20 30 78 46 45 45 44 28 50 65 6b 61     VID: 0xFEED(Peka
     bcb:	73 6f 29 20 50 49 44 3a 20 30 78 36 30 36 30 28     so) PID: 0x6060(
     bdb:	42 6c 75 6e 74 57 65 61 70 6f 6e 29 20 56 45 52     BluntWeapon) VER
     beb:	3a 20 30 78 30 30 30 31 0a 00                       : 0x0001..

00000bf5 <__c.5116>:
     bf5:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     c05:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     c15:	6f 72 20 50 65 6b 61 73 6f 0a 00                    or Pekaso..

00000c20 <__c.5114>:
     c20:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000c2f <__c.5111>:
     c2f:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000c3c <__c.5109>:
     c3c:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000c48 <__c.5106>:
     c48:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000c58 <__c.5104>:
     c58:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000c67 <__c.5101>:
     c67:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000c75 <__c.5099>:
     c75:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000c82 <__c.5096>:
     c82:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000c8e <__c.5094>:
     c8e:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c9b <__c.5091>:
     c9b:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     cab:	00                                                  .

00000cac <__c.5088>:
     cac:	43 3e 20 00                                         C> .

00000cb0 <__c.5082>:
     cb0:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000cbc <__ctors_end>:
     cbc:	11 24       	eor	r1, r1
     cbe:	1f be       	out	0x3f, r1	; 63
     cc0:	cf ef       	ldi	r28, 0xFF	; 255
     cc2:	da e0       	ldi	r29, 0x0A	; 10
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	cd bf       	out	0x3d, r28	; 61

00000cc8 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     cc8:	04 b6       	in	r0, 0x34	; 52
     cca:	03 fe       	sbrs	r0, 3
     ccc:	27 c0       	rjmp	.+78     	; 0xd1c <__do_copy_data>
     cce:	80 91 ec 01 	lds	r24, 0x01EC
     cd2:	90 91 ed 01 	lds	r25, 0x01ED
     cd6:	a0 91 ee 01 	lds	r26, 0x01EE
     cda:	b0 91 ef 01 	lds	r27, 0x01EF
     cde:	87 30       	cpi	r24, 0x07	; 7
     ce0:	90 4b       	sbci	r25, 0xB0	; 176
     ce2:	a7 40       	sbci	r26, 0x07	; 7
     ce4:	b0 4b       	sbci	r27, 0xB0	; 176
     ce6:	d1 f4       	brne	.+52     	; 0xd1c <__do_copy_data>
        reset_key = 0;
     ce8:	10 92 ec 01 	sts	0x01EC, r1
     cec:	10 92 ed 01 	sts	0x01ED, r1
     cf0:	10 92 ee 01 	sts	0x01EE, r1
     cf4:	10 92 ef 01 	sts	0x01EF, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     cf8:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     cfa:	84 b7       	in	r24, 0x34	; 52
     cfc:	87 7f       	andi	r24, 0xF7	; 247
     cfe:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	a8 95       	wdr
     d06:	80 91 60 00 	lds	r24, 0x0060
     d0a:	88 61       	ori	r24, 0x18	; 24
     d0c:	80 93 60 00 	sts	0x0060, r24
     d10:	10 92 60 00 	sts	0x0060, r1
     d14:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     d16:	e0 e0       	ldi	r30, 0x00	; 0
     d18:	f8 e3       	ldi	r31, 0x38	; 56
     d1a:	09 95       	icall

00000d1c <__do_copy_data>:
     d1c:	11 e0       	ldi	r17, 0x01	; 1
     d1e:	a0 e0       	ldi	r26, 0x00	; 0
     d20:	b1 e0       	ldi	r27, 0x01	; 1
     d22:	ec ec       	ldi	r30, 0xCC	; 204
     d24:	f5 e5       	ldi	r31, 0x55	; 85
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <__do_copy_data+0x10>
     d28:	05 90       	lpm	r0, Z+
     d2a:	0d 92       	st	X+, r0
     d2c:	a8 33       	cpi	r26, 0x38	; 56
     d2e:	b1 07       	cpc	r27, r17
     d30:	d9 f7       	brne	.-10     	; 0xd28 <__do_copy_data+0xc>

00000d32 <__do_clear_bss>:
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	a8 e3       	ldi	r26, 0x38	; 56
     d36:	b1 e0       	ldi	r27, 0x01	; 1
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <.do_clear_bss_start>

00000d3a <.do_clear_bss_loop>:
     d3a:	1d 92       	st	X+, r1

00000d3c <.do_clear_bss_start>:
     d3c:	ac 3e       	cpi	r26, 0xEC	; 236
     d3e:	b2 07       	cpc	r27, r18
     d40:	e1 f7       	brne	.-8      	; 0xd3a <.do_clear_bss_loop>
     d42:	0e 94 ac 0b 	call	0x1758	; 0x1758 <main>
     d46:	0c 94 e4 2a 	jmp	0x55c8	; 0x55c8 <_exit>

00000d4a <__bad_interrupt>:
     d4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d4e <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     d4e:	ff 93       	push	r31
	push	ZL
     d50:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     d52:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     d56:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     d5a:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     d5c:	09 f0       	breq	.+2      	; 0xd60 <xputc+0x12>
	icall
     d5e:	09 95       	icall
2:	pop	ZL
     d60:	ef 91       	pop	r30
	pop	ZH
     d62:	ff 91       	pop	r31
	ret
     d64:	08 95       	ret

00000d66 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     d66:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     d68:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     d6a:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     d6c:	11 f0       	breq	.+4      	; 0xd72 <xputs+0xc>
	rcall	xputc
     d6e:	ef df       	rcall	.-34     	; 0xd4e <xputc>
	rjmp	1b
     d70:	fb cf       	rjmp	.-10     	; 0xd68 <xputs+0x2>
2:	ret
     d72:	08 95       	ret

00000d74 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     d74:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     d76:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     d78:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     d7a:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     d7c:	0c c0       	rjmp	.+24     	; 0xd96 <xitoa+0x22>
	neg	r20		;
     d7e:	41 95       	neg	r20
	sbrs	r25, 7		;
     d80:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <xitoa+0x22>
	ldi	r30, '-'	;
     d84:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     d86:	60 95       	com	r22
	com	r23		;
     d88:	70 95       	com	r23
	com	r24		;
     d8a:	80 95       	com	r24
	com	r25		;
     d8c:	90 95       	com	r25
	adc	r22, r1		;
     d8e:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     d90:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d92:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d94:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d96:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <xitoa+0x2a>
	neg	r18		;
     d9a:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d9c:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d9e:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     da0:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     da2:	66 0f       	add	r22, r22
	rol	r23		;
     da4:	77 1f       	adc	r23, r23
	rol	r24		;
     da6:	88 1f       	adc	r24, r24
	rol	r25		;
     da8:	99 1f       	adc	r25, r25
	rol	r26		;
     daa:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     dac:	a4 17       	cp	r26, r20
	brcs	3f		;
     dae:	10 f0       	brcs	.+4      	; 0xdb4 <xitoa+0x40>
	sub	r26, r20	;
     db0:	a4 1b       	sub	r26, r20
	inc	r22		;
     db2:	63 95       	inc	r22
3:	dec	r21		;
     db4:	5a 95       	dec	r21
	brne	2b		;/
     db6:	a9 f7       	brne	.-22     	; 0xda2 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     db8:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     dba:	08 f0       	brcs	.+2      	; 0xdbe <xitoa+0x4a>
	subi	r26, -7		;
     dbc:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     dbe:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     dc0:	af 93       	push	r26
	inc	r31		;/
     dc2:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     dc4:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     dc6:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     dc8:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     dca:	91 05       	cpc	r25, r1
	brne	1b		;/
     dcc:	41 f7       	brne	.-48     	; 0xd9e <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     dce:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <xitoa+0x62>
	push	r30		;
     dd2:	ef 93       	push	r30
	inc	r31		;/
     dd4:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     dd6:	f2 17       	cp	r31, r18
	brcc	6f		;
     dd8:	18 f4       	brcc	.+6      	; 0xde0 <xitoa+0x6c>
	push	r19		;
     dda:	3f 93       	push	r19
	inc	r31		;
     ddc:	f3 95       	inc	r31
	rjmp	5b		;/
     dde:	fb cf       	rjmp	.-10     	; 0xdd6 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     de0:	8f 91       	pop	r24
	rcall	xputc		;
     de2:	b5 df       	rcall	.-150    	; 0xd4e <xputc>
	dec	r31		;
     de4:	fa 95       	dec	r31
	brne	6b		;/
     de6:	e1 f7       	brne	.-8      	; 0xde0 <xitoa+0x6c>

	ret
     de8:	08 95       	ret

00000dea <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     dea:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     dec:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     dee:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     df0:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     df2:	21 f0       	breq	.+8      	; 0xdfc <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     df4:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     df6:	19 f0       	breq	.+6      	; 0xdfe <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     df8:	aa df       	rcall	.-172    	; 0xd4e <xputc>
	rjmp	0b		;/
     dfa:	f9 cf       	rjmp	.-14     	; 0xdee <xvprintf+0x4>
90:	ret
     dfc:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     dfe:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     e00:	e8 94       	clt
	_LPMI	r21		;Get flags
     e02:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     e04:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     e06:	c1 f3       	breq	.-16     	; 0xdf8 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     e08:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     e0a:	11 f4       	brne	.+4      	; 0xe10 <xvprintf+0x26>
	set			;/
     e0c:	68 94       	set
22:	_LPMI	r21		;Get width
     e0e:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     e10:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     e12:	48 f4       	brcc	.+18     	; 0xe26 <xvprintf+0x3c>
	subi	r21, '0'	;
     e14:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     e16:	90 f3       	brcs	.-28     	; 0xdfc <xvprintf+0x12>
	lsl	r18		;
     e18:	22 0f       	add	r18, r18
	mov	r0, r18		;
     e1a:	02 2e       	mov	r0, r18
	lsl	r18		;
     e1c:	22 0f       	add	r18, r18
	lsl	r18		;
     e1e:	22 0f       	add	r18, r18
	add	r18, r0		;
     e20:	20 0d       	add	r18, r0
	add	r18, r21	;
     e22:	25 0f       	add	r18, r21
	rjmp	22b		;/
     e24:	f4 cf       	rjmp	.-24     	; 0xe0e <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     e26:	0e f4       	brtc	.+2      	; 0xe2a <xvprintf+0x40>
	neg	r18		;
     e28:	21 95       	neg	r18
25:	ld	r24, Y+		;
     e2a:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     e2c:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     e2e:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     e30:	19 f3       	breq	.-58     	; 0xdf8 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     e32:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     e34:	29 f1       	breq	.+74     	; 0xe80 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     e36:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     e38:	59 f1       	breq	.+86     	; 0xe90 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     e3a:	bc 01       	movw	r22, r24
	clr	r24		;
     e3c:	88 27       	eor	r24, r24
	clr	r25		;
     e3e:	99 27       	eor	r25, r25
	clt			;/
     e40:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     e42:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     e44:	21 f4       	brne	.+8      	; 0xe4e <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     e46:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     e48:	99 91       	ld	r25, Y+
	set			;
     e4a:	68 94       	set
	_LPMI	r21		;/
     e4c:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     e4e:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     e50:	39 f4       	brne	.+14     	; 0xe60 <xvprintf+0x76>
	ldi	r20, -10	;
     e52:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     e54:	7e f0       	brts	.+30     	; 0xe74 <xvprintf+0x8a>
	sbrs	r23, 7		;
     e56:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     e58:	0d c0       	rjmp	.+26     	; 0xe74 <xvprintf+0x8a>
	ldi	r24, -1		;
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     e5c:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     e5e:	0a c0       	rjmp	.+20     	; 0xe74 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     e60:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     e62:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     e64:	39 f0       	breq	.+14     	; 0xe74 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     e66:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     e68:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     e6a:	21 f0       	breq	.+8      	; 0xe74 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     e6c:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     e6e:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     e70:	09 f0       	breq	.+2      	; 0xe74 <xvprintf+0x8a>
	ret			;abort
     e72:	08 95       	ret
40:	push	ZH		;Output the value
     e74:	ff 93       	push	r31
	push	ZL		;
     e76:	ef 93       	push	r30
	rcall	xitoa		;
     e78:	7d df       	rcall	.-262    	; 0xd74 <xitoa>
42:	pop	ZL		;
     e7a:	ef 91       	pop	r30
	pop	ZH		;
     e7c:	ff 91       	pop	r31
	rjmp	0b		;/
     e7e:	b7 cf       	rjmp	.-146    	; 0xdee <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     e80:	ff 93       	push	r31
	push	ZL
     e82:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     e84:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     e86:	81 91       	ld	r24, Z+
	cpi	r24, 0
     e88:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     e8a:	b9 f3       	breq	.-18     	; 0xe7a <xvprintf+0x90>
	rcall	xputc
     e8c:	60 df       	rcall	.-320    	; 0xd4e <xputc>
	rjmp	51b
     e8e:	fb cf       	rjmp	.-10     	; 0xe86 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     e90:	ff 93       	push	r31
	push	ZL
     e92:	ef 93       	push	r30
	rcall	xputs
     e94:	68 df       	rcall	.-304    	; 0xd66 <xputs>
	rjmp	42b
     e96:	f1 cf       	rjmp	.-30     	; 0xe7a <xvprintf+0x90>

00000e98 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e98:	df 93       	push	r29
	push	YL
     e9a:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e9c:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e9e:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     ea0:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     ea2:	a3 df       	rcall	.-186    	; 0xdea <xvprintf>
	pop	YL
     ea4:	cf 91       	pop	r28
	pop	YH
     ea6:	df 91       	pop	r29
	ret
     ea8:	08 95       	ret

00000eaa <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     eaa:	2a e5       	ldi	r18, 0x5A	; 90
     eac:	82 9f       	mul	r24, r18
     eae:	c0 01       	movw	r24, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	fc 01       	movw	r30, r24
     eb4:	2f e0       	ldi	r18, 0x0F	; 15
     eb6:	72 9f       	mul	r23, r18
     eb8:	e0 0d       	add	r30, r0
     eba:	f1 1d       	adc	r31, r1
     ebc:	11 24       	eor	r1, r1
     ebe:	e6 0f       	add	r30, r22
     ec0:	f1 1d       	adc	r31, r1
     ec2:	ea 51       	subi	r30, 0x1A	; 26
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	84 91       	lpm	r24, Z
}
     ec8:	08 95       	ret

00000eca <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     eca:	e8 2f       	mov	r30, r24
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e0 5a       	subi	r30, 0xA0	; 160
     ed4:	f0 40       	sbci	r31, 0x00	; 0
     ed6:	85 91       	lpm	r24, Z+
     ed8:	94 91       	lpm	r25, Z
}
     eda:	08 95       	ret

00000edc <unselect_rows>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
     edc:	80 b3       	in	r24, 0x10	; 16
     ede:	8c 70       	andi	r24, 0x0C	; 12
     ee0:	80 bb       	out	0x10, r24	; 16
     ee2:	81 b3       	in	r24, 0x11	; 17
     ee4:	8c 70       	andi	r24, 0x0C	; 12
     ee6:	81 bb       	out	0x11, r24	; 17
     ee8:	08 95       	ret

00000eea <matrix_init>:
     eea:	0e 94 6e 07 	call	0xedc	; 0xedc <unselect_rows>
     eee:	84 b1       	in	r24, 0x04	; 4
     ef0:	81 70       	andi	r24, 0x01	; 1
     ef2:	84 b9       	out	0x04, r24	; 4
     ef4:	85 b1       	in	r24, 0x05	; 5
     ef6:	8e 6f       	ori	r24, 0xFE	; 254
     ef8:	85 b9       	out	0x05, r24	; 5
     efa:	8a b1       	in	r24, 0x0a	; 10
     efc:	80 73       	andi	r24, 0x30	; 48
     efe:	8a b9       	out	0x0a, r24	; 10
     f00:	8b b1       	in	r24, 0x0b	; 11
     f02:	8f 6c       	ori	r24, 0xCF	; 207
     f04:	8b b9       	out	0x0b, r24	; 11
     f06:	87 b1       	in	r24, 0x07	; 7
     f08:	8f 73       	andi	r24, 0x3F	; 63
     f0a:	87 b9       	out	0x07, r24	; 7
     f0c:	88 b1       	in	r24, 0x08	; 8
     f0e:	80 6c       	ori	r24, 0xC0	; 192
     f10:	88 b9       	out	0x08, r24	; 8
     f12:	e6 e4       	ldi	r30, 0x46	; 70
     f14:	f1 e0       	ldi	r31, 0x01	; 1
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b1 e0       	ldi	r27, 0x01	; 1
     f1a:	11 92       	st	Z+, r1
     f1c:	11 92       	st	Z+, r1
     f1e:	1d 92       	st	X+, r1
     f20:	1d 92       	st	X+, r1
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	e2 35       	cpi	r30, 0x52	; 82
     f26:	f8 07       	cpc	r31, r24
     f28:	c1 f7       	brne	.-16     	; 0xf1a <matrix_init+0x30>
     f2a:	08 95       	ret

00000f2c <matrix_scan>:
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	aa 2e       	mov	r10, r26
     f44:	a1 e0       	ldi	r26, 0x01	; 1
     f46:	ba 2e       	mov	r11, r26
     f48:	e5 01       	movw	r28, r10
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	01 e0       	ldi	r16, 0x01	; 1
     f4e:	b7 e7       	ldi	r27, 0x77	; 119
     f50:	cb 2e       	mov	r12, r27
     f52:	b2 e0       	ldi	r27, 0x02	; 2
     f54:	db 2e       	mov	r13, r27
     f56:	13 30       	cpi	r17, 0x03	; 3
     f58:	99 f0       	breq	.+38     	; 0xf80 <matrix_scan+0x54>
     f5a:	28 f4       	brcc	.+10     	; 0xf66 <matrix_scan+0x3a>
     f5c:	11 30       	cpi	r17, 0x01	; 1
     f5e:	51 f0       	breq	.+20     	; 0xf74 <matrix_scan+0x48>
     f60:	12 30       	cpi	r17, 0x02	; 2
     f62:	59 f0       	breq	.+22     	; 0xf7a <matrix_scan+0x4e>
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <matrix_scan+0x42>
     f66:	14 30       	cpi	r17, 0x04	; 4
     f68:	71 f0       	breq	.+28     	; 0xf86 <matrix_scan+0x5a>
     f6a:	15 30       	cpi	r17, 0x05	; 5
     f6c:	79 f0       	breq	.+30     	; 0xf8c <matrix_scan+0x60>
     f6e:	80 9a       	sbi	0x10, 0	; 16
     f70:	88 98       	cbi	0x11, 0	; 17
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <matrix_scan+0x64>
     f74:	81 9a       	sbi	0x10, 1	; 16
     f76:	89 98       	cbi	0x11, 1	; 17
     f78:	0b c0       	rjmp	.+22     	; 0xf90 <matrix_scan+0x64>
     f7a:	84 9a       	sbi	0x10, 4	; 16
     f7c:	8c 98       	cbi	0x11, 4	; 17
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <matrix_scan+0x64>
     f80:	85 9a       	sbi	0x10, 5	; 16
     f82:	8d 98       	cbi	0x11, 5	; 17
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <matrix_scan+0x64>
     f86:	86 9a       	sbi	0x10, 6	; 16
     f88:	8e 98       	cbi	0x11, 6	; 17
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <matrix_scan+0x64>
     f8c:	87 9a       	sbi	0x10, 7	; 16
     f8e:	8f 98       	cbi	0x11, 7	; 17
     f90:	80 ea       	ldi	r24, 0xA0	; 160
     f92:	8a 95       	dec	r24
     f94:	f1 f7       	brne	.-4      	; 0xf92 <matrix_scan+0x66>
     f96:	83 b1       	in	r24, 0x03	; 3
     f98:	82 95       	swap	r24
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	83 70       	andi	r24, 0x03	; 3
     fa0:	80 27       	eor	r24, r16
     fa2:	80 fb       	bst	r24, 0
     fa4:	ee 24       	eor	r14, r14
     fa6:	e0 f8       	bld	r14, 0
     fa8:	f1 2c       	mov	r15, r1
     faa:	1d 99       	sbic	0x03, 5	; 3
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <matrix_scan+0x88>
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <matrix_scan+0x8c>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	97 01       	movw	r18, r14
     fba:	28 2b       	or	r18, r24
     fbc:	39 2b       	or	r19, r25
     fbe:	1c 99       	sbic	0x03, 4	; 3
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <matrix_scan+0x9c>
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <matrix_scan+0xa0>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	82 2b       	or	r24, r18
     fce:	93 2b       	or	r25, r19
     fd0:	49 b1       	in	r20, 0x09	; 9
     fd2:	04 2e       	mov	r0, r20
     fd4:	00 0c       	add	r0, r0
     fd6:	55 0b       	sbc	r21, r21
     fd8:	40 95       	com	r20
     fda:	50 95       	com	r21
     fdc:	9a 01       	movw	r18, r20
     fde:	22 27       	eor	r18, r18
     fe0:	33 0f       	add	r19, r19
     fe2:	22 1f       	adc	r18, r18
     fe4:	33 27       	eor	r19, r19
     fe6:	f3 e0       	ldi	r31, 0x03	; 3
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	fa 95       	dec	r31
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <matrix_scan+0xbc>
     ff0:	28 2b       	or	r18, r24
     ff2:	39 2b       	or	r19, r25
     ff4:	4e 99       	sbic	0x09, 6	; 9
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <matrix_scan+0xd2>
     ff8:	80 e1       	ldi	r24, 0x10	; 16
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <matrix_scan+0xd6>
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	48 2b       	or	r20, r24
    1006:	59 2b       	or	r21, r25
    1008:	26 b1       	in	r18, 0x06	; 6
    100a:	02 2e       	mov	r0, r18
    100c:	00 0c       	add	r0, r0
    100e:	33 0b       	sbc	r19, r19
    1010:	20 95       	com	r18
    1012:	30 95       	com	r19
    1014:	c9 01       	movw	r24, r18
    1016:	88 27       	eor	r24, r24
    1018:	99 0f       	add	r25, r25
    101a:	88 1f       	adc	r24, r24
    101c:	99 27       	eor	r25, r25
    101e:	75 e0       	ldi	r23, 0x05	; 5
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	7a 95       	dec	r23
    1026:	e1 f7       	brne	.-8      	; 0x1020 <matrix_scan+0xf4>
    1028:	84 2b       	or	r24, r20
    102a:	95 2b       	or	r25, r21
    102c:	36 99       	sbic	0x06, 6	; 6
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <matrix_scan+0x10a>
    1030:	20 e4       	ldi	r18, 0x40	; 64
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <matrix_scan+0x10e>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	82 2b       	or	r24, r18
    103c:	93 2b       	or	r25, r19
    103e:	4b 99       	sbic	0x09, 3	; 9
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <matrix_scan+0x11c>
    1042:	20 e8       	ldi	r18, 0x80	; 128
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <matrix_scan+0x120>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	82 2b       	or	r24, r18
    104e:	93 2b       	or	r25, r19
    1050:	4a 99       	sbic	0x09, 2	; 9
    1052:	03 c0       	rjmp	.+6      	; 0x105a <matrix_scan+0x12e>
    1054:	e0 e0       	ldi	r30, 0x00	; 0
    1056:	f1 e0       	ldi	r31, 0x01	; 1
    1058:	02 c0       	rjmp	.+4      	; 0x105e <matrix_scan+0x132>
    105a:	e0 e0       	ldi	r30, 0x00	; 0
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8e 2b       	or	r24, r30
    1060:	9f 2b       	or	r25, r31
    1062:	49 99       	sbic	0x09, 1	; 9
    1064:	03 c0       	rjmp	.+6      	; 0x106c <matrix_scan+0x140>
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	72 e0       	ldi	r23, 0x02	; 2
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <matrix_scan+0x144>
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	86 2b       	or	r24, r22
    1072:	97 2b       	or	r25, r23
    1074:	48 99       	sbic	0x09, 0	; 9
    1076:	03 c0       	rjmp	.+6      	; 0x107e <matrix_scan+0x152>
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	34 e0       	ldi	r19, 0x04	; 4
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <matrix_scan+0x156>
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	ac 01       	movw	r20, r24
    1084:	42 2b       	or	r20, r18
    1086:	53 2b       	or	r21, r19
    1088:	23 b1       	in	r18, 0x03	; 3
    108a:	02 2e       	mov	r0, r18
    108c:	00 0c       	add	r0, r0
    108e:	33 0b       	sbc	r19, r19
    1090:	20 95       	com	r18
    1092:	30 95       	com	r19
    1094:	c9 01       	movw	r24, r18
    1096:	88 27       	eor	r24, r24
    1098:	99 0f       	add	r25, r25
    109a:	88 1f       	adc	r24, r24
    109c:	99 27       	eor	r25, r25
    109e:	98 2f       	mov	r25, r24
    10a0:	88 27       	eor	r24, r24
    10a2:	99 0f       	add	r25, r25
    10a4:	99 0f       	add	r25, r25
    10a6:	99 0f       	add	r25, r25
    10a8:	84 2b       	or	r24, r20
    10aa:	95 2b       	or	r25, r21
    10ac:	1b 99       	sbic	0x03, 3	; 3
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <matrix_scan+0x18a>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e1       	ldi	r19, 0x10	; 16
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <matrix_scan+0x18e>
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	82 2b       	or	r24, r18
    10bc:	93 2b       	or	r25, r19
    10be:	1a 99       	sbic	0x03, 2	; 3
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <matrix_scan+0x19c>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e2       	ldi	r19, 0x20	; 32
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <matrix_scan+0x1a0>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	82 2b       	or	r24, r18
    10ce:	93 2b       	or	r25, r19
    10d0:	19 99       	sbic	0x03, 1	; 3
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <matrix_scan+0x1ae>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e4       	ldi	r19, 0x40	; 64
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <matrix_scan+0x1b2>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	82 2b       	or	r24, r18
    10e0:	93 2b       	or	r25, r19
    10e2:	28 81       	ld	r18, Y
    10e4:	39 81       	ldd	r19, Y+1	; 0x01
    10e6:	28 17       	cp	r18, r24
    10e8:	39 07       	cpc	r19, r25
    10ea:	49 f1       	breq	.+82     	; 0x113e <matrix_scan+0x212>
    10ec:	99 83       	std	Y+1, r25	; 0x01
    10ee:	88 83       	st	Y, r24
    10f0:	80 91 00 01 	lds	r24, 0x0100
    10f4:	88 23       	and	r24, r24
    10f6:	01 f1       	breq	.+64     	; 0x1138 <matrix_scan+0x20c>
    10f8:	80 91 cd 01 	lds	r24, 0x01CD
    10fc:	80 ff       	sbrs	r24, 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <matrix_scan+0x1dc>
    1100:	8c e7       	ldi	r24, 0x7C	; 124
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    1108:	80 91 cd 01 	lds	r24, 0x01CD
    110c:	80 ff       	sbrs	r24, 0
    110e:	0c c0       	rjmp	.+24     	; 0x1128 <matrix_scan+0x1fc>
    1110:	80 91 00 01 	lds	r24, 0x0100
    1114:	1f 92       	push	r1
    1116:	8f 93       	push	r24
    1118:	df 92       	push	r13
    111a:	cf 92       	push	r12
    111c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	80 91 cd 01 	lds	r24, 0x01CD
    112c:	80 ff       	sbrs	r24, 0
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <matrix_scan+0x20c>
    1130:	85 e7       	ldi	r24, 0x75	; 117
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    1138:	85 e0       	ldi	r24, 0x05	; 5
    113a:	80 93 00 01 	sts	0x0100, r24
    113e:	0e 94 6e 07 	call	0xedc	; 0xedc <unselect_rows>
    1142:	1f 5f       	subi	r17, 0xFF	; 255
    1144:	22 96       	adiw	r28, 0x02	; 2
    1146:	16 30       	cpi	r17, 0x06	; 6
    1148:	09 f0       	breq	.+2      	; 0x114c <matrix_scan+0x220>
    114a:	05 cf       	rjmp	.-502    	; 0xf56 <matrix_scan+0x2a>
    114c:	80 91 00 01 	lds	r24, 0x0100
    1150:	88 23       	and	r24, r24
    1152:	c9 f0       	breq	.+50     	; 0x1186 <matrix_scan+0x25a>
    1154:	81 50       	subi	r24, 0x01	; 1
    1156:	80 93 00 01 	sts	0x0100, r24
    115a:	88 23       	and	r24, r24
    115c:	39 f0       	breq	.+14     	; 0x116c <matrix_scan+0x240>
    115e:	af e9       	ldi	r26, 0x9F	; 159
    1160:	bf e0       	ldi	r27, 0x0F	; 15
    1162:	11 97       	sbiw	r26, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <matrix_scan+0x236>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <matrix_scan+0x23c>
    1168:	00 00       	nop
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <matrix_scan+0x25a>
    116c:	e6 e4       	ldi	r30, 0x46	; 70
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	d5 01       	movw	r26, r10
    1172:	8d 91       	ld	r24, X+
    1174:	9d 91       	ld	r25, X+
    1176:	5d 01       	movw	r10, r26
    1178:	81 93       	st	Z+, r24
    117a:	91 93       	st	Z+, r25
    117c:	b6 e4       	ldi	r27, 0x46	; 70
    117e:	ab 16       	cp	r10, r27
    1180:	b1 e0       	ldi	r27, 0x01	; 1
    1182:	bb 06       	cpc	r11, r27
    1184:	a9 f7       	brne	.-22     	; 0x1170 <matrix_scan+0x244>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	08 95       	ret

0000119e <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    119e:	e8 2f       	mov	r30, r24
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	ea 5b       	subi	r30, 0xBA	; 186
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
}
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	08 95       	ret

000011b0 <matrix_print>:

void matrix_print(void)
{
    11b0:	cf 92       	push	r12
    11b2:	df 92       	push	r13
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    11c0:	8e e5       	ldi	r24, 0x5E	; 94
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    11c8:	86 e4       	ldi	r24, 0x46	; 70
    11ca:	e8 2e       	mov	r14, r24
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	f8 2e       	mov	r15, r24
    11d0:	c0 e0       	ldi	r28, 0x00	; 0
    11d2:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    11d4:	99 e5       	ldi	r25, 0x59	; 89
    11d6:	c9 2e       	mov	r12, r25
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    11dc:	00 e5       	ldi	r16, 0x50	; 80
    11de:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	df 92       	push	r13
    11e6:	cf 92       	push	r12
    11e8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    11ec:	86 e5       	ldi	r24, 0x56	; 86
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
        pbin_reverse16(matrix_get_row(row));
    11f4:	f7 01       	movw	r30, r14
    11f6:	81 91       	ld	r24, Z+
    11f8:	91 91       	ld	r25, Z+
    11fa:	7f 01       	movw	r14, r30
    11fc:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <bitrev16>
    1200:	9f 93       	push	r25
    1202:	8f 93       	push	r24
    1204:	1f 93       	push	r17
    1206:	0f 93       	push	r16
    1208:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
        print("\n");
    120c:	8e e4       	ldi	r24, 0x4E	; 78
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    1214:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1216:	8d b7       	in	r24, 0x3d	; 61
    1218:	9e b7       	in	r25, 0x3e	; 62
    121a:	08 96       	adiw	r24, 0x08	; 8
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	9e bf       	out	0x3e, r25	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	8d bf       	out	0x3d, r24	; 61
    1226:	c6 30       	cpi	r28, 0x06	; 6
    1228:	d1 05       	cpc	r29, r1
    122a:	d1 f6       	brne	.-76     	; 0x11e0 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	08 95       	ret

0000123e <led_layer_set>:
#include "stdint.h"
#include "led.h"


void led_layer_set(uint32_t state) {
  DDRB |= (1<<0);
    123e:	20 9a       	sbi	0x04, 0	; 4

  /* Led for Layer 2 */
  if ((1<<2 & state) != 0) {
    1240:	62 ff       	sbrs	r22, 2
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <led_layer_set+0xa>
    PORTB &= ~(1<<0);
    1244:	28 98       	cbi	0x05, 0	; 5
    1246:	08 95       	ret
  } else {
    PORTB |= (1<<0);
    1248:	28 9a       	sbi	0x05, 0	; 5
    124a:	08 95       	ret

0000124c <led_set>:
  }
}

void led_set(uint8_t usb_led)
{
    124c:	08 95       	ret

0000124e <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    124e:	80 91 65 01 	lds	r24, 0x0165
    1252:	08 95       	ret

00001254 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1254:	9f b7       	in	r25, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	10 92 54 01 	sts	0x0154, r1
    125c:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    125e:	90 91 e2 01 	lds	r25, 0x01E2
    1262:	94 30       	cpi	r25, 0x04	; 4
    1264:	09 f0       	breq	.+2      	; 0x1268 <sendchar+0x14>
    1266:	57 c0       	rjmp	.+174    	; 0x1316 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1268:	90 91 e9 00 	lds	r25, 0x00E9
    126c:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    126e:	30 91 ec 00 	lds	r19, 0x00EC
    1272:	23 2f       	mov	r18, r19
    1274:	21 70       	andi	r18, 0x01	; 1
    1276:	30 fd       	sbrc	r19, 0
    1278:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    127a:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    127c:	24 e0       	ldi	r18, 0x04	; 4
    127e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1282:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1286:	20 ff       	sbrs	r18, 0
    1288:	43 c0       	rjmp	.+134    	; 0x1310 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    128a:	20 91 ee 00 	lds	r18, 0x00EE
    128e:	27 ff       	sbrs	r18, 7
    1290:	3f c0       	rjmp	.+126    	; 0x1310 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1292:	20 91 52 01 	lds	r18, 0x0152
    1296:	22 23       	and	r18, r18
    1298:	21 f0       	breq	.+8      	; 0x12a2 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    129a:	20 91 e8 00 	lds	r18, 0x00E8
    129e:	25 ff       	sbrs	r18, 5
    12a0:	37 c0       	rjmp	.+110    	; 0x1310 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    12a2:	10 92 52 01 	sts	0x0152, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    12a6:	26 e0       	ldi	r18, 0x06	; 6
    12a8:	30 91 e8 00 	lds	r19, 0x00E8
    12ac:	35 fd       	sbrc	r19, 5
    12ae:	15 c0       	rjmp	.+42     	; 0x12da <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    12b0:	30 91 e2 01 	lds	r19, 0x01E2
    12b4:	34 30       	cpi	r19, 0x04	; 4
    12b6:	61 f5       	brne	.+88     	; 0x1310 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    12b8:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    12bc:	35 fd       	sbrc	r19, 5
    12be:	28 c0       	rjmp	.+80     	; 0x1310 <sendchar+0xbc>
    12c0:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    12c2:	21 f4       	brne	.+8      	; 0x12cc <sendchar+0x78>
            timeouted = true;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	80 93 52 01 	sts	0x0152, r24
            goto ERROR_EXIT;
    12ca:	22 c0       	rjmp	.+68     	; 0x1310 <sendchar+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12cc:	ef e9       	ldi	r30, 0x9F	; 159
    12ce:	ff e0       	ldi	r31, 0x0F	; 15
    12d0:	31 97       	sbiw	r30, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <sendchar+0x7c>
    12d4:	00 c0       	rjmp	.+0      	; 0x12d6 <sendchar+0x82>
    12d6:	00 00       	nop
    12d8:	e7 cf       	rjmp	.-50     	; 0x12a8 <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12da:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12de:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    12e2:	85 fd       	sbrc	r24, 5
    12e4:	0a c0       	rjmp	.+20     	; 0x12fa <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12e6:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    12ea:	80 ff       	sbrs	r24, 0
    12ec:	fc cf       	rjmp	.-8      	; 0x12e6 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12ee:	80 91 e8 00 	lds	r24, 0x00E8
    12f2:	8e 77       	andi	r24, 0x7E	; 126
    12f4:	80 93 e8 00 	sts	0x00E8, r24
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    12fa:	8f b7       	in	r24, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	20 93 54 01 	sts	0x0154, r18
    1304:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1306:	9f 70       	andi	r25, 0x0F	; 15
    1308:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	08 95       	ret
    1310:	9f 70       	andi	r25, 0x0F	; 15
    1312:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1318:	08 95       	ret

0000131a <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	00 d0       	rcall	.+0      	; 0x1320 <send_consumer+0x6>
    1320:	1f 92       	push	r1
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1328:	80 91 e2 01 	lds	r24, 0x01E2
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	19 f5       	brne	.+70     	; 0x1376 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	99 83       	std	Y+1, r25	; 0x01
    1334:	3b 83       	std	Y+3, r19	; 0x03
    1336:	2a 83       	std	Y+2, r18	; 0x02
    1338:	90 93 e9 00 	sts	0x00E9, r25
    133c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    133e:	90 91 e8 00 	lds	r25, 0x00E8
    1342:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1344:	95 fd       	sbrc	r25, 5
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1348:	95 ed       	ldi	r25, 0xD5	; 213
    134a:	9a 95       	dec	r25
    134c:	f1 f7       	brne	.-4      	; 0x134a <send_consumer+0x30>
    134e:	00 00       	nop
    1350:	81 11       	cpse	r24, r1
    1352:	f5 cf       	rjmp	.-22     	; 0x133e <send_consumer+0x24>
    1354:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1358:	85 ff       	sbrs	r24, 5
    135a:	0d c0       	rjmp	.+26     	; 0x1376 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	63 e0       	ldi	r22, 0x03	; 3
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    136c:	80 91 e8 00 	lds	r24, 0x00E8
    1370:	8e 77       	andi	r24, 0x7E	; 126
    1372:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	00 d0       	rcall	.+0      	; 0x1388 <send_system+0x6>
    1388:	1f 92       	push	r1
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    138e:	20 91 e2 01 	lds	r18, 0x01E2
    1392:	24 30       	cpi	r18, 0x04	; 4
    1394:	21 f5       	brne	.+72     	; 0x13de <send_system+0x5c>
        return;

    report_extra_t r = {
    1396:	22 e0       	ldi	r18, 0x02	; 2
    1398:	29 83       	std	Y+1, r18	; 0x01
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	80 93 e9 00 	sts	0x00E9, r24
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13a6:	90 91 e8 00 	lds	r25, 0x00E8
    13aa:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    13ac:	95 fd       	sbrc	r25, 5
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <send_system+0x3a>
    13b0:	95 ed       	ldi	r25, 0xD5	; 213
    13b2:	9a 95       	dec	r25
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <send_system+0x30>
    13b6:	00 00       	nop
    13b8:	81 11       	cpse	r24, r1
    13ba:	f5 cf       	rjmp	.-22     	; 0x13a6 <send_system+0x24>
    13bc:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    13c0:	85 ff       	sbrs	r24, 5
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	63 e0       	ldi	r22, 0x03	; 3
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13d4:	80 91 e8 00 	lds	r24, 0x00E8
    13d8:	8e 77       	andi	r24, 0x7E	; 126
    13da:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
    13ea:	9c 01       	movw	r18, r24
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13ec:	80 91 e2 01 	lds	r24, 0x01E2
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	f9 f4       	brne	.+62     	; 0x1432 <send_mouse+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	80 93 e9 00 	sts	0x00E9, r24
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13fc:	80 91 e8 00 	lds	r24, 0x00E8
    1400:	91 50       	subi	r25, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1402:	85 fd       	sbrc	r24, 5
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <send_mouse+0x28>
    1406:	85 ed       	ldi	r24, 0xD5	; 213
    1408:	8a 95       	dec	r24
    140a:	f1 f7       	brne	.-4      	; 0x1408 <send_mouse+0x1e>
    140c:	00 00       	nop
    140e:	91 11       	cpse	r25, r1
    1410:	f5 cf       	rjmp	.-22     	; 0x13fc <send_mouse+0x12>
    1412:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1416:	85 ff       	sbrs	r24, 5
    1418:	0c c0       	rjmp	.+24     	; 0x1432 <send_mouse+0x48>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	65 e0       	ldi	r22, 0x05	; 5
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	c9 01       	movw	r24, r18
    1424:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1428:	80 91 e8 00 	lds	r24, 0x00E8
    142c:	8e 77       	andi	r24, 0x7E	; 126
    142e:	80 93 e8 00 	sts	0x00E8, r24
    1432:	08 95       	ret

00001434 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    143a:	80 91 e2 01 	lds	r24, 0x01E2
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	09 f0       	breq	.+2      	; 0x1444 <send_keyboard+0x10>
    1442:	47 c0       	rjmp	.+142    	; 0x14d2 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1444:	80 91 0b 01 	lds	r24, 0x010B
    1448:	88 23       	and	r24, r24
    144a:	e1 f0       	breq	.+56     	; 0x1484 <send_keyboard+0x50>
    144c:	80 91 0c 01 	lds	r24, 0x010C
    1450:	88 23       	and	r24, r24
    1452:	c1 f0       	breq	.+48     	; 0x1484 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1454:	85 e0       	ldi	r24, 0x05	; 5
    1456:	80 93 e9 00 	sts	0x00E9, r24
    145a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    145c:	90 91 e8 00 	lds	r25, 0x00E8
    1460:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1462:	95 fd       	sbrc	r25, 5
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <send_keyboard+0x3e>
    1466:	95 e1       	ldi	r25, 0x15	; 21
    1468:	9a 95       	dec	r25
    146a:	f1 f7       	brne	.-4      	; 0x1468 <send_keyboard+0x34>
    146c:	00 00       	nop
    146e:	81 11       	cpse	r24, r1
    1470:	f5 cf       	rjmp	.-22     	; 0x145c <send_keyboard+0x28>
    1472:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1476:	85 ff       	sbrs	r24, 5
    1478:	2c c0       	rjmp	.+88     	; 0x14d2 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	60 e1       	ldi	r22, 0x10	; 16
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	17 c0       	rjmp	.+46     	; 0x14b2 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 e9 00 	sts	0x00E9, r24
    148a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    148c:	90 91 e8 00 	lds	r25, 0x00E8
    1490:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1492:	95 fd       	sbrc	r25, 5
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <send_keyboard+0x6e>
    1496:	95 ed       	ldi	r25, 0xD5	; 213
    1498:	9a 95       	dec	r25
    149a:	f1 f7       	brne	.-4      	; 0x1498 <send_keyboard+0x64>
    149c:	00 00       	nop
    149e:	81 11       	cpse	r24, r1
    14a0:	f5 cf       	rjmp	.-22     	; 0x148c <send_keyboard+0x58>
    14a2:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    14a6:	85 ff       	sbrs	r24, 5
    14a8:	14 c0       	rjmp	.+40     	; 0x14d2 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	68 e0       	ldi	r22, 0x08	; 8
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	ce 01       	movw	r24, r28
    14b4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14b8:	80 91 e8 00 	lds	r24, 0x00E8
    14bc:	8e 77       	andi	r24, 0x7E	; 126
    14be:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    14c2:	80 e1       	ldi	r24, 0x10	; 16
    14c4:	fe 01       	movw	r30, r28
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b1 e0       	ldi	r27, 0x01	; 1
    14ca:	01 90       	ld	r0, Z+
    14cc:	0d 92       	st	X+, r0
    14ce:	8a 95       	dec	r24
    14d0:	e1 f7       	brne	.-8      	; 0x14ca <send_keyboard+0x96>
}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    14d8:	8c eb       	ldi	r24, 0xBC	; 188
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    14e0:	80 91 e1 01 	lds	r24, 0x01E1
    14e4:	81 11       	cpse	r24, r1
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    14e8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <USB_Disable>
        USB_Init();
    14ec:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    14f0:	80 91 e2 00 	lds	r24, 0x00E2
    14f4:	84 60       	ori	r24, 0x04	; 4
    14f6:	80 93 e2 00 	sts	0x00E2, r24
    14fa:	08 95       	ret

000014fc <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    14fc:	88 eb       	ldi	r24, 0xB8	; 184
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1504:	10 92 e1 01 	sts	0x01E1, r1
    1508:	08 95       	ret

0000150a <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    150a:	84 eb       	ldi	r24, 0xB4	; 180
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <xputs>

00001512 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1512:	20 91 53 01 	lds	r18, 0x0153
    1516:	2f 5f       	subi	r18, 0xFF	; 255
    1518:	82 2f       	mov	r24, r18
    151a:	62 e3       	ldi	r22, 0x32	; 50
    151c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodqi4>
    1520:	99 23       	and	r25, r25
    1522:	19 f0       	breq	.+6      	; 0x152a <EVENT_USB_Device_StartOfFrame+0x18>
    1524:	20 93 53 01 	sts	0x0153, r18
    1528:	08 95       	ret
    count = 0;
    152a:	10 92 53 01 	sts	0x0153, r1

    if (!console_flush) return;
    152e:	80 91 54 01 	lds	r24, 0x0154
    1532:	88 23       	and	r24, r24
    1534:	71 f1       	breq	.+92     	; 0x1592 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1536:	80 91 e2 01 	lds	r24, 0x01E2
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	41 f5       	brne	.+80     	; 0x158e <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    153e:	80 91 e9 00 	lds	r24, 0x00E9
    1542:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1544:	20 91 ec 00 	lds	r18, 0x00EC
    1548:	92 2f       	mov	r25, r18
    154a:	91 70       	andi	r25, 0x01	; 1
    154c:	20 fd       	sbrc	r18, 0
    154e:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1550:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1552:	94 e0       	ldi	r25, 0x04	; 4
    1554:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1558:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    155c:	90 ff       	sbrs	r25, 0
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1560:	90 91 ee 00 	lds	r25, 0x00EE
    1564:	97 ff       	sbrs	r25, 7
    1566:	10 c0       	rjmp	.+32     	; 0x1588 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1568:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    156c:	95 ff       	sbrs	r25, 5
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1570:	10 92 f1 00 	sts	0x00F1, r1
    1574:	f9 cf       	rjmp	.-14     	; 0x1568 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1576:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    157a:	90 ff       	sbrs	r25, 0
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    157e:	90 91 e8 00 	lds	r25, 0x00E8
    1582:	9e 77       	andi	r25, 0x7E	; 126
    1584:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1588:	8f 70       	andi	r24, 0x0F	; 15
    158a:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    158e:	10 92 54 01 	sts	0x0154, r1
    1592:	08 95       	ret

00001594 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1594:	42 e0       	ldi	r20, 0x02	; 2
    1596:	61 ec       	ldi	r22, 0xC1	; 193
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_ConfigureEndpoint_Prv>
    159e:	42 e0       	ldi	r20, 0x02	; 2
    15a0:	61 ec       	ldi	r22, 0xC1	; 193
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_ConfigureEndpoint_Prv>
    15a8:	42 e0       	ldi	r20, 0x02	; 2
    15aa:	61 ec       	ldi	r22, 0xC1	; 193
    15ac:	83 e0       	ldi	r24, 0x03	; 3
    15ae:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_ConfigureEndpoint_Prv>
    15b2:	42 e2       	ldi	r20, 0x22	; 34
    15b4:	61 ec       	ldi	r22, 0xC1	; 193
    15b6:	84 e0       	ldi	r24, 0x04	; 4
    15b8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_ConfigureEndpoint_Prv>
    15bc:	42 e1       	ldi	r20, 0x12	; 18
    15be:	61 ec       	ldi	r22, 0xC1	; 193
    15c0:	85 e0       	ldi	r24, 0x05	; 5
    15c2:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <Endpoint_ConfigureEndpoint_Prv>

000015c6 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    15c6:	80 91 e4 01 	lds	r24, 0x01E4
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <EVENT_USB_Device_ControlRequest+0xa>
    15ce:	55 c0       	rjmp	.+170    	; 0x167a <EVENT_USB_Device_ControlRequest+0xb4>
    15d0:	30 f4       	brcc	.+12     	; 0x15de <EVENT_USB_Device_ControlRequest+0x18>
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	71 f0       	breq	.+28     	; 0x15f2 <EVENT_USB_Device_ControlRequest+0x2c>
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	09 f4       	brne	.+2      	; 0x15dc <EVENT_USB_Device_ControlRequest+0x16>
    15da:	8e c0       	rjmp	.+284    	; 0x16f8 <EVENT_USB_Device_ControlRequest+0x132>
    15dc:	08 95       	ret
    15de:	8a 30       	cpi	r24, 0x0A	; 10
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <EVENT_USB_Device_ControlRequest+0x1e>
    15e2:	7a c0       	rjmp	.+244    	; 0x16d8 <EVENT_USB_Device_ControlRequest+0x112>
    15e4:	8b 30       	cpi	r24, 0x0B	; 11
    15e6:	09 f4       	brne	.+2      	; 0x15ea <EVENT_USB_Device_ControlRequest+0x24>
    15e8:	60 c0       	rjmp	.+192    	; 0x16aa <EVENT_USB_Device_ControlRequest+0xe4>
    15ea:	89 30       	cpi	r24, 0x09	; 9
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <EVENT_USB_Device_ControlRequest+0x2a>
    15ee:	9c c0       	rjmp	.+312    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
    15f0:	20 c0       	rjmp	.+64     	; 0x1632 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15f2:	80 91 e3 01 	lds	r24, 0x01E3
    15f6:	81 3a       	cpi	r24, 0xA1	; 161
    15f8:	09 f0       	breq	.+2      	; 0x15fc <EVENT_USB_Device_ControlRequest+0x36>
    15fa:	96 c0       	rjmp	.+300    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15fc:	80 91 e8 00 	lds	r24, 0x00E8
    1600:	87 7f       	andi	r24, 0xF7	; 247
    1602:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1606:	80 91 e7 01 	lds	r24, 0x01E7
    160a:	90 91 e8 01 	lds	r25, 0x01E8
    160e:	89 2b       	or	r24, r25
    1610:	21 f4       	brne	.+8      	; 0x161a <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1612:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1614:	85 e5       	ldi	r24, 0x55	; 85
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    161a:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	0e 94 b6 0c 	call	0x196c	; 0x196c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1626:	80 91 e8 00 	lds	r24, 0x00E8
    162a:	8b 77       	andi	r24, 0x7B	; 123
    162c:	80 93 e8 00 	sts	0x00E8, r24
    1630:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1632:	80 91 e3 01 	lds	r24, 0x01E3
    1636:	81 32       	cpi	r24, 0x21	; 33
    1638:	09 f0       	breq	.+2      	; 0x163c <EVENT_USB_Device_ControlRequest+0x76>
    163a:	76 c0       	rjmp	.+236    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    163c:	80 91 e7 01 	lds	r24, 0x01E7
    1640:	90 91 e8 01 	lds	r25, 0x01E8
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	19 f0       	breq	.+6      	; 0x164e <EVENT_USB_Device_ControlRequest+0x88>
    1648:	04 97       	sbiw	r24, 0x04	; 4
    164a:	09 f0       	breq	.+2      	; 0x164e <EVENT_USB_Device_ControlRequest+0x88>
    164c:	6d c0       	rjmp	.+218    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    164e:	80 91 e8 00 	lds	r24, 0x00E8
    1652:	87 7f       	andi	r24, 0xF7	; 247
    1654:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1658:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    165c:	82 fd       	sbrc	r24, 2
    165e:	05 c0       	rjmp	.+10     	; 0x166a <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1660:	80 91 e2 01 	lds	r24, 0x01E2
    1664:	81 11       	cpse	r24, r1
    1666:	f8 cf       	rjmp	.-16     	; 0x1658 <EVENT_USB_Device_ControlRequest+0x92>
    1668:	5f c0       	rjmp	.+190    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    166a:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    166e:	80 93 65 01 	sts	0x0165, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1672:	80 91 e8 00 	lds	r24, 0x00E8
    1676:	8b 77       	andi	r24, 0x7B	; 123
    1678:	53 c0       	rjmp	.+166    	; 0x1720 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    167a:	80 91 e3 01 	lds	r24, 0x01E3
    167e:	81 3a       	cpi	r24, 0xA1	; 161
    1680:	09 f0       	breq	.+2      	; 0x1684 <EVENT_USB_Device_ControlRequest+0xbe>
    1682:	52 c0       	rjmp	.+164    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1684:	80 91 e7 01 	lds	r24, 0x01E7
    1688:	90 91 e8 01 	lds	r25, 0x01E8
    168c:	89 2b       	or	r24, r25
    168e:	09 f0       	breq	.+2      	; 0x1692 <EVENT_USB_Device_ControlRequest+0xcc>
    1690:	4b c0       	rjmp	.+150    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1692:	80 91 e8 00 	lds	r24, 0x00E8
    1696:	87 7f       	andi	r24, 0xF7	; 247
    1698:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    169c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    16a0:	80 ff       	sbrs	r24, 0
    16a2:	fc cf       	rjmp	.-8      	; 0x169c <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    16a4:	80 91 0b 01 	lds	r24, 0x010B
    16a8:	36 c0       	rjmp	.+108    	; 0x1716 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16aa:	80 91 e3 01 	lds	r24, 0x01E3
    16ae:	81 32       	cpi	r24, 0x21	; 33
    16b0:	d9 f5       	brne	.+118    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    16b2:	80 91 e7 01 	lds	r24, 0x01E7
    16b6:	90 91 e8 01 	lds	r25, 0x01E8
    16ba:	89 2b       	or	r24, r25
    16bc:	a9 f5       	brne	.+106    	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16be:	80 91 e8 00 	lds	r24, 0x00E8
    16c2:	87 7f       	andi	r24, 0xF7	; 247
    16c4:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    16c8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    16cc:	80 91 e5 01 	lds	r24, 0x01E5
    16d0:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    16d4:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16d8:	80 91 e3 01 	lds	r24, 0x01E3
    16dc:	81 32       	cpi	r24, 0x21	; 33
    16de:	21 f5       	brne	.+72     	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
    16e0:	80 91 e8 00 	lds	r24, 0x00E8
    16e4:	87 7f       	andi	r24, 0xF7	; 247
    16e6:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    16ea:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    16ee:	80 91 e6 01 	lds	r24, 0x01E6
    16f2:	80 93 66 01 	sts	0x0166, r24
    16f6:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    16f8:	80 91 e3 01 	lds	r24, 0x01E3
    16fc:	81 3a       	cpi	r24, 0xA1	; 161
    16fe:	a1 f4       	brne	.+40     	; 0x1728 <EVENT_USB_Device_ControlRequest+0x162>
    1700:	80 91 e8 00 	lds	r24, 0x00E8
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    170a:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    170e:	80 ff       	sbrs	r24, 0
    1710:	fc cf       	rjmp	.-8      	; 0x170a <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1712:	80 91 66 01 	lds	r24, 0x0166
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1716:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    171a:	80 91 e8 00 	lds	r24, 0x00E8
    171e:	8e 77       	andi	r24, 0x7E	; 126
    1720:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1724:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <Endpoint_ClearStatusStage>
    1728:	08 95       	ret

0000172a <hook_usb_suspend_entry>:
__attribute__((weak))
void hook_late_init(void) {}

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    172a:	08 95       	ret

0000172c <hook_late_init>:
    172c:	0c 94 95 0b 	jmp	0x172a	; 0x172a <hook_usb_suspend_entry>

00001730 <hook_early_init>:
    1730:	0c 94 95 0b 	jmp	0x172a	; 0x172a <hook_usb_suspend_entry>

00001734 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1734:	80 eb       	ldi	r24, 0xB0	; 176
    1736:	92 e0       	ldi	r25, 0x02	; 2
    1738:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    hook_usb_suspend_entry();
    173c:	0c 94 95 0b 	jmp	0x172a	; 0x172a <hook_usb_suspend_entry>

00001740 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1740:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1744:	80 91 e0 01 	lds	r24, 0x01E0
    1748:	88 23       	and	r24, r24
    174a:	29 f0       	breq	.+10     	; 0x1756 <hook_usb_suspend_loop+0x16>
    174c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <suspend_wakeup_condition>
    1750:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    1752:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <USB_Device_SendRemoteWakeup>
    1756:	08 95       	ret

00001758 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1758:	84 b7       	in	r24, 0x34	; 52
    175a:	87 7f       	andi	r24, 0xF7	; 247
    175c:	84 bf       	out	0x34, r24	; 52
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	a8 95       	wdr
    1764:	80 91 60 00 	lds	r24, 0x0060
    1768:	88 61       	ori	r24, 0x18	; 24
    176a:	80 93 60 00 	sts	0x0060, r24
    176e:	10 92 60 00 	sts	0x0060, r1
    1772:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	80 93 61 00 	sts	0x0061, r24
    1780:	90 93 61 00 	sts	0x0061, r25
    1784:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    1786:	0e 94 98 0b 	call	0x1730	; 0x1730 <hook_early_init>
    keyboard_setup();
    178a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    178e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <USB_Disable>

    USB_Init();
    1792:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <USB_Init>
    1796:	80 91 e2 00 	lds	r24, 0x00E2
    179a:	84 60       	ori	r24, 0x04	; 4
    179c:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    17a0:	8a e2       	ldi	r24, 0x2A	; 42
    17a2:	99 e0       	ldi	r25, 0x09	; 9
    17a4:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    17a8:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    17aa:	80 91 e2 01 	lds	r24, 0x01E2
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <main+0x52>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    17b2:	8b e9       	ldi	r24, 0x9B	; 155
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>

    /* init modules */
    keyboard_init();
    17ba:	0e 94 76 11 	call	0x22ec	; 0x22ec <keyboard_init>
    host_set_driver(&lufa_driver);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    17c6:	8a e8       	ldi	r24, 0x8A	; 138
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    hook_late_init();
    17ce:	0e 94 96 0b 	call	0x172c	; 0x172c <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    17d2:	80 91 e2 01 	lds	r24, 0x01E2
    17d6:	85 30       	cpi	r24, 0x05	; 5
    17d8:	39 f4       	brne	.+14     	; 0x17e8 <main+0x90>
            print("[s]");
    17da:	86 e8       	ldi	r24, 0x86	; 134
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            hook_usb_suspend_loop();
    17e2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <hook_usb_suspend_loop>
    17e6:	f5 cf       	rjmp	.-22     	; 0x17d2 <main+0x7a>
        }

        keyboard_task();
    17e8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    17ec:	f2 cf       	rjmp	.-28     	; 0x17d2 <main+0x7a>

000017ee <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    17ee:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <suspend_wakeup_init>

000017f2 <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    17f2:	8c ea       	ldi	r24, 0xAC	; 172
    17f4:	92 e0       	ldi	r25, 0x02	; 2
    17f6:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    hook_usb_wakeup();
    17fa:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <hook_usb_wakeup>

000017fe <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    17fe:	29 2f       	mov	r18, r25
    1800:	33 27       	eor	r19, r19
    1802:	23 30       	cpi	r18, 0x03	; 3
    1804:	31 05       	cpc	r19, r1
    1806:	c9 f0       	breq	.+50     	; 0x183a <CALLBACK_USB_GetDescriptor+0x3c>
    1808:	60 f4       	brcc	.+24     	; 0x1822 <CALLBACK_USB_GetDescriptor+0x24>
    180a:	21 30       	cpi	r18, 0x01	; 1
    180c:	31 05       	cpc	r19, r1
    180e:	81 f0       	breq	.+32     	; 0x1830 <CALLBACK_USB_GetDescriptor+0x32>
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	09 f0       	breq	.+2      	; 0x1818 <CALLBACK_USB_GetDescriptor+0x1a>
    1816:	41 c0       	rjmp	.+130    	; 0x189a <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1818:	8d e8       	ldi	r24, 0x8D	; 141
    181a:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    181c:	2e ee       	ldi	r18, 0xEE	; 238
    181e:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1820:	40 c0       	rjmp	.+128    	; 0x18a2 <CALLBACK_USB_GetDescriptor+0xa4>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1822:	21 32       	cpi	r18, 0x21	; 33
    1824:	31 05       	cpc	r19, r1
    1826:	e1 f0       	breq	.+56     	; 0x1860 <CALLBACK_USB_GetDescriptor+0x62>
    1828:	22 32       	cpi	r18, 0x22	; 34
    182a:	31 05       	cpc	r19, r1
    182c:	31 f1       	breq	.+76     	; 0x187a <CALLBACK_USB_GetDescriptor+0x7c>
    182e:	35 c0       	rjmp	.+106    	; 0x189a <CALLBACK_USB_GetDescriptor+0x9c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1830:	82 e1       	ldi	r24, 0x12	; 18
    1832:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1834:	2b e7       	ldi	r18, 0x7B	; 123
    1836:	33 e0       	ldi	r19, 0x03	; 3
    1838:	34 c0       	rjmp	.+104    	; 0x18a2 <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    183a:	99 27       	eor	r25, r25
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	49 f0       	breq	.+18     	; 0x1854 <CALLBACK_USB_GetDescriptor+0x56>
    1842:	28 f0       	brcs	.+10     	; 0x184e <CALLBACK_USB_GetDescriptor+0x50>
    1844:	02 97       	sbiw	r24, 0x02	; 2
    1846:	49 f5       	brne	.+82     	; 0x189a <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1848:	e0 ec       	ldi	r30, 0xC0	; 192
    184a:	f2 e0       	ldi	r31, 0x02	; 2
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <CALLBACK_USB_GetDescriptor+0x5a>
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    184e:	ea ee       	ldi	r30, 0xEA	; 234
    1850:	f2 e0       	ldi	r31, 0x02	; 2
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <CALLBACK_USB_GetDescriptor+0x5a>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1854:	ea ed       	ldi	r30, 0xDA	; 218
    1856:	f2 e0       	ldi	r31, 0x02	; 2
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1858:	84 91       	lpm	r24, Z
    185a:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    185c:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    185e:	21 c0       	rjmp	.+66     	; 0x18a2 <CALLBACK_USB_GetDescriptor+0xa4>
    1860:	65 30       	cpi	r22, 0x05	; 5
    1862:	d8 f4       	brcc	.+54     	; 0x189a <CALLBACK_USB_GetDescriptor+0x9c>
    1864:	e6 2f       	mov	r30, r22
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	ec 5d       	subi	r30, 0xDC	; 220
    186e:	fe 4f       	sbci	r31, 0xFE	; 254
    1870:	20 81       	ld	r18, Z
    1872:	31 81       	ldd	r19, Z+1	; 0x01
    1874:	89 e0       	ldi	r24, 0x09	; 9
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	14 c0       	rjmp	.+40     	; 0x18a2 <CALLBACK_USB_GetDescriptor+0xa4>
    187a:	65 30       	cpi	r22, 0x05	; 5
    187c:	70 f4       	brcc	.+28     	; 0x189a <CALLBACK_USB_GetDescriptor+0x9c>
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	fb 01       	movw	r30, r22
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	e6 5e       	subi	r30, 0xE6	; 230
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	20 81       	ld	r18, Z
    188c:	31 81       	ldd	r19, Z+1	; 0x01
    188e:	fb 01       	movw	r30, r22
    1890:	eb 5e       	subi	r30, 0xEB	; 235
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	80 81       	ld	r24, Z
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <CALLBACK_USB_GetDescriptor+0xa4>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    18a2:	fa 01       	movw	r30, r20
    18a4:	31 83       	std	Z+1, r19	; 0x01
    18a6:	20 83       	st	Z, r18
    return Size;
}
    18a8:	08 95       	ret

000018aa <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18aa:	80 e1       	ldi	r24, 0x10	; 16
    18ac:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18ae:	82 e1       	ldi	r24, 0x12	; 18
    18b0:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    18b2:	09 b4       	in	r0, 0x29	; 41
    18b4:	00 fe       	sbrs	r0, 0
    18b6:	fd cf       	rjmp	.-6      	; 0x18b2 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18b8:	80 91 d8 00 	lds	r24, 0x00D8
    18bc:	8f 7d       	andi	r24, 0xDF	; 223
    18be:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    18c2:	80 91 e0 00 	lds	r24, 0x00E0
    18c6:	82 60       	ori	r24, 0x02	; 2
    18c8:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    18cc:	80 91 e0 00 	lds	r24, 0x00E0
    18d0:	81 fd       	sbrc	r24, 1
    18d2:	fc cf       	rjmp	.-8      	; 0x18cc <USB_Device_SendRemoteWakeup+0x22>
}
    18d4:	08 95       	ret

000018d6 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ec 01       	movw	r28, r24
    18e8:	8b 01       	movw	r16, r22
    18ea:	6a 01       	movw	r12, r20
    18ec:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Endpoint_WaitUntilReady>
    18f0:	81 11       	cpse	r24, r1
    18f2:	33 c0       	rjmp	.+102    	; 0x195a <Endpoint_Write_Stream_LE+0x84>
    18f4:	c1 14       	cp	r12, r1
    18f6:	d1 04       	cpc	r13, r1
    18f8:	39 f0       	breq	.+14     	; 0x1908 <Endpoint_Write_Stream_LE+0x32>
    18fa:	f6 01       	movw	r30, r12
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	08 1b       	sub	r16, r24
    1902:	19 0b       	sbc	r17, r25
    1904:	c8 0f       	add	r28, r24
    1906:	d9 1f       	adc	r29, r25
    1908:	e1 2c       	mov	r14, r1
    190a:	f1 2c       	mov	r15, r1
    190c:	01 15       	cp	r16, r1
    190e:	11 05       	cpc	r17, r1
    1910:	19 f1       	breq	.+70     	; 0x1958 <Endpoint_Write_Stream_LE+0x82>
    1912:	80 91 e8 00 	lds	r24, 0x00E8
    1916:	85 fd       	sbrc	r24, 5
    1918:	16 c0       	rjmp	.+44     	; 0x1946 <Endpoint_Write_Stream_LE+0x70>
    191a:	80 91 e8 00 	lds	r24, 0x00E8
    191e:	8e 77       	andi	r24, 0x7E	; 126
    1920:	80 93 e8 00 	sts	0x00E8, r24
    1924:	c1 14       	cp	r12, r1
    1926:	d1 04       	cpc	r13, r1
    1928:	49 f0       	breq	.+18     	; 0x193c <Endpoint_Write_Stream_LE+0x66>
    192a:	f6 01       	movw	r30, r12
    192c:	80 81       	ld	r24, Z
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	e8 0e       	add	r14, r24
    1932:	f9 1e       	adc	r15, r25
    1934:	f1 82       	std	Z+1, r15	; 0x01
    1936:	e0 82       	st	Z, r14
    1938:	85 e0       	ldi	r24, 0x05	; 5
    193a:	0f c0       	rjmp	.+30     	; 0x195a <Endpoint_Write_Stream_LE+0x84>
    193c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Endpoint_WaitUntilReady>
    1940:	88 23       	and	r24, r24
    1942:	21 f3       	breq	.-56     	; 0x190c <Endpoint_Write_Stream_LE+0x36>
    1944:	0a c0       	rjmp	.+20     	; 0x195a <Endpoint_Write_Stream_LE+0x84>
    1946:	89 91       	ld	r24, Y+
    1948:	80 93 f1 00 	sts	0x00F1, r24
    194c:	01 50       	subi	r16, 0x01	; 1
    194e:	11 09       	sbc	r17, r1
    1950:	ff ef       	ldi	r31, 0xFF	; 255
    1952:	ef 1a       	sub	r14, r31
    1954:	ff 0a       	sbc	r15, r31
    1956:	da cf       	rjmp	.-76     	; 0x190c <Endpoint_Write_Stream_LE+0x36>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	08 95       	ret

0000196c <Endpoint_Write_Control_Stream_LE>:
    196c:	20 91 e9 01 	lds	r18, 0x01E9
    1970:	30 91 ea 01 	lds	r19, 0x01EA
    1974:	26 17       	cp	r18, r22
    1976:	37 07       	cpc	r19, r23
    1978:	48 f0       	brcs	.+18     	; 0x198c <Endpoint_Write_Control_Stream_LE+0x20>
    197a:	61 15       	cp	r22, r1
    197c:	71 05       	cpc	r23, r1
    197e:	39 f4       	brne	.+14     	; 0x198e <Endpoint_Write_Control_Stream_LE+0x22>
    1980:	20 91 e8 00 	lds	r18, 0x00E8
    1984:	2e 77       	andi	r18, 0x7E	; 126
    1986:	20 93 e8 00 	sts	0x00E8, r18
    198a:	01 c0       	rjmp	.+2      	; 0x198e <Endpoint_Write_Control_Stream_LE+0x22>
    198c:	b9 01       	movw	r22, r18
    198e:	fc 01       	movw	r30, r24
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	61 15       	cp	r22, r1
    1994:	71 05       	cpc	r23, r1
    1996:	79 f1       	breq	.+94     	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x8a>
    1998:	80 91 e2 01 	lds	r24, 0x01E2
    199c:	88 23       	and	r24, r24
    199e:	f1 f1       	breq	.+124    	; 0x1a1c <Endpoint_Write_Control_Stream_LE+0xb0>
    19a0:	85 30       	cpi	r24, 0x05	; 5
    19a2:	f1 f1       	breq	.+124    	; 0x1a20 <Endpoint_Write_Control_Stream_LE+0xb4>
    19a4:	80 91 e8 00 	lds	r24, 0x00E8
    19a8:	83 fd       	sbrc	r24, 3
    19aa:	3c c0       	rjmp	.+120    	; 0x1a24 <Endpoint_Write_Control_Stream_LE+0xb8>
    19ac:	80 91 e8 00 	lds	r24, 0x00E8
    19b0:	82 fd       	sbrc	r24, 2
    19b2:	2e c0       	rjmp	.+92     	; 0x1a10 <Endpoint_Write_Control_Stream_LE+0xa4>
    19b4:	80 91 e8 00 	lds	r24, 0x00E8
    19b8:	80 ff       	sbrs	r24, 0
    19ba:	eb cf       	rjmp	.-42     	; 0x1992 <Endpoint_Write_Control_Stream_LE+0x26>
    19bc:	20 91 f3 00 	lds	r18, 0x00F3
    19c0:	80 91 f2 00 	lds	r24, 0x00F2
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	92 2b       	or	r25, r18
    19c8:	61 15       	cp	r22, r1
    19ca:	71 05       	cpc	r23, r1
    19cc:	51 f0       	breq	.+20     	; 0x19e2 <Endpoint_Write_Control_Stream_LE+0x76>
    19ce:	88 30       	cpi	r24, 0x08	; 8
    19d0:	91 05       	cpc	r25, r1
    19d2:	38 f4       	brcc	.+14     	; 0x19e2 <Endpoint_Write_Control_Stream_LE+0x76>
    19d4:	21 91       	ld	r18, Z+
    19d6:	20 93 f1 00 	sts	0x00F1, r18
    19da:	61 50       	subi	r22, 0x01	; 1
    19dc:	71 09       	sbc	r23, r1
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	f3 cf       	rjmp	.-26     	; 0x19c8 <Endpoint_Write_Control_Stream_LE+0x5c>
    19e2:	21 e0       	ldi	r18, 0x01	; 1
    19e4:	08 97       	sbiw	r24, 0x08	; 8
    19e6:	09 f0       	breq	.+2      	; 0x19ea <Endpoint_Write_Control_Stream_LE+0x7e>
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	80 91 e8 00 	lds	r24, 0x00E8
    19ee:	8e 77       	andi	r24, 0x7E	; 126
    19f0:	80 93 e8 00 	sts	0x00E8, r24
    19f4:	ce cf       	rjmp	.-100    	; 0x1992 <Endpoint_Write_Control_Stream_LE+0x26>
    19f6:	21 11       	cpse	r18, r1
    19f8:	cf cf       	rjmp	.-98     	; 0x1998 <Endpoint_Write_Control_Stream_LE+0x2c>
    19fa:	0a c0       	rjmp	.+20     	; 0x1a10 <Endpoint_Write_Control_Stream_LE+0xa4>
    19fc:	80 91 e2 01 	lds	r24, 0x01E2
    1a00:	88 23       	and	r24, r24
    1a02:	61 f0       	breq	.+24     	; 0x1a1c <Endpoint_Write_Control_Stream_LE+0xb0>
    1a04:	85 30       	cpi	r24, 0x05	; 5
    1a06:	61 f0       	breq	.+24     	; 0x1a20 <Endpoint_Write_Control_Stream_LE+0xb4>
    1a08:	80 91 e8 00 	lds	r24, 0x00E8
    1a0c:	83 fd       	sbrc	r24, 3
    1a0e:	0a c0       	rjmp	.+20     	; 0x1a24 <Endpoint_Write_Control_Stream_LE+0xb8>
    1a10:	80 91 e8 00 	lds	r24, 0x00E8
    1a14:	82 ff       	sbrs	r24, 2
    1a16:	f2 cf       	rjmp	.-28     	; 0x19fc <Endpoint_Write_Control_Stream_LE+0x90>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	08 95       	ret
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	08 95       	ret
    1a20:	83 e0       	ldi	r24, 0x03	; 3
    1a22:	08 95       	ret
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	08 95       	ret

00001a28 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a28:	20 91 e9 01 	lds	r18, 0x01E9
    1a2c:	30 91 ea 01 	lds	r19, 0x01EA
    1a30:	26 17       	cp	r18, r22
    1a32:	37 07       	cpc	r19, r23
    1a34:	48 f0       	brcs	.+18     	; 0x1a48 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a36:	61 15       	cp	r22, r1
    1a38:	71 05       	cpc	r23, r1
    1a3a:	39 f4       	brne	.+14     	; 0x1a4a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a3c:	20 91 e8 00 	lds	r18, 0x00E8
    1a40:	2e 77       	andi	r18, 0x7E	; 126
    1a42:	20 93 e8 00 	sts	0x00E8, r18
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <Endpoint_Write_Control_PStream_LE+0x22>
    1a48:	b9 01       	movw	r22, r18
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a4e:	61 15       	cp	r22, r1
    1a50:	71 05       	cpc	r23, r1
    1a52:	91 f1       	breq	.+100    	; 0x1ab8 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a54:	80 91 e2 01 	lds	r24, 0x01E2

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a58:	88 23       	and	r24, r24
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <Endpoint_Write_Control_PStream_LE+0x36>
    1a5c:	40 c0       	rjmp	.+128    	; 0x1ade <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a5e:	85 30       	cpi	r24, 0x05	; 5
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <Endpoint_Write_Control_PStream_LE+0x3c>
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a64:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a68:	83 fd       	sbrc	r24, 3
    1a6a:	3d c0       	rjmp	.+122    	; 0x1ae6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a6c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a70:	82 fd       	sbrc	r24, 2
    1a72:	2f c0       	rjmp	.+94     	; 0x1ad2 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a74:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a78:	80 ff       	sbrs	r24, 0
    1a7a:	e9 cf       	rjmp	.-46     	; 0x1a4e <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a7c:	20 91 f3 00 	lds	r18, 0x00F3
    1a80:	80 91 f2 00 	lds	r24, 0x00F2
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a88:	61 15       	cp	r22, r1
    1a8a:	71 05       	cpc	r23, r1
    1a8c:	59 f0       	breq	.+22     	; 0x1aa4 <Endpoint_Write_Control_PStream_LE+0x7c>
    1a8e:	88 30       	cpi	r24, 0x08	; 8
    1a90:	91 05       	cpc	r25, r1
    1a92:	40 f4       	brcc	.+16     	; 0x1aa4 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a94:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a96:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a9a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a9c:	61 50       	subi	r22, 0x01	; 1
    1a9e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	f2 cf       	rjmp	.-28     	; 0x1a88 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1aa4:	21 e0       	ldi	r18, 0x01	; 1
    1aa6:	08 97       	sbiw	r24, 0x08	; 8
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <Endpoint_Write_Control_PStream_LE+0x84>
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1aac:	80 91 e8 00 	lds	r24, 0x00E8
    1ab0:	8e 77       	andi	r24, 0x7E	; 126
    1ab2:	80 93 e8 00 	sts	0x00E8, r24
    1ab6:	cb cf       	rjmp	.-106    	; 0x1a4e <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ab8:	21 11       	cpse	r18, r1
    1aba:	cc cf       	rjmp	.-104    	; 0x1a54 <Endpoint_Write_Control_PStream_LE+0x2c>
    1abc:	0a c0       	rjmp	.+20     	; 0x1ad2 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1abe:	80 91 e2 01 	lds	r24, 0x01E2

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ac2:	88 23       	and	r24, r24
    1ac4:	61 f0       	breq	.+24     	; 0x1ade <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ac6:	85 30       	cpi	r24, 0x05	; 5
    1ac8:	61 f0       	breq	.+24     	; 0x1ae2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1aca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ace:	83 fd       	sbrc	r24, 3
    1ad0:	0a c0       	rjmp	.+20     	; 0x1ae6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ad2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1ad6:	82 ff       	sbrs	r24, 2
    1ad8:	f2 cf       	rjmp	.-28     	; 0x1abe <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ae8:	08 95       	ret

00001aea <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1aea:	98 2f       	mov	r25, r24
    1aec:	97 30       	cpi	r25, 0x07	; 7
    1aee:	68 f5       	brcc	.+90     	; 0x1b4a <Endpoint_ConfigureEndpoint_Prv+0x60>
    1af0:	90 93 e9 00 	sts	0x00E9, r25
    1af4:	98 17       	cp	r25, r24
    1af6:	39 f0       	breq	.+14     	; 0x1b06 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1af8:	70 91 ec 00 	lds	r23, 0x00EC
    1afc:	20 91 ed 00 	lds	r18, 0x00ED
    1b00:	50 91 f0 00 	lds	r21, 0x00F0
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <Endpoint_ConfigureEndpoint_Prv+0x22>
    1b06:	24 2f       	mov	r18, r20
    1b08:	76 2f       	mov	r23, r22
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	21 fd       	sbrc	r18, 1
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1b10:	9f 5f       	subi	r25, 0xFF	; 255
    1b12:	ec cf       	rjmp	.-40     	; 0x1aec <Endpoint_ConfigureEndpoint_Prv+0x2>
    1b14:	30 91 eb 00 	lds	r19, 0x00EB
    1b18:	3e 7f       	andi	r19, 0xFE	; 254
    1b1a:	30 93 eb 00 	sts	0x00EB, r19
    1b1e:	30 91 ed 00 	lds	r19, 0x00ED
    1b22:	3d 7f       	andi	r19, 0xFD	; 253
    1b24:	30 93 ed 00 	sts	0x00ED, r19
    1b28:	30 91 eb 00 	lds	r19, 0x00EB
    1b2c:	31 60       	ori	r19, 0x01	; 1
    1b2e:	30 93 eb 00 	sts	0x00EB, r19
    1b32:	70 93 ec 00 	sts	0x00EC, r23
    1b36:	20 93 ed 00 	sts	0x00ED, r18
    1b3a:	50 93 f0 00 	sts	0x00F0, r21
    1b3e:	20 91 ee 00 	lds	r18, 0x00EE
    1b42:	27 fd       	sbrc	r18, 7
    1b44:	e5 cf       	rjmp	.-54     	; 0x1b10 <Endpoint_ConfigureEndpoint_Prv+0x26>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	08 95       	ret
    1b4a:	8f 70       	andi	r24, 0x0F	; 15
    1b4c:	80 93 e9 00 	sts	0x00E9, r24
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	08 95       	ret

00001b54 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b54:	80 91 e3 01 	lds	r24, 0x01E3
    1b58:	87 ff       	sbrs	r24, 7
    1b5a:	11 c0       	rjmp	.+34     	; 0x1b7e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b5c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1b60:	82 fd       	sbrc	r24, 2
    1b62:	05 c0       	rjmp	.+10     	; 0x1b6e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b64:	80 91 e2 01 	lds	r24, 0x01E2
    1b68:	81 11       	cpse	r24, r1
    1b6a:	f8 cf       	rjmp	.-16     	; 0x1b5c <Endpoint_ClearStatusStage+0x8>
    1b6c:	11 c0       	rjmp	.+34     	; 0x1b90 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b6e:	80 91 e8 00 	lds	r24, 0x00E8
    1b72:	8b 77       	andi	r24, 0x7B	; 123
    1b74:	0b c0       	rjmp	.+22     	; 0x1b8c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b76:	80 91 e2 01 	lds	r24, 0x01E2
    1b7a:	88 23       	and	r24, r24
    1b7c:	49 f0       	breq	.+18     	; 0x1b90 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b7e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b82:	80 ff       	sbrs	r24, 0
    1b84:	f8 cf       	rjmp	.-16     	; 0x1b76 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b86:	80 91 e8 00 	lds	r24, 0x00E8
    1b8a:	8e 77       	andi	r24, 0x7E	; 126
    1b8c:	80 93 e8 00 	sts	0x00E8, r24
    1b90:	08 95       	ret

00001b92 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b92:	20 91 e4 00 	lds	r18, 0x00E4
    1b96:	30 91 e5 00 	lds	r19, 0x00E5
    1b9a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b9c:	40 91 ec 00 	lds	r20, 0x00EC
    1ba0:	84 2f       	mov	r24, r20
    1ba2:	81 70       	andi	r24, 0x01	; 1
    1ba4:	40 ff       	sbrs	r20, 0
    1ba6:	23 c0       	rjmp	.+70     	; 0x1bee <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ba8:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1bac:	80 fd       	sbrc	r24, 0
    1bae:	1d c0       	rjmp	.+58     	; 0x1bea <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bb0:	80 91 e2 01 	lds	r24, 0x01E2

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bb4:	88 23       	and	r24, r24
    1bb6:	99 f0       	breq	.+38     	; 0x1bde <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bb8:	85 30       	cpi	r24, 0x05	; 5
    1bba:	99 f0       	breq	.+38     	; 0x1be2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bbc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1bc0:	85 fd       	sbrc	r24, 5
    1bc2:	11 c0       	rjmp	.+34     	; 0x1be6 <Endpoint_WaitUntilReady+0x54>
    1bc4:	40 91 e4 00 	lds	r20, 0x00E4
    1bc8:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1bcc:	24 17       	cp	r18, r20
    1bce:	35 07       	cpc	r19, r21
    1bd0:	29 f3       	breq	.-54     	; 0x1b9c <Endpoint_WaitUntilReady+0xa>
    1bd2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1bd4:	11 f0       	breq	.+4      	; 0x1bda <Endpoint_WaitUntilReady+0x48>
    1bd6:	9a 01       	movw	r18, r20
    1bd8:	e1 cf       	rjmp	.-62     	; 0x1b9c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1bda:	84 e0       	ldi	r24, 0x04	; 4
    1bdc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bee:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1bf2:	42 ff       	sbrs	r20, 2
    1bf4:	dd cf       	rjmp	.-70     	; 0x1bb0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1bf6:	08 95       	ret

00001bf8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1bf8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bfc:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1c00:	e0 ee       	ldi	r30, 0xE0	; 224
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1c0a:	e8 ed       	ldi	r30, 0xD8	; 216
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 77       	andi	r24, 0x7F	; 127
    1c12:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c14:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1c16:	a7 ed       	ldi	r26, 0xD7	; 215
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	8c 91       	ld	r24, X
    1c1c:	8e 7f       	andi	r24, 0xFE	; 254
    1c1e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c20:	80 81       	ld	r24, Z
    1c22:	8f 7e       	andi	r24, 0xEF	; 239
    1c24:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1c26:	10 92 e1 01 	sts	0x01E1, r1
    1c2a:	08 95       	ret

00001c2c <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c34:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c38:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c3c:	c8 ed       	ldi	r28, 0xD8	; 216
    1c3e:	d0 e0       	ldi	r29, 0x00	; 0
    1c40:	88 81       	ld	r24, Y
    1c42:	8f 77       	andi	r24, 0x7F	; 127
    1c44:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1c46:	88 81       	ld	r24, Y
    1c48:	80 68       	ori	r24, 0x80	; 128
    1c4a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c4c:	88 81       	ld	r24, Y
    1c4e:	8f 7d       	andi	r24, 0xDF	; 223
    1c50:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c52:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c54:	10 92 e2 01 	sts	0x01E2, r1
	USB_Device_ConfigurationNumber  = 0;
    1c58:	10 92 de 01 	sts	0x01DE, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c5c:	10 92 e0 01 	sts	0x01E0, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c60:	10 92 df 01 	sts	0x01DF, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c64:	00 ee       	ldi	r16, 0xE0	; 224
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8b 7f       	andi	r24, 0xFB	; 251
    1c6e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c70:	88 81       	ld	r24, Y
    1c72:	81 60       	ori	r24, 0x01	; 1
    1c74:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c76:	42 e0       	ldi	r20, 0x02	; 2
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c80:	e1 ee       	ldi	r30, 0xE1	; 225
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	8e 7f       	andi	r24, 0xFE	; 254
    1c88:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c8a:	e2 ee       	ldi	r30, 0xE2	; 226
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	81 60       	ori	r24, 0x01	; 1
    1c92:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c94:	80 81       	ld	r24, Z
    1c96:	88 60       	ori	r24, 0x08	; 8
    1c98:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8e 7f       	andi	r24, 0xFE	; 254
    1ca0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1ca2:	88 81       	ld	r24, Y
    1ca4:	80 61       	ori	r24, 0x10	; 16
    1ca6:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	08 95       	ret

00001cb2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1cb2:	e8 ed       	ldi	r30, 0xD8	; 216
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8f 7e       	andi	r24, 0xEF	; 239
    1cba:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1cbc:	e7 ed       	ldi	r30, 0xD7	; 215
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	81 60       	ori	r24, 0x01	; 1
    1cc4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 e1 01 	sts	0x01E1, r24

	USB_ResetInterface();
    1cd0:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <USB_ResetInterface>

00001cd4 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1cd4:	e8 ed       	ldi	r30, 0xD8	; 216
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8e 7f       	andi	r24, 0xFE	; 254
    1cdc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1cde:	10 92 e2 00 	sts	0x00E2, r1
    1ce2:	08 95       	ret

00001ce4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1ce4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1ce8:	10 92 e1 00 	sts	0x00E1, r1
    1cec:	08 95       	ret

00001cee <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1cee:	1f 92       	push	r1
    1cf0:	0f 92       	push	r0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	0f 92       	push	r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	2f 93       	push	r18
    1cfa:	3f 93       	push	r19
    1cfc:	4f 93       	push	r20
    1cfe:	5f 93       	push	r21
    1d00:	6f 93       	push	r22
    1d02:	7f 93       	push	r23
    1d04:	8f 93       	push	r24
    1d06:	9f 93       	push	r25
    1d08:	af 93       	push	r26
    1d0a:	bf 93       	push	r27
    1d0c:	ef 93       	push	r30
    1d0e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d10:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d14:	82 ff       	sbrs	r24, 2
    1d16:	0b c0       	rjmp	.+22     	; 0x1d2e <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d18:	80 91 e2 00 	lds	r24, 0x00E2
    1d1c:	82 ff       	sbrs	r24, 2
    1d1e:	07 c0       	rjmp	.+14     	; 0x1d2e <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1d20:	80 91 e1 00 	lds	r24, 0x00E1
    1d24:	8b 7f       	andi	r24, 0xFB	; 251
    1d26:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1d2a:	0e 94 89 0a 	call	0x1512	; 0x1512 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d2e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d32:	80 ff       	sbrs	r24, 0
    1d34:	1f c0       	rjmp	.+62     	; 0x1d74 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d36:	80 91 d8 00 	lds	r24, 0x00D8
    1d3a:	80 ff       	sbrs	r24, 0
    1d3c:	1b c0       	rjmp	.+54     	; 0x1d74 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d3e:	80 91 da 00 	lds	r24, 0x00DA
    1d42:	8e 7f       	andi	r24, 0xFE	; 254
    1d44:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d48:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d4c:	80 ff       	sbrs	r24, 0
    1d4e:	0d c0       	rjmp	.+26     	; 0x1d6a <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d50:	80 e1       	ldi	r24, 0x10	; 16
    1d52:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d54:	82 e1       	ldi	r24, 0x12	; 18
    1d56:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d58:	09 b4       	in	r0, 0x29	; 41
    1d5a:	00 fe       	sbrs	r0, 0
    1d5c:	fd cf       	rjmp	.-6      	; 0x1d58 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	80 93 e2 01 	sts	0x01E2, r24
			EVENT_USB_Device_Connect();
    1d64:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <EVENT_USB_Device_Connect>
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d6a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d6c:	10 92 e2 01 	sts	0x01E2, r1
			EVENT_USB_Device_Disconnect();
    1d70:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d74:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d78:	80 ff       	sbrs	r24, 0
    1d7a:	19 c0       	rjmp	.+50     	; 0x1dae <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d7c:	80 91 e2 00 	lds	r24, 0x00E2
    1d80:	80 ff       	sbrs	r24, 0
    1d82:	15 c0       	rjmp	.+42     	; 0x1dae <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d84:	80 91 e2 00 	lds	r24, 0x00E2
    1d88:	8e 7f       	andi	r24, 0xFE	; 254
    1d8a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d8e:	80 91 e2 00 	lds	r24, 0x00E2
    1d92:	80 61       	ori	r24, 0x10	; 16
    1d94:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d98:	80 91 d8 00 	lds	r24, 0x00D8
    1d9c:	80 62       	ori	r24, 0x20	; 32
    1d9e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1da2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1da4:	85 e0       	ldi	r24, 0x05	; 5
    1da6:	80 93 e2 01 	sts	0x01E2, r24
		EVENT_USB_Device_Suspend();
    1daa:	0e 94 9a 0b 	call	0x1734	; 0x1734 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1dae:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1db2:	84 ff       	sbrs	r24, 4
    1db4:	30 c0       	rjmp	.+96     	; 0x1e16 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1db6:	80 91 e2 00 	lds	r24, 0x00E2
    1dba:	84 ff       	sbrs	r24, 4
    1dbc:	2c c0       	rjmp	.+88     	; 0x1e16 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1dbe:	80 e1       	ldi	r24, 0x10	; 16
    1dc0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dc2:	82 e1       	ldi	r24, 0x12	; 18
    1dc4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1dc6:	09 b4       	in	r0, 0x29	; 41
    1dc8:	00 fe       	sbrs	r0, 0
    1dca:	fd cf       	rjmp	.-6      	; 0x1dc6 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1dcc:	80 91 d8 00 	lds	r24, 0x00D8
    1dd0:	8f 7d       	andi	r24, 0xDF	; 223
    1dd2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1dd6:	80 91 e1 00 	lds	r24, 0x00E1
    1dda:	8f 7e       	andi	r24, 0xEF	; 239
    1ddc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1de0:	80 91 e2 00 	lds	r24, 0x00E2
    1de4:	8f 7e       	andi	r24, 0xEF	; 239
    1de6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1dea:	80 91 e2 00 	lds	r24, 0x00E2
    1dee:	81 60       	ori	r24, 0x01	; 1
    1df0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1df4:	80 91 de 01 	lds	r24, 0x01DE
    1df8:	88 23       	and	r24, r24
    1dfa:	11 f0       	breq	.+4      	; 0x1e00 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e00:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e04:	87 fd       	sbrc	r24, 7
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <__vector_10+0x11e>
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <__vector_10+0x120>
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	80 93 e2 01 	sts	0x01E2, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e12:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e16:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e1a:	83 ff       	sbrs	r24, 3
    1e1c:	29 c0       	rjmp	.+82     	; 0x1e70 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e1e:	80 91 e2 00 	lds	r24, 0x00E2
    1e22:	83 ff       	sbrs	r24, 3
    1e24:	25 c0       	rjmp	.+74     	; 0x1e70 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e26:	80 91 e1 00 	lds	r24, 0x00E1
    1e2a:	87 7f       	andi	r24, 0xF7	; 247
    1e2c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	80 93 e2 01 	sts	0x01E2, r24
		USB_Device_ConfigurationNumber = 0;
    1e36:	10 92 de 01 	sts	0x01DE, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e3a:	80 91 e1 00 	lds	r24, 0x00E1
    1e3e:	8e 7f       	andi	r24, 0xFE	; 254
    1e40:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e44:	80 91 e2 00 	lds	r24, 0x00E2
    1e48:	8e 7f       	andi	r24, 0xFE	; 254
    1e4a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e4e:	80 91 e2 00 	lds	r24, 0x00E2
    1e52:	80 61       	ori	r24, 0x10	; 16
    1e54:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e58:	42 e0       	ldi	r20, 0x02	; 2
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e62:	80 91 f0 00 	lds	r24, 0x00F0
    1e66:	88 60       	ori	r24, 0x08	; 8
    1e68:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e6c:	0e 94 85 0a 	call	0x150a	; 0x150a <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e70:	ff 91       	pop	r31
    1e72:	ef 91       	pop	r30
    1e74:	bf 91       	pop	r27
    1e76:	af 91       	pop	r26
    1e78:	9f 91       	pop	r25
    1e7a:	8f 91       	pop	r24
    1e7c:	7f 91       	pop	r23
    1e7e:	6f 91       	pop	r22
    1e80:	5f 91       	pop	r21
    1e82:	4f 91       	pop	r20
    1e84:	3f 91       	pop	r19
    1e86:	2f 91       	pop	r18
    1e88:	0f 90       	pop	r0
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	0f 90       	pop	r0
    1e8e:	1f 90       	pop	r1
    1e90:	18 95       	reti

00001e92 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e92:	1f 92       	push	r1
    1e94:	0f 92       	push	r0
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	0f 92       	push	r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	2f 93       	push	r18
    1e9e:	3f 93       	push	r19
    1ea0:	4f 93       	push	r20
    1ea2:	5f 93       	push	r21
    1ea4:	6f 93       	push	r22
    1ea6:	7f 93       	push	r23
    1ea8:	8f 93       	push	r24
    1eaa:	9f 93       	push	r25
    1eac:	af 93       	push	r26
    1eae:	bf 93       	push	r27
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	ef 93       	push	r30
    1eb6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1eb8:	c0 91 e9 00 	lds	r28, 0x00E9
    1ebc:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ebe:	80 91 ec 00 	lds	r24, 0x00EC
    1ec2:	d8 2f       	mov	r29, r24
    1ec4:	d1 70       	andi	r29, 0x01	; 1
    1ec6:	80 fd       	sbrc	r24, 0
    1ec8:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eca:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1ece:	80 91 f0 00 	lds	r24, 0x00F0
    1ed2:	87 7f       	andi	r24, 0xF7	; 247
    1ed4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ed8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1eda:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <USB_Device_ProcessControlRequest>
    1ede:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ee2:	80 91 f0 00 	lds	r24, 0x00F0
    1ee6:	88 60       	ori	r24, 0x08	; 8
    1ee8:	80 93 f0 00 	sts	0x00F0, r24
    1eec:	cd 2b       	or	r28, r29
    1eee:	cf 70       	andi	r28, 0x0F	; 15
    1ef0:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	7f 91       	pop	r23
    1f06:	6f 91       	pop	r22
    1f08:	5f 91       	pop	r21
    1f0a:	4f 91       	pop	r20
    1f0c:	3f 91       	pop	r19
    1f0e:	2f 91       	pop	r18
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	0f 90       	pop	r0
    1f16:	1f 90       	pop	r1
    1f18:	18 95       	reti

00001f1a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	aa 97       	sbiw	r28, 0x2a	; 42
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	e3 ee       	ldi	r30, 0xE3	; 227
    1f32:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f34:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1f38:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1f3a:	21 e0       	ldi	r18, 0x01	; 1
    1f3c:	eb 3e       	cpi	r30, 0xEB	; 235
    1f3e:	f2 07       	cpc	r31, r18
    1f40:	c9 f7       	brne	.-14     	; 0x1f34 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1f42:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f46:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1f4a:	83 ff       	sbrs	r24, 3
    1f4c:	24 c1       	rjmp	.+584    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1f4e:	80 91 e3 01 	lds	r24, 0x01E3

		switch (USB_ControlRequest.bRequest)
    1f52:	90 91 e4 01 	lds	r25, 0x01E4
    1f56:	49 2f       	mov	r20, r25
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	4a 30       	cpi	r20, 0x0A	; 10
    1f5c:	51 05       	cpc	r21, r1
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <USB_Device_ProcessControlRequest+0x48>
    1f60:	1a c1       	rjmp	.+564    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
    1f62:	fa 01       	movw	r30, r20
    1f64:	ea 5a       	subi	r30, 0xAA	; 170
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f6c:	80 38       	cpi	r24, 0x80	; 128
    1f6e:	81 f0       	breq	.+32     	; 0x1f90 <USB_Device_ProcessControlRequest+0x76>
    1f70:	82 38       	cpi	r24, 0x82	; 130
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <USB_Device_ProcessControlRequest+0x5c>
    1f74:	10 c1       	rjmp	.+544    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f76:	80 91 e7 01 	lds	r24, 0x01E7
    1f7a:	8f 70       	andi	r24, 0x0F	; 15
    1f7c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f80:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1f84:	85 fb       	bst	r24, 5
    1f86:	88 27       	eor	r24, r24
    1f88:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f8a:	10 92 e9 00 	sts	0x00E9, r1
    1f8e:	06 c0       	rjmp	.+12     	; 0x1f9c <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f90:	80 91 df 01 	lds	r24, 0x01DF
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f94:	90 91 e0 01 	lds	r25, 0x01E0
    1f98:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f9a:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f9c:	90 91 e8 00 	lds	r25, 0x00E8
    1fa0:	97 7f       	andi	r25, 0xF7	; 247
    1fa2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1fa6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1faa:	10 92 f1 00 	sts	0x00F1, r1
    1fae:	c8 c0       	rjmp	.+400    	; 0x2140 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	2d 7f       	andi	r18, 0xFD	; 253
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <USB_Device_ProcessControlRequest+0x9e>
    1fb6:	ef c0       	rjmp	.+478    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1fb8:	88 23       	and	r24, r24
    1fba:	19 f0       	breq	.+6      	; 0x1fc2 <USB_Device_ProcessControlRequest+0xa8>
    1fbc:	82 30       	cpi	r24, 0x02	; 2
    1fbe:	61 f0       	breq	.+24     	; 0x1fd8 <USB_Device_ProcessControlRequest+0xbe>
    1fc0:	ea c0       	rjmp	.+468    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1fc2:	80 91 e5 01 	lds	r24, 0x01E5
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <USB_Device_ProcessControlRequest+0xb2>
    1fca:	e5 c0       	rjmp	.+458    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1fcc:	93 30       	cpi	r25, 0x03	; 3
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <USB_Device_ProcessControlRequest+0xb8>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	80 93 e0 01 	sts	0x01E0, r24
    1fd6:	2b c0       	rjmp	.+86     	; 0x202e <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1fd8:	80 91 e5 01 	lds	r24, 0x01E5
    1fdc:	81 11       	cpse	r24, r1
    1fde:	27 c0       	rjmp	.+78     	; 0x202e <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1fe0:	80 91 e7 01 	lds	r24, 0x01E7
    1fe4:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <USB_Device_ProcessControlRequest+0xd0>
    1fe8:	d6 c0       	rjmp	.+428    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fea:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1fee:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1ff2:	20 ff       	sbrs	r18, 0
    1ff4:	1c c0       	rjmp	.+56     	; 0x202e <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1ff6:	93 30       	cpi	r25, 0x03	; 3
    1ff8:	21 f4       	brne	.+8      	; 0x2002 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ffa:	80 91 eb 00 	lds	r24, 0x00EB
    1ffe:	80 62       	ori	r24, 0x20	; 32
    2000:	14 c0       	rjmp	.+40     	; 0x202a <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2002:	90 91 eb 00 	lds	r25, 0x00EB
    2006:	90 61       	ori	r25, 0x10	; 16
    2008:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	a9 01       	movw	r20, r18
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <USB_Device_ProcessControlRequest+0xfe>
    2014:	44 0f       	add	r20, r20
    2016:	55 1f       	adc	r21, r21
    2018:	8a 95       	dec	r24
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <USB_Device_ProcessControlRequest+0xfa>
    201c:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    2020:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2024:	80 91 eb 00 	lds	r24, 0x00EB
    2028:	88 60       	ori	r24, 0x08	; 8
    202a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    202e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2032:	80 91 e8 00 	lds	r24, 0x00E8
    2036:	87 7f       	andi	r24, 0xF7	; 247
    2038:	86 c0       	rjmp	.+268    	; 0x2146 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    203a:	81 11       	cpse	r24, r1
    203c:	ac c0       	rjmp	.+344    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    203e:	10 91 e5 01 	lds	r17, 0x01E5
    2042:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2044:	80 91 e3 00 	lds	r24, 0x00E3
    2048:	80 78       	andi	r24, 0x80	; 128
    204a:	81 2b       	or	r24, r17
    204c:	80 93 e3 00 	sts	0x00E3, r24
    2050:	80 91 e8 00 	lds	r24, 0x00E8
    2054:	87 7f       	andi	r24, 0xF7	; 247
    2056:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    205a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    205e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2062:	80 ff       	sbrs	r24, 0
    2064:	fc cf       	rjmp	.-8      	; 0x205e <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2066:	80 91 e3 00 	lds	r24, 0x00E3
    206a:	80 68       	ori	r24, 0x80	; 128
    206c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2070:	11 11       	cpse	r17, r1
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <USB_Device_ProcessControlRequest+0x15e>
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	01 c0       	rjmp	.+2      	; 0x207a <USB_Device_ProcessControlRequest+0x160>
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	80 93 e2 01 	sts	0x01E2, r24
    207e:	8b c0       	rjmp	.+278    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2080:	80 58       	subi	r24, 0x80	; 128
    2082:	82 30       	cpi	r24, 0x02	; 2
    2084:	08 f0       	brcs	.+2      	; 0x2088 <USB_Device_ProcessControlRequest+0x16e>
    2086:	87 c0       	rjmp	.+270    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2088:	80 91 e5 01 	lds	r24, 0x01E5
    208c:	90 91 e6 01 	lds	r25, 0x01E6
    2090:	8c 3d       	cpi	r24, 0xDC	; 220
    2092:	53 e0       	ldi	r21, 0x03	; 3
    2094:	95 07       	cpc	r25, r21
    2096:	79 f5       	brne	.+94     	; 0x20f6 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2098:	83 e0       	ldi	r24, 0x03	; 3
    209a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    209c:	8a e2       	ldi	r24, 0x2A	; 42
    209e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    20a0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    20a2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    20a4:	de 01       	movw	r26, r28
    20a6:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    20a8:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    20aa:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    20ac:	51 e2       	ldi	r21, 0x21	; 33
    20ae:	e3 2f       	mov	r30, r19
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	50 93 57 00 	sts	0x0057, r21
    20b6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    20b8:	20 ff       	sbrs	r18, 0
    20ba:	03 c0       	rjmp	.+6      	; 0x20c2 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    20bc:	e2 95       	swap	r30
    20be:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    20c0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    20c2:	ef 70       	andi	r30, 0x0F	; 15
    20c4:	8e 2f       	mov	r24, r30
    20c6:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    20c8:	ea 30       	cpi	r30, 0x0A	; 10
    20ca:	10 f0       	brcs	.+4      	; 0x20d0 <USB_Device_ProcessControlRequest+0x1b6>
    20cc:	c7 96       	adiw	r24, 0x37	; 55
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <USB_Device_ProcessControlRequest+0x1b8>
    20d0:	c0 96       	adiw	r24, 0x30	; 48
    20d2:	8d 93       	st	X+, r24
    20d4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    20d6:	2f 5f       	subi	r18, 0xFF	; 255
    20d8:	24 31       	cpi	r18, 0x14	; 20
    20da:	49 f7       	brne	.-46     	; 0x20ae <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    20dc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20de:	80 91 e8 00 	lds	r24, 0x00E8
    20e2:	87 7f       	andi	r24, 0xF7	; 247
    20e4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    20e8:	6a e2       	ldi	r22, 0x2A	; 42
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	ce 01       	movw	r24, r28
    20ee:	01 96       	adiw	r24, 0x01	; 1
    20f0:	0e 94 b6 0c 	call	0x196c	; 0x196c <Endpoint_Write_Control_Stream_LE>
    20f4:	14 c0       	rjmp	.+40     	; 0x211e <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    20f6:	ae 01       	movw	r20, r28
    20f8:	4f 5f       	subi	r20, 0xFF	; 255
    20fa:	5f 4f       	sbci	r21, 0xFF	; 255
    20fc:	60 91 e7 01 	lds	r22, 0x01E7
    2100:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <CALLBACK_USB_GetDescriptor>
    2104:	bc 01       	movw	r22, r24
    2106:	89 2b       	or	r24, r25
    2108:	09 f4       	brne	.+2      	; 0x210c <USB_Device_ProcessControlRequest+0x1f2>
    210a:	45 c0       	rjmp	.+138    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
    210c:	90 91 e8 00 	lds	r25, 0x00E8
    2110:	97 7f       	andi	r25, 0xF7	; 247
    2112:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    211e:	80 91 e8 00 	lds	r24, 0x00E8
    2122:	8b 77       	andi	r24, 0x7B	; 123
    2124:	80 93 e8 00 	sts	0x00E8, r24
    2128:	36 c0       	rjmp	.+108    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    212a:	80 38       	cpi	r24, 0x80	; 128
    212c:	a1 f5       	brne	.+104    	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    212e:	80 91 e8 00 	lds	r24, 0x00E8
    2132:	87 7f       	andi	r24, 0xF7	; 247
    2134:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2138:	80 91 de 01 	lds	r24, 0x01DE
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    213c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2140:	80 91 e8 00 	lds	r24, 0x00E8
    2144:	8e 77       	andi	r24, 0x7E	; 126
    2146:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    214a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Endpoint_ClearStatusStage>
    214e:	23 c0       	rjmp	.+70     	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2150:	81 11       	cpse	r24, r1
    2152:	21 c0       	rjmp	.+66     	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2154:	80 91 e5 01 	lds	r24, 0x01E5
    2158:	90 91 e6 01 	lds	r25, 0x01E6
    215c:	99 27       	eor	r25, r25
    215e:	02 97       	sbiw	r24, 0x02	; 2
    2160:	d4 f4       	brge	.+52     	; 0x2196 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2162:	80 91 e8 00 	lds	r24, 0x00E8
    2166:	87 7f       	andi	r24, 0xF7	; 247
    2168:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    216c:	80 91 e5 01 	lds	r24, 0x01E5
    2170:	80 93 de 01 	sts	0x01DE, r24

	Endpoint_ClearStatusStage();
    2174:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2178:	80 91 de 01 	lds	r24, 0x01DE
    217c:	81 11       	cpse	r24, r1
    217e:	06 c0       	rjmp	.+12     	; 0x218c <USB_Device_ProcessControlRequest+0x272>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2180:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2184:	87 fd       	sbrc	r24, 7
    2186:	02 c0       	rjmp	.+4      	; 0x218c <USB_Device_ProcessControlRequest+0x272>
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	01 c0       	rjmp	.+2      	; 0x218e <USB_Device_ProcessControlRequest+0x274>
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	80 93 e2 01 	sts	0x01E2, r24

	EVENT_USB_Device_ConfigurationChanged();
    2192:	0e 94 ca 0a 	call	0x1594	; 0x1594 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2196:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    219a:	83 ff       	sbrs	r24, 3
    219c:	0a c0       	rjmp	.+20     	; 0x21b2 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    219e:	80 91 e8 00 	lds	r24, 0x00E8
    21a2:	87 7f       	andi	r24, 0xF7	; 247
    21a4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    21a8:	80 91 eb 00 	lds	r24, 0x00EB
    21ac:	80 62       	ori	r24, 0x20	; 32
    21ae:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    21b2:	aa 96       	adiw	r28, 0x2a	; 42
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	08 95       	ret

000021c6 <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    21c6:	90 93 6c 01 	sts	0x016C, r25
    21ca:	80 93 6b 01 	sts	0x016B, r24
    21ce:	08 95       	ret

000021d0 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    21d0:	e0 91 6b 01 	lds	r30, 0x016B
    21d4:	f0 91 6c 01 	lds	r31, 0x016C
    21d8:	30 97       	sbiw	r30, 0x00	; 0
    21da:	21 f0       	breq	.+8      	; 0x21e4 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    21dc:	01 90       	ld	r0, Z+
    21de:	f0 81       	ld	r31, Z
    21e0:	e0 2d       	mov	r30, r0
    21e2:	09 94       	ijmp
}
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	08 95       	ret

000021e8 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    21e8:	ef 92       	push	r14
    21ea:	ff 92       	push	r15
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	f8 2e       	mov	r15, r24
    21f4:	19 2f       	mov	r17, r25
    if (!driver) return;
    21f6:	e0 91 6b 01 	lds	r30, 0x016B
    21fa:	f0 91 6c 01 	lds	r31, 0x016C
    21fe:	30 97       	sbiw	r30, 0x00	; 0
    2200:	a9 f1       	breq	.+106    	; 0x226c <host_keyboard_send+0x84>
    (*driver->send_keyboard)(report);
    2202:	02 80       	ldd	r0, Z+2	; 0x02
    2204:	f3 81       	ldd	r31, Z+3	; 0x03
    2206:	e0 2d       	mov	r30, r0
    2208:	09 95       	icall

    if (debug_keyboard) {
    220a:	80 91 cd 01 	lds	r24, 0x01CD
    220e:	82 ff       	sbrs	r24, 2
    2210:	2d c0       	rjmp	.+90     	; 0x226c <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    2212:	80 ff       	sbrs	r24, 0
    2214:	04 c0       	rjmp	.+8      	; 0x221e <host_keyboard_send+0x36>
    2216:	83 eb       	ldi	r24, 0xB3	; 179
    2218:	94 e0       	ldi	r25, 0x04	; 4
    221a:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    221e:	cf 2d       	mov	r28, r15
    2220:	d1 2f       	mov	r29, r17
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2222:	10 e1       	ldi	r17, 0x10	; 16
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2224:	8d ea       	ldi	r24, 0xAD	; 173
    2226:	e8 2e       	mov	r14, r24
    2228:	84 e0       	ldi	r24, 0x04	; 4
    222a:	f8 2e       	mov	r15, r24
    222c:	80 91 cd 01 	lds	r24, 0x01CD
    2230:	80 ff       	sbrs	r24, 0
    2232:	0b c0       	rjmp	.+22     	; 0x224a <host_keyboard_send+0x62>
    2234:	88 81       	ld	r24, Y
    2236:	1f 92       	push	r1
    2238:	8f 93       	push	r24
    223a:	ff 92       	push	r15
    223c:	ef 92       	push	r14
    223e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	11 50       	subi	r17, 0x01	; 1
    224c:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    224e:	11 11       	cpse	r17, r1
    2250:	ed cf       	rjmp	.-38     	; 0x222c <host_keyboard_send+0x44>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2252:	80 91 cd 01 	lds	r24, 0x01CD
    2256:	80 ff       	sbrs	r24, 0
    2258:	09 c0       	rjmp	.+18     	; 0x226c <host_keyboard_send+0x84>
    225a:	8b ea       	ldi	r24, 0xAB	; 171
    225c:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	1f 91       	pop	r17
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2268:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <xputs>
    }
}
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	08 95       	ret

00002278 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2278:	e0 91 6b 01 	lds	r30, 0x016B
    227c:	f0 91 6c 01 	lds	r31, 0x016C
    2280:	30 97       	sbiw	r30, 0x00	; 0
    2282:	21 f0       	breq	.+8      	; 0x228c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2284:	04 80       	ldd	r0, Z+4	; 0x04
    2286:	f5 81       	ldd	r31, Z+5	; 0x05
    2288:	e0 2d       	mov	r30, r0
    228a:	09 94       	ijmp
    228c:	08 95       	ret

0000228e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    228e:	20 91 69 01 	lds	r18, 0x0169
    2292:	30 91 6a 01 	lds	r19, 0x016A
    2296:	28 17       	cp	r18, r24
    2298:	39 07       	cpc	r19, r25
    229a:	71 f0       	breq	.+28     	; 0x22b8 <host_system_send+0x2a>
    last_system_report = report;
    229c:	90 93 6a 01 	sts	0x016A, r25
    22a0:	80 93 69 01 	sts	0x0169, r24

    if (!driver) return;
    22a4:	e0 91 6b 01 	lds	r30, 0x016B
    22a8:	f0 91 6c 01 	lds	r31, 0x016C
    22ac:	30 97       	sbiw	r30, 0x00	; 0
    22ae:	21 f0       	breq	.+8      	; 0x22b8 <host_system_send+0x2a>
    (*driver->send_system)(report);
    22b0:	06 80       	ldd	r0, Z+6	; 0x06
    22b2:	f7 81       	ldd	r31, Z+7	; 0x07
    22b4:	e0 2d       	mov	r30, r0
    22b6:	09 94       	ijmp
    22b8:	08 95       	ret

000022ba <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    22ba:	20 91 67 01 	lds	r18, 0x0167
    22be:	30 91 68 01 	lds	r19, 0x0168
    22c2:	28 17       	cp	r18, r24
    22c4:	39 07       	cpc	r19, r25
    22c6:	71 f0       	breq	.+28     	; 0x22e4 <host_consumer_send+0x2a>
    last_consumer_report = report;
    22c8:	90 93 68 01 	sts	0x0168, r25
    22cc:	80 93 67 01 	sts	0x0167, r24

    if (!driver) return;
    22d0:	e0 91 6b 01 	lds	r30, 0x016B
    22d4:	f0 91 6c 01 	lds	r31, 0x016C
    22d8:	30 97       	sbiw	r30, 0x00	; 0
    22da:	21 f0       	breq	.+8      	; 0x22e4 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    22dc:	00 84       	ldd	r0, Z+8	; 0x08
    22de:	f1 85       	ldd	r31, Z+9	; 0x09
    22e0:	e0 2d       	mov	r30, r0
    22e2:	09 94       	ijmp
    22e4:	08 95       	ret

000022e6 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    22e6:	08 95       	ret

000022e8 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    22e8:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <matrix_setup>

000022ec <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    22ec:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <timer_init>
    matrix_init();
    22f0:	0e 94 75 07 	call	0xeea	; 0xeea <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    22f4:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <bootmagic>

000022f8 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    22f8:	5f 92       	push	r5
    22fa:	6f 92       	push	r6
    22fc:	7f 92       	push	r7
    22fe:	8f 92       	push	r8
    2300:	9f 92       	push	r9
    2302:	af 92       	push	r10
    2304:	bf 92       	push	r11
    2306:	cf 92       	push	r12
    2308:	df 92       	push	r13
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	00 d0       	rcall	.+0      	; 0x2318 <keyboard_task+0x20>
    2318:	00 d0       	rcall	.+0      	; 0x231a <keyboard_task+0x22>
    231a:	1f 92       	push	r1
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2320:	0e 94 96 07 	call	0xf2c	; 0xf2c <matrix_scan>
    2324:	9e e6       	ldi	r25, 0x6E	; 110
    2326:	c9 2e       	mov	r12, r25
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	d9 2e       	mov	r13, r25
    232c:	00 e0       	ldi	r16, 0x00	; 0
    232e:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2330:	aa 24       	eor	r10, r10
    2332:	a3 94       	inc	r10
    2334:	b1 2c       	mov	r11, r1
    2336:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2338:	80 2f       	mov	r24, r16
    233a:	0e 94 cf 08 	call	0x119e	; 0x119e <matrix_get_row>
    233e:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2340:	f6 01       	movw	r30, r12
    2342:	61 90       	ld	r6, Z+
    2344:	71 90       	ld	r7, Z+
    2346:	6f 01       	movw	r12, r30
    2348:	68 26       	eor	r6, r24
    234a:	79 26       	eor	r7, r25
        if (matrix_change) {
    234c:	61 14       	cp	r6, r1
    234e:	71 04       	cpc	r7, r1
    2350:	b1 f4       	brne	.+44     	; 0x237e <keyboard_task+0x86>
    2352:	0f 5f       	subi	r16, 0xFF	; 255
    2354:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2356:	06 30       	cpi	r16, 0x06	; 6
    2358:	11 05       	cpc	r17, r1
    235a:	69 f7       	brne	.-38     	; 0x2336 <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    235c:	8f ef       	ldi	r24, 0xFF	; 255
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	8a 83       	std	Y+2, r24	; 0x02
    2362:	1b 82       	std	Y+3, r1	; 0x03
    2364:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <timer_read>
    2368:	81 60       	ori	r24, 0x01	; 1
    236a:	78 2f       	mov	r23, r24
    236c:	9d 83       	std	Y+5, r25	; 0x05
    236e:	8c 83       	std	Y+4, r24	; 0x04
    2370:	49 81       	ldd	r20, Y+1	; 0x01
    2372:	5a 81       	ldd	r21, Y+2	; 0x02
    2374:	6b 81       	ldd	r22, Y+3	; 0x03
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	0e 94 50 12 	call	0x24a0	; 0x24a0 <action_exec>
    237c:	41 c0       	rjmp	.+130    	; 0x2400 <keyboard_task+0x108>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    237e:	80 91 cd 01 	lds	r24, 0x01CD
    2382:	81 fd       	sbrc	r24, 1
    2384:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    238c:	75 01       	movw	r14, r10
    238e:	02 2e       	mov	r0, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <keyboard_task+0x9e>
    2392:	ee 0c       	add	r14, r14
    2394:	ff 1c       	adc	r15, r15
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <keyboard_task+0x9a>
    239a:	c3 01       	movw	r24, r6
    239c:	8e 21       	and	r24, r14
    239e:	9f 21       	and	r25, r15
    23a0:	89 2b       	or	r24, r25
    23a2:	41 f1       	breq	.+80     	; 0x23f4 <keyboard_task+0xfc>
                    keyevent_t e = (keyevent_t){
    23a4:	29 83       	std	Y+1, r18	; 0x01
    23a6:	5a 82       	std	Y+2, r5	; 0x02
    23a8:	8e 20       	and	r8, r14
    23aa:	9f 20       	and	r9, r15
    23ac:	91 e0       	ldi	r25, 0x01	; 1
    23ae:	89 28       	or	r8, r9
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <keyboard_task+0xbc>
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    23b6:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <timer_read>
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    23ba:	81 60       	ori	r24, 0x01	; 1
    23bc:	78 2f       	mov	r23, r24
    23be:	9d 83       	std	Y+5, r25	; 0x05
    23c0:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    23c2:	49 81       	ldd	r20, Y+1	; 0x01
    23c4:	5a 81       	ldd	r21, Y+2	; 0x02
    23c6:	6b 81       	ldd	r22, Y+3	; 0x03
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	0e 94 50 12 	call	0x24a0	; 0x24a0 <action_exec>
                    hook_matrix_change(e);
    23ce:	49 81       	ldd	r20, Y+1	; 0x01
    23d0:	5a 81       	ldd	r21, Y+2	; 0x02
    23d2:	6b 81       	ldd	r22, Y+3	; 0x03
    23d4:	7c 81       	ldd	r23, Y+4	; 0x04
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    23dc:	00 0f       	add	r16, r16
    23de:	11 1f       	adc	r17, r17
    23e0:	f8 01       	movw	r30, r16
    23e2:	e2 59       	subi	r30, 0x92	; 146
    23e4:	fe 4f       	sbci	r31, 0xFE	; 254
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	e8 26       	eor	r14, r24
    23ec:	f9 26       	eor	r15, r25
    23ee:	f1 82       	std	Z+1, r15	; 0x01
    23f0:	e0 82       	st	Z, r14
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <keyboard_task+0x108>
    23f4:	2f 5f       	subi	r18, 0xFF	; 255
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    23f8:	2f 30       	cpi	r18, 0x0F	; 15
    23fa:	31 05       	cpc	r19, r1
    23fc:	39 f6       	brne	.-114    	; 0x238c <keyboard_task+0x94>
    23fe:	a9 cf       	rjmp	.-174    	; 0x2352 <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    2400:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2404:	0e 94 73 23 	call	0x46e6	; 0x46e6 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2408:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    240c:	90 91 6d 01 	lds	r25, 0x016D
    2410:	89 17       	cp	r24, r25
    2412:	71 f1       	breq	.+92     	; 0x2470 <keyboard_task+0x178>
        led_status = host_keyboard_leds();
    2414:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    2418:	80 93 6d 01 	sts	0x016D, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    241c:	90 91 cd 01 	lds	r25, 0x01CD
    2420:	92 ff       	sbrs	r25, 2
    2422:	0e c0       	rjmp	.+28     	; 0x2440 <keyboard_task+0x148>
    2424:	90 ff       	sbrs	r25, 0
    2426:	0c c0       	rjmp	.+24     	; 0x2440 <keyboard_task+0x148>
    2428:	1f 92       	push	r1
    242a:	8f 93       	push	r24
    242c:	85 ec       	ldi	r24, 0xC5	; 197
    242e:	94 e0       	ldi	r25, 0x04	; 4
    2430:	9f 93       	push	r25
    2432:	8f 93       	push	r24
    2434:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2440:	80 91 6d 01 	lds	r24, 0x016D
    }
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	9f 90       	pop	r9
    2464:	8f 90       	pop	r8
    2466:	7f 90       	pop	r7
    2468:	6f 90       	pop	r6
    246a:	5f 90       	pop	r5

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    246c:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <hook_keyboard_leds_change>
    }
}
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	df 90       	pop	r13
    2488:	cf 90       	pop	r12
    248a:	bf 90       	pop	r11
    248c:	af 90       	pop	r10
    248e:	9f 90       	pop	r9
    2490:	8f 90       	pop	r8
    2492:	7f 90       	pop	r7
    2494:	6f 90       	pop	r6
    2496:	5f 90       	pop	r5
    2498:	08 95       	ret

0000249a <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0c 94 26 09 	jmp	0x124c	; 0x124c <led_set>

000024a0 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	2b 97       	sbiw	r28, 0x0b	; 11
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	4f 83       	std	Y+7, r20	; 0x07
    24b6:	58 87       	std	Y+8, r21	; 0x08
    24b8:	69 87       	std	Y+9, r22	; 0x09
    24ba:	7a 87       	std	Y+10, r23	; 0x0a
    24bc:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    24be:	8a 85       	ldd	r24, Y+10	; 0x0a
    24c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24c2:	89 2b       	or	r24, r25
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <action_exec+0x30>
    24c6:	ca 01       	movw	r24, r20
    24c8:	9f 3f       	cpi	r25, 0xFF	; 255
    24ca:	09 f5       	brne	.+66     	; 0x250e <action_exec+0x6e>
    24cc:	4f 3f       	cpi	r20, 0xFF	; 255
    24ce:	f9 f4       	brne	.+62     	; 0x250e <action_exec+0x6e>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    24d0:	de 01       	movw	r26, r28
    24d2:	11 96       	adiw	r26, 0x01	; 1
    24d4:	86 e0       	ldi	r24, 0x06	; 6
    24d6:	fd 01       	movw	r30, r26
    24d8:	11 92       	st	Z+, r1
    24da:	8a 95       	dec	r24
    24dc:	e9 f7       	brne	.-6      	; 0x24d8 <action_exec+0x38>
    24de:	85 e0       	ldi	r24, 0x05	; 5
    24e0:	fe 01       	movw	r30, r28
    24e2:	37 96       	adiw	r30, 0x07	; 7
    24e4:	01 90       	ld	r0, Z+
    24e6:	0d 92       	st	X+, r0
    24e8:	8a 95       	dec	r24
    24ea:	e1 f7       	brne	.-8      	; 0x24e4 <action_exec+0x44>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    24ec:	49 81       	ldd	r20, Y+1	; 0x01
    24ee:	5a 81       	ldd	r21, Y+2	; 0x02
    24f0:	6b 81       	ldd	r22, Y+3	; 0x03
    24f2:	7c 81       	ldd	r23, Y+4	; 0x04
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	0e 94 78 19 	call	0x32f0	; 0x32f0 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    24fc:	2b 96       	adiw	r28, 0x0b	; 11
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	08 95       	ret
void action_exec(keyevent_t event)
{
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    250e:	4f 81       	ldd	r20, Y+7	; 0x07
    2510:	58 85       	ldd	r21, Y+8	; 0x08
    2512:	69 85       	ldd	r22, Y+9	; 0x09
    2514:	7a 85       	ldd	r23, Y+10	; 0x0a
    2516:	8b 85       	ldd	r24, Y+11	; 0x0b
    2518:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <hook_matrix_change>
    251c:	d9 cf       	rjmp	.-78     	; 0x24d0 <action_exec+0x30>

0000251e <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    251e:	cf 93       	push	r28
    2520:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2522:	88 23       	and	r24, r24
    2524:	09 f4       	brne	.+2      	; 0x2528 <register_code+0xa>
    2526:	cc c0       	rjmp	.+408    	; 0x26c0 <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2528:	82 38       	cpi	r24, 0x82	; 130
    252a:	59 f4       	brne	.+22     	; 0x2542 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    252c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    2530:	81 fd       	sbrc	r24, 1
    2532:	c6 c0       	rjmp	.+396    	; 0x26c0 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    2534:	89 e3       	ldi	r24, 0x39	; 57
    2536:	0e 94 10 1c 	call	0x3820	; 0x3820 <add_key>
        send_keyboard_report();
    253a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    253e:	89 e3       	ldi	r24, 0x39	; 57
    2540:	0c c0       	rjmp	.+24     	; 0x255a <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2542:	83 38       	cpi	r24, 0x83	; 131
    2544:	79 f4       	brne	.+30     	; 0x2564 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2546:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    254a:	80 fd       	sbrc	r24, 0
    254c:	b9 c0       	rjmp	.+370    	; 0x26c0 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    254e:	83 e5       	ldi	r24, 0x53	; 83
    2550:	0e 94 10 1c 	call	0x3820	; 0x3820 <add_key>
        send_keyboard_report();
    2554:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2558:	83 e5       	ldi	r24, 0x53	; 83
    255a:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    255e:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2560:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2564:	84 38       	cpi	r24, 0x84	; 132
    2566:	59 f4       	brne	.+22     	; 0x257e <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2568:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    256c:	82 fd       	sbrc	r24, 2
    256e:	a8 c0       	rjmp	.+336    	; 0x26c0 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    2570:	87 e4       	ldi	r24, 0x47	; 71
    2572:	0e 94 10 1c 	call	0x3820	; 0x3820 <add_key>
        send_keyboard_report();
    2576:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    257a:	87 e4       	ldi	r24, 0x47	; 71
    257c:	ee cf       	rjmp	.-36     	; 0x255a <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    257e:	8c ef       	ldi	r24, 0xFC	; 252
    2580:	8c 0f       	add	r24, r28
    2582:	81 3a       	cpi	r24, 0xA1	; 161
    2584:	48 f4       	brcc	.+18     	; 0x2598 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2586:	8c 2f       	mov	r24, r28
    2588:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <command_proc>
    258c:	81 11       	cpse	r24, r1
    258e:	98 c0       	rjmp	.+304    	; 0x26c0 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2590:	8c 2f       	mov	r24, r28
    2592:	0e 94 10 1c 	call	0x3820	; 0x3820 <add_key>
    2596:	e3 cf       	rjmp	.-58     	; 0x255e <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2598:	80 e2       	ldi	r24, 0x20	; 32
    259a:	8c 0f       	add	r24, r28
    259c:	88 30       	cpi	r24, 0x08	; 8
    259e:	48 f4       	brcc	.+18     	; 0x25b2 <register_code+0x94>
        add_mods(MOD_BIT(code));
    25a0:	c7 70       	andi	r28, 0x07	; 7
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	01 c0       	rjmp	.+2      	; 0x25a8 <register_code+0x8a>
    25a6:	88 0f       	add	r24, r24
    25a8:	ca 95       	dec	r28
    25aa:	ea f7       	brpl	.-6      	; 0x25a6 <register_code+0x88>
    25ac:	0e 94 b6 1c 	call	0x396c	; 0x396c <add_mods>
    25b0:	d6 cf       	rjmp	.-84     	; 0x255e <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    25b2:	8b e5       	ldi	r24, 0x5B	; 91
    25b4:	8c 0f       	add	r24, r28
    25b6:	83 30       	cpi	r24, 0x03	; 3
    25b8:	78 f4       	brcc	.+30     	; 0x25d8 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    25ba:	c5 3a       	cpi	r28, 0xA5	; 165
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <register_code+0xaa>
    25be:	c6 3a       	cpi	r28, 0xA6	; 166
    25c0:	31 f0       	breq	.+12     	; 0x25ce <register_code+0xb0>
    25c2:	83 e8       	ldi	r24, 0x83	; 131
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <register_code+0xb4>
    25c8:	81 e8       	ldi	r24, 0x81	; 129
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <register_code+0xb4>
    25ce:	82 e8       	ldi	r24, 0x82	; 130
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    25d2:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    25d4:	0c 94 47 11 	jmp	0x228e	; 0x228e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    25d8:	88 e5       	ldi	r24, 0x58	; 88
    25da:	8c 0f       	add	r24, r28
    25dc:	85 31       	cpi	r24, 0x15	; 21
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <register_code+0xc4>
    25e0:	6f c0       	rjmp	.+222    	; 0x26c0 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    25e2:	c8 3a       	cpi	r28, 0xA8	; 168
    25e4:	61 f1       	breq	.+88     	; 0x263e <register_code+0x120>
    25e6:	c9 3a       	cpi	r28, 0xA9	; 169
    25e8:	69 f1       	breq	.+90     	; 0x2644 <register_code+0x126>
    25ea:	ca 3a       	cpi	r28, 0xAA	; 170
    25ec:	71 f1       	breq	.+92     	; 0x264a <register_code+0x12c>
    25ee:	cb 3a       	cpi	r28, 0xAB	; 171
    25f0:	79 f1       	breq	.+94     	; 0x2650 <register_code+0x132>
    25f2:	cc 3a       	cpi	r28, 0xAC	; 172
    25f4:	81 f1       	breq	.+96     	; 0x2656 <register_code+0x138>
    25f6:	cd 3a       	cpi	r28, 0xAD	; 173
    25f8:	89 f1       	breq	.+98     	; 0x265c <register_code+0x13e>
    25fa:	ce 3a       	cpi	r28, 0xAE	; 174
    25fc:	91 f1       	breq	.+100    	; 0x2662 <register_code+0x144>
    25fe:	cf 3a       	cpi	r28, 0xAF	; 175
    2600:	99 f1       	breq	.+102    	; 0x2668 <register_code+0x14a>
    2602:	c1 3b       	cpi	r28, 0xB1	; 177
    2604:	a1 f1       	breq	.+104    	; 0x266e <register_code+0x150>
    2606:	c0 3b       	cpi	r28, 0xB0	; 176
    2608:	a9 f1       	breq	.+106    	; 0x2674 <register_code+0x156>
    260a:	c2 3b       	cpi	r28, 0xB2	; 178
    260c:	b1 f1       	breq	.+108    	; 0x267a <register_code+0x15c>
    260e:	c3 3b       	cpi	r28, 0xB3	; 179
    2610:	b9 f1       	breq	.+110    	; 0x2680 <register_code+0x162>
    2612:	c4 3b       	cpi	r28, 0xB4	; 180
    2614:	c1 f1       	breq	.+112    	; 0x2686 <register_code+0x168>
    2616:	c5 3b       	cpi	r28, 0xB5	; 181
    2618:	c9 f1       	breq	.+114    	; 0x268c <register_code+0x16e>
    261a:	c6 3b       	cpi	r28, 0xB6	; 182
    261c:	d1 f1       	breq	.+116    	; 0x2692 <register_code+0x174>
    261e:	c7 3b       	cpi	r28, 0xB7	; 183
    2620:	d9 f1       	breq	.+118    	; 0x2698 <register_code+0x17a>
    2622:	c8 3b       	cpi	r28, 0xB8	; 184
    2624:	e1 f1       	breq	.+120    	; 0x269e <register_code+0x180>
    2626:	c9 3b       	cpi	r28, 0xB9	; 185
    2628:	e9 f1       	breq	.+122    	; 0x26a4 <register_code+0x186>
    262a:	ca 3b       	cpi	r28, 0xBA	; 186
    262c:	f1 f1       	breq	.+124    	; 0x26aa <register_code+0x18c>
    262e:	cb 3b       	cpi	r28, 0xBB	; 187
    2630:	f9 f1       	breq	.+126    	; 0x26b0 <register_code+0x192>
    2632:	cc 3b       	cpi	r28, 0xBC	; 188
    2634:	09 f4       	brne	.+2      	; 0x2638 <register_code+0x11a>
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <register_code+0x198>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	3e c0       	rjmp	.+124    	; 0x26ba <register_code+0x19c>
    263e:	82 ee       	ldi	r24, 0xE2	; 226
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	3b c0       	rjmp	.+118    	; 0x26ba <register_code+0x19c>
    2644:	89 ee       	ldi	r24, 0xE9	; 233
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	38 c0       	rjmp	.+112    	; 0x26ba <register_code+0x19c>
    264a:	8a ee       	ldi	r24, 0xEA	; 234
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	35 c0       	rjmp	.+106    	; 0x26ba <register_code+0x19c>
    2650:	85 eb       	ldi	r24, 0xB5	; 181
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	32 c0       	rjmp	.+100    	; 0x26ba <register_code+0x19c>
    2656:	86 eb       	ldi	r24, 0xB6	; 182
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	2f c0       	rjmp	.+94     	; 0x26ba <register_code+0x19c>
    265c:	83 eb       	ldi	r24, 0xB3	; 179
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	2c c0       	rjmp	.+88     	; 0x26ba <register_code+0x19c>
    2662:	84 eb       	ldi	r24, 0xB4	; 180
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	29 c0       	rjmp	.+82     	; 0x26ba <register_code+0x19c>
    2668:	87 eb       	ldi	r24, 0xB7	; 183
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	26 c0       	rjmp	.+76     	; 0x26ba <register_code+0x19c>
    266e:	8c ec       	ldi	r24, 0xCC	; 204
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	23 c0       	rjmp	.+70     	; 0x26ba <register_code+0x19c>
    2674:	8d ec       	ldi	r24, 0xCD	; 205
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	20 c0       	rjmp	.+64     	; 0x26ba <register_code+0x19c>
    267a:	83 e8       	ldi	r24, 0x83	; 131
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	1d c0       	rjmp	.+58     	; 0x26ba <register_code+0x19c>
    2680:	8a e8       	ldi	r24, 0x8A	; 138
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	1a c0       	rjmp	.+52     	; 0x26ba <register_code+0x19c>
    2686:	82 e9       	ldi	r24, 0x92	; 146
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	17 c0       	rjmp	.+46     	; 0x26ba <register_code+0x19c>
    268c:	84 e9       	ldi	r24, 0x94	; 148
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <register_code+0x19c>
    2692:	81 e2       	ldi	r24, 0x21	; 33
    2694:	92 e0       	ldi	r25, 0x02	; 2
    2696:	11 c0       	rjmp	.+34     	; 0x26ba <register_code+0x19c>
    2698:	83 e2       	ldi	r24, 0x23	; 35
    269a:	92 e0       	ldi	r25, 0x02	; 2
    269c:	0e c0       	rjmp	.+28     	; 0x26ba <register_code+0x19c>
    269e:	84 e2       	ldi	r24, 0x24	; 36
    26a0:	92 e0       	ldi	r25, 0x02	; 2
    26a2:	0b c0       	rjmp	.+22     	; 0x26ba <register_code+0x19c>
    26a4:	85 e2       	ldi	r24, 0x25	; 37
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	08 c0       	rjmp	.+16     	; 0x26ba <register_code+0x19c>
    26aa:	86 e2       	ldi	r24, 0x26	; 38
    26ac:	92 e0       	ldi	r25, 0x02	; 2
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba <register_code+0x19c>
    26b0:	87 e2       	ldi	r24, 0x27	; 39
    26b2:	92 e0       	ldi	r25, 0x02	; 2
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <register_code+0x19c>
    26b6:	8a e2       	ldi	r24, 0x2A	; 42
    26b8:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    26ba:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    26bc:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <host_consumer_send>
    }
}
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    26c4:	88 23       	and	r24, r24
    26c6:	09 f4       	brne	.+2      	; 0x26ca <unregister_code+0x6>
    26c8:	4b c0       	rjmp	.+150    	; 0x2760 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    26ca:	82 38       	cpi	r24, 0x82	; 130
    26cc:	59 f4       	brne	.+22     	; 0x26e4 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    26ce:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    26d2:	81 ff       	sbrs	r24, 1
    26d4:	45 c0       	rjmp	.+138    	; 0x2760 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    26d6:	89 e3       	ldi	r24, 0x39	; 57
    26d8:	0e 94 10 1c 	call	0x3820	; 0x3820 <add_key>
        send_keyboard_report();
    26dc:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    26e0:	89 e3       	ldi	r24, 0x39	; 57
    26e2:	0c c0       	rjmp	.+24     	; 0x26fc <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    26e4:	83 38       	cpi	r24, 0x83	; 131
    26e6:	71 f4       	brne	.+28     	; 0x2704 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    26e8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    26ec:	80 ff       	sbrs	r24, 0
    26ee:	38 c0       	rjmp	.+112    	; 0x2760 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    26f0:	83 e5       	ldi	r24, 0x53	; 83
    26f2:	0e 94 10 1c 	call	0x3820	; 0x3820 <add_key>
        send_keyboard_report();
    26f6:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    26fa:	83 e5       	ldi	r24, 0x53	; 83
    26fc:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <del_key>
        send_keyboard_report();
    2700:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2704:	84 38       	cpi	r24, 0x84	; 132
    2706:	59 f4       	brne	.+22     	; 0x271e <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2708:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    270c:	82 ff       	sbrs	r24, 2
    270e:	28 c0       	rjmp	.+80     	; 0x2760 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2710:	87 e4       	ldi	r24, 0x47	; 71
    2712:	0e 94 10 1c 	call	0x3820	; 0x3820 <add_key>
        send_keyboard_report();
    2716:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    271a:	87 e4       	ldi	r24, 0x47	; 71
    271c:	ef cf       	rjmp	.-34     	; 0x26fc <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    271e:	9c ef       	ldi	r25, 0xFC	; 252
    2720:	98 0f       	add	r25, r24
    2722:	91 3a       	cpi	r25, 0xA1	; 161
    2724:	58 f3       	brcs	.-42     	; 0x26fc <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2726:	90 e2       	ldi	r25, 0x20	; 32
    2728:	98 0f       	add	r25, r24
    272a:	98 30       	cpi	r25, 0x08	; 8
    272c:	50 f4       	brcc	.+20     	; 0x2742 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    272e:	87 70       	andi	r24, 0x07	; 7
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <unregister_code+0x72>
    2734:	99 0f       	add	r25, r25
    2736:	8a 95       	dec	r24
    2738:	ea f7       	brpl	.-6      	; 0x2734 <unregister_code+0x70>
    273a:	89 2f       	mov	r24, r25
    273c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <del_mods>
    2740:	df cf       	rjmp	.-66     	; 0x2700 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2742:	9b e5       	ldi	r25, 0x5B	; 91
    2744:	98 0f       	add	r25, r24
    2746:	93 30       	cpi	r25, 0x03	; 3
    2748:	20 f4       	brcc	.+8      	; 0x2752 <unregister_code+0x8e>
        host_system_send(0);
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0c 94 47 11 	jmp	0x228e	; 0x228e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2752:	88 5a       	subi	r24, 0xA8	; 168
    2754:	85 31       	cpi	r24, 0x15	; 21
    2756:	20 f4       	brcc	.+8      	; 0x2760 <unregister_code+0x9c>
        host_consumer_send(0);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <host_consumer_send>
    2760:	08 95       	ret

00002762 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2762:	88 23       	and	r24, r24
    2764:	21 f0       	breq	.+8      	; 0x276e <register_mods+0xc>
        add_mods(mods);
    2766:	0e 94 b6 1c 	call	0x396c	; 0x396c <add_mods>
        send_keyboard_report();
    276a:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <send_keyboard_report>
    276e:	08 95       	ret

00002770 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2770:	88 23       	and	r24, r24
    2772:	21 f0       	breq	.+8      	; 0x277c <unregister_mods+0xc>
        del_mods(mods);
    2774:	0e 94 bc 1c 	call	0x3978	; 0x3978 <del_mods>
        send_keyboard_report();
    2778:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <send_keyboard_report>
    277c:	08 95       	ret

0000277e <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    277e:	bf 92       	push	r11
    2780:	cf 92       	push	r12
    2782:	df 92       	push	r13
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	00 d0       	rcall	.+0      	; 0x2792 <process_action+0x14>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <process_action+0x16>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <process_action+0x18>
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    279c:	85 e0       	ldi	r24, 0x05	; 5
    279e:	f6 01       	movw	r30, r12
    27a0:	de 01       	movw	r26, r28
    27a2:	11 96       	adiw	r26, 0x01	; 1
    27a4:	01 90       	ld	r0, Z+
    27a6:	0d 92       	st	X+, r0
    27a8:	8a 95       	dec	r24
    27aa:	e1 f7       	brne	.-8      	; 0x27a4 <process_action+0x26>
    27ac:	f6 01       	movw	r30, r12
    27ae:	83 81       	ldd	r24, Z+3	; 0x03
    27b0:	94 81       	ldd	r25, Z+4	; 0x04
    27b2:	89 2b       	or	r24, r25
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <process_action+0x3a>
    27b6:	e6 c2       	rjmp	.+1484   	; 0x2d84 <process_action+0x606>
    27b8:	90 81       	ld	r25, Z
    27ba:	81 81       	ldd	r24, Z+1	; 0x01
    27bc:	8f 3f       	cpi	r24, 0xFF	; 255
    27be:	19 f4       	brne	.+6      	; 0x27c6 <process_action+0x48>
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }
    27c0:	9f 3f       	cpi	r25, 0xFF	; 255
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <process_action+0x48>
    27c4:	df c2       	rjmp	.+1470   	; 0x2d84 <process_action+0x606>
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
    27c6:	f6 01       	movw	r30, r12
    27c8:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    27ca:	25 81       	ldd	r18, Z+5	; 0x05
    27cc:	22 95       	swap	r18
    27ce:	2f 70       	andi	r18, 0x0F	; 15
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    27d0:	99 83       	std	Y+1, r25	; 0x01
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	2e 83       	std	Y+6, r18	; 0x06
    27da:	0e 94 cf 1b 	call	0x379e	; 0x379e <layer_switch_get_action>
    27de:	18 2f       	mov	r17, r24
    27e0:	b9 2e       	mov	r11, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    27e2:	0e 94 ce 1b 	call	0x379c	; 0x379c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    27e6:	0e 94 de 1a 	call	0x35bc	; 0x35bc <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    27ea:	eb 2d       	mov	r30, r11
    27ec:	e2 95       	swap	r30
    27ee:	ef 70       	andi	r30, 0x0F	; 15
    27f0:	4e 2f       	mov	r20, r30
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	fa 01       	movw	r30, r20
    27f6:	e0 5a       	subi	r30, 0xA0	; 160
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	2e 81       	ldd	r18, Y+6	; 0x06
    27fc:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2800:	8b 2d       	mov	r24, r11
    2802:	80 7f       	andi	r24, 0xF0	; 240
    2804:	9b 2d       	mov	r25, r11
    2806:	9f 70       	andi	r25, 0x0F	; 15
    2808:	09 2f       	mov	r16, r25
    280a:	88 23       	and	r24, r24
    280c:	11 f0       	breq	.+4      	; 0x2812 <process_action+0x94>
    280e:	02 95       	swap	r16
    2810:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2812:	ff 20       	and	r15, r15
    2814:	49 f0       	breq	.+18     	; 0x2828 <process_action+0xaa>
                    if (mods) {
    2816:	00 23       	and	r16, r16
    2818:	09 f4       	brne	.+2      	; 0x281c <process_action+0x9e>
    281a:	61 c2       	rjmp	.+1218   	; 0x2cde <process_action+0x560>
                        add_weak_mods(mods);
    281c:	80 2f       	mov	r24, r16
    281e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <add_weak_mods>
                        send_keyboard_report();
    2822:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
    2826:	5b c2       	rjmp	.+1206   	; 0x2cde <process_action+0x560>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2828:	81 2f       	mov	r24, r17
    282a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <unregister_code>
                    if (mods) {
    282e:	00 23       	and	r16, r16
    2830:	09 f4       	brne	.+2      	; 0x2834 <process_action+0xb6>
    2832:	a8 c2       	rjmp	.+1360   	; 0x2d84 <process_action+0x606>
                        del_weak_mods(mods);
    2834:	80 2f       	mov	r24, r16
    2836:	0e 94 cf 1c 	call	0x399e	; 0x399e <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    283a:	26 96       	adiw	r28, 0x06	; 6
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2858:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    285c:	8b 2d       	mov	r24, r11
    285e:	80 7f       	andi	r24, 0xF0	; 240
    2860:	9b 2d       	mov	r25, r11
    2862:	9f 70       	andi	r25, 0x0F	; 15
    2864:	09 2f       	mov	r16, r25
    2866:	80 32       	cpi	r24, 0x20	; 32
    2868:	11 f0       	breq	.+4      	; 0x286e <process_action+0xf0>
    286a:	02 95       	swap	r16
    286c:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    286e:	11 23       	and	r17, r17
    2870:	19 f0       	breq	.+6      	; 0x2878 <process_action+0xfa>
    2872:	11 30       	cpi	r17, 0x01	; 1
    2874:	09 f1       	breq	.+66     	; 0x28b8 <process_action+0x13a>
    2876:	2a c0       	rjmp	.+84     	; 0x28cc <process_action+0x14e>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2878:	ff 20       	and	r15, r15
    287a:	b1 f0       	breq	.+44     	; 0x28a8 <process_action+0x12a>
                            if (tap_count == 0) {
                                register_mods(mods);
    287c:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    287e:	22 23       	and	r18, r18
    2880:	51 f1       	breq	.+84     	; 0x28d6 <process_action+0x158>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2882:	21 30       	cpi	r18, 0x01	; 1
    2884:	41 f5       	brne	.+80     	; 0x28d6 <process_action+0x158>
            break;
#endif
        default:
            break;
    }
}
    2886:	26 96       	adiw	r28, 0x06	; 6
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	bf 90       	pop	r11
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    28a4:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    28a8:	22 23       	and	r18, r18
    28aa:	19 f0       	breq	.+6      	; 0x28b2 <process_action+0x134>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    28ac:	21 30       	cpi	r18, 0x01	; 1
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <process_action+0x134>
    28b0:	69 c2       	rjmp	.+1234   	; 0x2d84 <process_action+0x606>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    28b2:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <clear_oneshot_mods>
    28b6:	2d c0       	rjmp	.+90     	; 0x2912 <process_action+0x194>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    28b8:	ff 20       	and	r15, r15
    28ba:	f1 f0       	breq	.+60     	; 0x28f8 <process_action+0x17a>
                            if (tap_count <= TAPPING_TOGGLE) {
    28bc:	26 30       	cpi	r18, 0x06	; 6
    28be:	08 f0       	brcs	.+2      	; 0x28c2 <process_action+0x144>
    28c0:	61 c2       	rjmp	.+1218   	; 0x2d84 <process_action+0x606>
                                if (mods & get_mods()) {
    28c2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <get_mods>
    28c6:	80 23       	and	r24, r16
    28c8:	29 f0       	breq	.+10     	; 0x28d4 <process_action+0x156>
    28ca:	23 c0       	rjmp	.+70     	; 0x2912 <process_action+0x194>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    28cc:	ff 20       	and	r15, r15
    28ce:	f9 f0       	breq	.+62     	; 0x290e <process_action+0x190>
                            if (tap_count > 0) {
    28d0:	21 11       	cpse	r18, r1
    28d2:	16 c0       	rjmp	.+44     	; 0x2900 <process_action+0x182>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    28d4:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    28d6:	26 96       	adiw	r28, 0x06	; 6
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
    28f2:	bf 90       	pop	r11
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    28f4:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    28f8:	25 30       	cpi	r18, 0x05	; 5
    28fa:	08 f0       	brcs	.+2      	; 0x28fe <process_action+0x180>
    28fc:	43 c2       	rjmp	.+1158   	; 0x2d84 <process_action+0x606>
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <process_action+0x194>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2900:	f6 01       	movw	r30, r12
    2902:	85 81       	ldd	r24, Z+5	; 0x05
    2904:	80 ff       	sbrs	r24, 0
    2906:	eb c1       	rjmp	.+982    	; 0x2cde <process_action+0x560>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2908:	8f 70       	andi	r24, 0x0F	; 15
    290a:	85 83       	std	Z+5, r24	; 0x05
    290c:	e3 cf       	rjmp	.-58     	; 0x28d4 <process_action+0x156>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    290e:	21 11       	cpse	r18, r1
    2910:	fb c1       	rjmp	.+1014   	; 0x2d08 <process_action+0x58a>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2912:	80 2f       	mov	r24, r16
    2914:	62 c1       	rjmp	.+708    	; 0x2bda <process_action+0x45c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2916:	8b 2d       	mov	r24, r11
    2918:	86 95       	lsr	r24
    291a:	86 95       	lsr	r24
    291c:	83 70       	andi	r24, 0x03	; 3
    291e:	19 f0       	breq	.+6      	; 0x2926 <process_action+0x1a8>
    2920:	81 30       	cpi	r24, 0x01	; 1
    2922:	d1 f0       	breq	.+52     	; 0x2958 <process_action+0x1da>
    2924:	2f c2       	rjmp	.+1118   	; 0x2d84 <process_action+0x606>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2926:	ff 20       	and	r15, r15
    2928:	21 f0       	breq	.+8      	; 0x2932 <process_action+0x1b4>
                        host_system_send(action.usage.code);
    292a:	81 2f       	mov	r24, r17
    292c:	9b 2d       	mov	r25, r11
    292e:	93 70       	andi	r25, 0x03	; 3
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <process_action+0x1b8>
                    } else {
                        host_system_send(0);
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2936:	26 96       	adiw	r28, 0x06	; 6
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	bf 90       	pop	r11
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2954:	0c 94 47 11 	jmp	0x228e	; 0x228e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2958:	ff 20       	and	r15, r15
    295a:	21 f0       	breq	.+8      	; 0x2964 <process_action+0x1e6>
                        host_consumer_send(action.usage.code);
    295c:	81 2f       	mov	r24, r17
    295e:	9b 2d       	mov	r25, r11
    2960:	93 70       	andi	r25, 0x03	; 3
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <process_action+0x1ea>
                    } else {
                        host_consumer_send(0);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2968:	26 96       	adiw	r28, 0x06	; 6
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	df 90       	pop	r13
    2982:	cf 90       	pop	r12
    2984:	bf 90       	pop	r11
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2986:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    298a:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    298c:	ff 20       	and	r15, r15
    298e:	19 f0       	breq	.+6      	; 0x2996 <process_action+0x218>
                mousekey_on(action.key.code);
    2990:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <mousekey_on>
    2994:	02 c0       	rjmp	.+4      	; 0x299a <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2996:	0e 94 61 22 	call	0x44c2	; 0x44c2 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    299a:	26 96       	adiw	r28, 0x06	; 6
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	1f 91       	pop	r17
    29ac:	0f 91       	pop	r16
    29ae:	ff 90       	pop	r15
    29b0:	ef 90       	pop	r14
    29b2:	df 90       	pop	r13
    29b4:	cf 90       	pop	r12
    29b6:	bf 90       	pop	r11
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    29b8:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    29bc:	8b 2d       	mov	r24, r11
    29be:	83 70       	andi	r24, 0x03	; 3
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <process_action+0x246>
    29c2:	75 c0       	rjmp	.+234    	; 0x2aae <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    29c4:	f1 10       	cpse	r15, r1
    29c6:	de c1       	rjmp	.+956    	; 0x2d84 <process_action+0x606>
                    uint8_t shift = action.layer_bitop.part*4;
    29c8:	81 2f       	mov	r24, r17
    29ca:	82 95       	swap	r24
    29cc:	86 95       	lsr	r24
    29ce:	87 70       	andi	r24, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    29d0:	88 0f       	add	r24, r24
    29d2:	88 0f       	add	r24, r24
    29d4:	91 2f       	mov	r25, r17
    29d6:	9f 70       	andi	r25, 0x0F	; 15
    29d8:	c9 2e       	mov	r12, r25
    29da:	d1 2c       	mov	r13, r1
    29dc:	e1 2c       	mov	r14, r1
    29de:	f1 2c       	mov	r15, r1
    29e0:	08 2e       	mov	r0, r24
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <process_action+0x26e>
    29e4:	cc 0c       	add	r12, r12
    29e6:	dd 1c       	adc	r13, r13
    29e8:	ee 1c       	adc	r14, r14
    29ea:	ff 1c       	adc	r15, r15
    29ec:	0a 94       	dec	r0
    29ee:	d2 f7       	brpl	.-12     	; 0x29e4 <process_action+0x266>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    29f0:	14 ff       	sbrs	r17, 4
    29f2:	12 c0       	rjmp	.+36     	; 0x2a18 <process_action+0x29a>
    29f4:	0f e0       	ldi	r16, 0x0F	; 15
    29f6:	10 e0       	ldi	r17, 0x00	; 0
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	04 c0       	rjmp	.+8      	; 0x2a06 <process_action+0x288>
    29fe:	00 0f       	add	r16, r16
    2a00:	11 1f       	adc	r17, r17
    2a02:	22 1f       	adc	r18, r18
    2a04:	33 1f       	adc	r19, r19
    2a06:	8a 95       	dec	r24
    2a08:	d2 f7       	brpl	.-12     	; 0x29fe <process_action+0x280>
    2a0a:	c9 01       	movw	r24, r18
    2a0c:	b8 01       	movw	r22, r16
    2a0e:	60 95       	com	r22
    2a10:	70 95       	com	r23
    2a12:	80 95       	com	r24
    2a14:	90 95       	com	r25
    2a16:	03 c0       	rjmp	.+6      	; 0x2a1e <process_action+0x2a0>
    2a18:	60 e0       	ldi	r22, 0x00	; 0
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a1e:	4b 2d       	mov	r20, r11
    2a20:	46 95       	lsr	r20
    2a22:	46 95       	lsr	r20
    2a24:	43 70       	andi	r20, 0x03	; 3
    2a26:	42 30       	cpi	r20, 0x02	; 2
    2a28:	c1 f0       	breq	.+48     	; 0x2a5a <process_action+0x2dc>
    2a2a:	60 f5       	brcc	.+88     	; 0x2a84 <process_action+0x306>
    2a2c:	6c 29       	or	r22, r12
    2a2e:	7d 29       	or	r23, r13
    2a30:	8e 29       	or	r24, r14
    2a32:	9f 29       	or	r25, r15
    2a34:	41 30       	cpi	r20, 0x01	; 1
    2a36:	51 f1       	breq	.+84     	; 0x2a8c <process_action+0x30e>
            break;
#endif
        default:
            break;
    }
}
    2a38:	26 96       	adiw	r28, 0x06	; 6
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	ff 90       	pop	r15
    2a4e:	ef 90       	pop	r14
    2a50:	df 90       	pop	r13
    2a52:	cf 90       	pop	r12
    2a54:	bf 90       	pop	r11
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2a56:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a5a:	6c 29       	or	r22, r12
    2a5c:	7d 29       	or	r23, r13
    2a5e:	8e 29       	or	r24, r14
    2a60:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a62:	26 96       	adiw	r28, 0x06	; 6
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	df 90       	pop	r13
    2a7c:	cf 90       	pop	r12
    2a7e:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a80:	0c 94 05 1b 	jmp	0x360a	; 0x360a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a84:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <default_layer_and>
    2a88:	c7 01       	movw	r24, r14
    2a8a:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2a8c:	26 96       	adiw	r28, 0x06	; 6
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2aaa:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2aae:	ff 20       	and	r15, r15
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <process_action+0x33a>
    2ab2:	8b 2d       	mov	r24, r11
    2ab4:	81 70       	andi	r24, 0x01	; 1
    2ab6:	01 c0       	rjmp	.+2      	; 0x2aba <process_action+0x33c>
    2ab8:	86 95       	lsr	r24
    2aba:	88 23       	and	r24, r24
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <process_action+0x342>
    2abe:	62 c1       	rjmp	.+708    	; 0x2d84 <process_action+0x606>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2ac0:	81 2f       	mov	r24, r17
    2ac2:	82 95       	swap	r24
    2ac4:	86 95       	lsr	r24
    2ac6:	87 70       	andi	r24, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2ac8:	88 0f       	add	r24, r24
    2aca:	88 0f       	add	r24, r24
    2acc:	91 2f       	mov	r25, r17
    2ace:	9f 70       	andi	r25, 0x0F	; 15
    2ad0:	c9 2e       	mov	r12, r25
    2ad2:	d1 2c       	mov	r13, r1
    2ad4:	e1 2c       	mov	r14, r1
    2ad6:	f1 2c       	mov	r15, r1
    2ad8:	08 2e       	mov	r0, r24
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <process_action+0x366>
    2adc:	cc 0c       	add	r12, r12
    2ade:	dd 1c       	adc	r13, r13
    2ae0:	ee 1c       	adc	r14, r14
    2ae2:	ff 1c       	adc	r15, r15
    2ae4:	0a 94       	dec	r0
    2ae6:	d2 f7       	brpl	.-12     	; 0x2adc <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2ae8:	14 ff       	sbrs	r17, 4
    2aea:	12 c0       	rjmp	.+36     	; 0x2b10 <process_action+0x392>
    2aec:	0f e0       	ldi	r16, 0x0F	; 15
    2aee:	10 e0       	ldi	r17, 0x00	; 0
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	04 c0       	rjmp	.+8      	; 0x2afe <process_action+0x380>
    2af6:	00 0f       	add	r16, r16
    2af8:	11 1f       	adc	r17, r17
    2afa:	22 1f       	adc	r18, r18
    2afc:	33 1f       	adc	r19, r19
    2afe:	8a 95       	dec	r24
    2b00:	d2 f7       	brpl	.-12     	; 0x2af6 <process_action+0x378>
    2b02:	c9 01       	movw	r24, r18
    2b04:	b8 01       	movw	r22, r16
    2b06:	60 95       	com	r22
    2b08:	70 95       	com	r23
    2b0a:	80 95       	com	r24
    2b0c:	90 95       	com	r25
    2b0e:	03 c0       	rjmp	.+6      	; 0x2b16 <process_action+0x398>
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2b16:	4b 2d       	mov	r20, r11
    2b18:	46 95       	lsr	r20
    2b1a:	46 95       	lsr	r20
    2b1c:	43 70       	andi	r20, 0x03	; 3
    2b1e:	42 30       	cpi	r20, 0x02	; 2
    2b20:	c1 f0       	breq	.+48     	; 0x2b52 <process_action+0x3d4>
    2b22:	60 f5       	brcc	.+88     	; 0x2b7c <process_action+0x3fe>
    2b24:	6c 29       	or	r22, r12
    2b26:	7d 29       	or	r23, r13
    2b28:	8e 29       	or	r24, r14
    2b2a:	9f 29       	or	r25, r15
    2b2c:	41 30       	cpi	r20, 0x01	; 1
    2b2e:	51 f1       	breq	.+84     	; 0x2b84 <process_action+0x406>
            break;
#endif
        default:
            break;
    }
}
    2b30:	26 96       	adiw	r28, 0x06	; 6
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	ff 90       	pop	r15
    2b46:	ef 90       	pop	r14
    2b48:	df 90       	pop	r13
    2b4a:	cf 90       	pop	r12
    2b4c:	bf 90       	pop	r11
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2b4e:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b52:	6c 29       	or	r22, r12
    2b54:	7d 29       	or	r23, r13
    2b56:	8e 29       	or	r24, r14
    2b58:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2b5a:	26 96       	adiw	r28, 0x06	; 6
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	df 90       	pop	r13
    2b74:	cf 90       	pop	r12
    2b76:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b78:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b7c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <layer_and>
    2b80:	c7 01       	movw	r24, r14
    2b82:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2b84:	26 96       	adiw	r28, 0x06	; 6
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	ff 90       	pop	r15
    2b9a:	ef 90       	pop	r14
    2b9c:	df 90       	pop	r13
    2b9e:	cf 90       	pop	r12
    2ba0:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2ba2:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2ba6:	10 3f       	cpi	r17, 0xF0	; 240
    2ba8:	49 f1       	breq	.+82     	; 0x2bfc <process_action+0x47e>
    2baa:	18 f4       	brcc	.+6      	; 0x2bb2 <process_action+0x434>
    2bac:	10 3e       	cpi	r17, 0xE0	; 224
    2bae:	48 f4       	brcc	.+18     	; 0x2bc2 <process_action+0x444>
    2bb0:	91 c0       	rjmp	.+290    	; 0x2cd4 <process_action+0x556>
    2bb2:	12 3f       	cpi	r17, 0xF2	; 242
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <process_action+0x43a>
    2bb6:	53 c0       	rjmp	.+166    	; 0x2c5e <process_action+0x4e0>
    2bb8:	e8 f1       	brcs	.+122    	; 0x2c34 <process_action+0x4b6>
    2bba:	13 3f       	cpi	r17, 0xF3	; 243
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <process_action+0x442>
    2bbe:	64 c0       	rjmp	.+200    	; 0x2c88 <process_action+0x50a>
    2bc0:	89 c0       	rjmp	.+274    	; 0x2cd4 <process_action+0x556>
    2bc2:	1f 70       	andi	r17, 0x0F	; 15
    2bc4:	8b 2d       	mov	r24, r11
    2bc6:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2bc8:	ff 20       	and	r15, r15
    2bca:	21 f0       	breq	.+8      	; 0x2bd4 <process_action+0x456>
                        layer_on(action.layer_tap.val);
    2bcc:	0e 94 31 1b 	call	0x3662	; 0x3662 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2bd0:	81 2f       	mov	r24, r17
    2bd2:	81 ce       	rjmp	.-766    	; 0x28d6 <process_action+0x158>
                    } else {
                        layer_off(action.layer_tap.val);
    2bd4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2bd8:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2bda:	26 96       	adiw	r28, 0x06	; 6
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	bf 90       	pop	r11
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2bf8:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2bfc:	ff 20       	and	r15, r15
    2bfe:	b1 f0       	breq	.+44     	; 0x2c2c <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2c00:	25 30       	cpi	r18, 0x05	; 5
    2c02:	08 f0       	brcs	.+2      	; 0x2c06 <process_action+0x488>
    2c04:	bf c0       	rjmp	.+382    	; 0x2d84 <process_action+0x606>
                            layer_invert(action.layer_tap.val);
    2c06:	8b 2d       	mov	r24, r11
    2c08:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c0a:	26 96       	adiw	r28, 0x06	; 6
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	df 90       	pop	r13
    2c24:	cf 90       	pop	r12
    2c26:	bf 90       	pop	r11
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2c28:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2c2c:	26 30       	cpi	r18, 0x06	; 6
    2c2e:	08 f0       	brcs	.+2      	; 0x2c32 <process_action+0x4b4>
    2c30:	a9 c0       	rjmp	.+338    	; 0x2d84 <process_action+0x606>
    2c32:	e9 cf       	rjmp	.-46     	; 0x2c06 <process_action+0x488>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c34:	ff 20       	and	r15, r15
    2c36:	a9 f0       	breq	.+42     	; 0x2c62 <process_action+0x4e4>
    2c38:	8b 2d       	mov	r24, r11
    2c3a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c3c:	26 96       	adiw	r28, 0x06	; 6
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
    2c58:	bf 90       	pop	r11
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c5a:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2c5e:	ff 20       	and	r15, r15
    2c60:	59 f3       	breq	.-42     	; 0x2c38 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c62:	8b 2d       	mov	r24, r11
    2c64:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c66:	26 96       	adiw	r28, 0x06	; 6
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	bf 90       	pop	r11
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c84:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c88:	ff 20       	and	r15, r15
    2c8a:	99 f0       	breq	.+38     	; 0x2cb2 <process_action+0x534>
    2c8c:	8b 2d       	mov	r24, r11
    2c8e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c90:	26 96       	adiw	r28, 0x06	; 6
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	df 90       	pop	r13
    2caa:	cf 90       	pop	r12
    2cac:	bf 90       	pop	r11
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2cae:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2cb2:	26 96       	adiw	r28, 0x06	; 6
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	df 91       	pop	r29
    2cc0:	cf 91       	pop	r28
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	ff 90       	pop	r15
    2cc8:	ef 90       	pop	r14
    2cca:	df 90       	pop	r13
    2ccc:	cf 90       	pop	r12
    2cce:	bf 90       	pop	r11
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2cd0:	0c 94 17 1b 	jmp	0x362e	; 0x362e <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2cd4:	ff 20       	and	r15, r15
    2cd6:	a9 f0       	breq	.+42     	; 0x2d02 <process_action+0x584>
                        if (tap_count > 0) {
    2cd8:	22 23       	and	r18, r18
    2cda:	09 f4       	brne	.+2      	; 0x2cde <process_action+0x560>
    2cdc:	ad cf       	rjmp	.-166    	; 0x2c38 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2cde:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2ce0:	26 96       	adiw	r28, 0x06	; 6
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	bf 90       	pop	r11
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2cfe:	0c 94 8f 12 	jmp	0x251e	; 0x251e <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2d02:	22 23       	and	r18, r18
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <process_action+0x58a>
    2d06:	ad cf       	rjmp	.-166    	; 0x2c62 <process_action+0x4e4>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2d08:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2d0a:	26 96       	adiw	r28, 0x06	; 6
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	ff 90       	pop	r15
    2d20:	ef 90       	pop	r14
    2d22:	df 90       	pop	r13
    2d24:	cf 90       	pop	r12
    2d26:	bf 90       	pop	r11
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2d28:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2d2c:	4b 2d       	mov	r20, r11
    2d2e:	4f 70       	andi	r20, 0x0F	; 15
    2d30:	61 2f       	mov	r22, r17
    2d32:	c6 01       	movw	r24, r12
    2d34:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2d38:	26 96       	adiw	r28, 0x06	; 6
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	bf 90       	pop	r11
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2d56:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2d5a:	4b 2d       	mov	r20, r11
    2d5c:	4f 70       	andi	r20, 0x0F	; 15
    2d5e:	61 2f       	mov	r22, r17
    2d60:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2d62:	26 96       	adiw	r28, 0x06	; 6
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	0f 91       	pop	r16
    2d76:	ff 90       	pop	r15
    2d78:	ef 90       	pop	r14
    2d7a:	df 90       	pop	r13
    2d7c:	cf 90       	pop	r12
    2d7e:	bf 90       	pop	r11
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2d80:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <action_function>
            break;
#endif
        default:
            break;
    }
}
    2d84:	26 96       	adiw	r28, 0x06	; 6
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	ff 90       	pop	r15
    2d9a:	ef 90       	pop	r14
    2d9c:	df 90       	pop	r13
    2d9e:	cf 90       	pop	r12
    2da0:	bf 90       	pop	r11
    2da2:	08 95       	ret

00002da4 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2da4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <clear_weak_mods>
    clear_keys();
    2da8:	0e 94 a5 1c 	call	0x394a	; 0x394a <clear_keys>
    send_keyboard_report();
    2dac:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2db0:	0e 94 18 24 	call	0x4830	; 0x4830 <mousekey_clear>
    mousekey_send();
    2db4:	0e 94 e6 22 	call	0x45cc	; 0x45cc <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 47 11 	call	0x228e	; 0x228e <host_system_send>
    host_consumer_send(0);
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <host_consumer_send>

00002dc8 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2dc8:	0e 94 c6 1c 	call	0x398c	; 0x398c <clear_mods>
    clear_keyboard_but_mods();
    2dcc:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <clear_keyboard_but_mods>

00002dd0 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2dd0:	0e 94 cf 1b 	call	0x379e	; 0x379e <layer_switch_get_action>

    switch (action.kind.id) {
    2dd4:	29 2f       	mov	r18, r25
    2dd6:	22 95       	swap	r18
    2dd8:	2f 70       	andi	r18, 0x0F	; 15
    2dda:	2c 30       	cpi	r18, 0x0C	; 12
    2ddc:	30 f4       	brcc	.+12     	; 0x2dea <is_tap_key+0x1a>
    2dde:	2a 30       	cpi	r18, 0x0A	; 10
    2de0:	48 f4       	brcc	.+18     	; 0x2df4 <is_tap_key+0x24>
    2de2:	22 50       	subi	r18, 0x02	; 2
    2de4:	22 30       	cpi	r18, 0x02	; 2
    2de6:	78 f4       	brcc	.+30     	; 0x2e06 <is_tap_key+0x36>
    2de8:	05 c0       	rjmp	.+10     	; 0x2df4 <is_tap_key+0x24>
    2dea:	2c 30       	cpi	r18, 0x0C	; 12
    2dec:	41 f0       	breq	.+16     	; 0x2dfe <is_tap_key+0x2e>
    2dee:	2f 30       	cpi	r18, 0x0F	; 15
    2df0:	31 f0       	breq	.+12     	; 0x2dfe <is_tap_key+0x2e>
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <is_tap_key+0x36>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2df4:	80 3e       	cpi	r24, 0xE0	; 224
    2df6:	48 f0       	brcs	.+18     	; 0x2e0a <is_tap_key+0x3a>
    2df8:	80 3f       	cpi	r24, 0xF0	; 240
    2dfa:	29 f4       	brne	.+10     	; 0x2e06 <is_tap_key+0x36>
    2dfc:	06 c0       	rjmp	.+12     	; 0x2e0a <is_tap_key+0x3a>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2dfe:	93 fb       	bst	r25, 3
    2e00:	88 27       	eor	r24, r24
    2e02:	80 f9       	bld	r24, 0
    2e04:	08 95       	ret
            return false;
    }
    return false;
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2e0c:	08 95       	ret

00002e0e <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <debug_event+0x6>
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <debug_event+0x8>
    2e16:	1f 92       	push	r1
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <debug_record>:

void debug_record(keyrecord_t record)
{
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <debug_record+0x6>
    2e32:	00 d0       	rcall	.+0      	; 0x2e34 <debug_record+0x8>
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <debug_record+0xa>
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2e3a:	26 96       	adiw	r28, 0x06	; 6
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	08 95       	ret

00002e4c <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e52:	c0 91 7a 01 	lds	r28, 0x017A
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e56:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e58:	80 91 7b 01 	lds	r24, 0x017B
    2e5c:	c8 17       	cp	r28, r24
    2e5e:	99 f0       	breq	.+38     	; 0x2e86 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e60:	d0 e0       	ldi	r29, 0x00	; 0
    2e62:	1c 9f       	mul	r17, r28
    2e64:	f0 01       	movw	r30, r0
    2e66:	1d 9f       	mul	r17, r29
    2e68:	f0 0d       	add	r31, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	e4 58       	subi	r30, 0x84	; 132
    2e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e70:	40 81       	ld	r20, Z
    2e72:	51 81       	ldd	r21, Z+1	; 0x01
    2e74:	62 81       	ldd	r22, Z+2	; 0x02
    2e76:	73 81       	ldd	r23, Z+3	; 0x03
    2e78:	84 81       	ldd	r24, Z+4	; 0x04
    2e7a:	95 81       	ldd	r25, Z+5	; 0x05
    2e7c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e80:	21 96       	adiw	r28, 0x01	; 1
    2e82:	c7 70       	andi	r28, 0x07	; 7
    2e84:	e9 cf       	rjmp	.-46     	; 0x2e58 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	08 95       	ret

00002e8e <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2e8e:	40 91 ac 01 	lds	r20, 0x01AC
    2e92:	50 91 ad 01 	lds	r21, 0x01AD
    2e96:	60 91 ae 01 	lds	r22, 0x01AE
    2e9a:	70 91 af 01 	lds	r23, 0x01AF
    2e9e:	80 91 b0 01 	lds	r24, 0x01B0
    2ea2:	90 91 b1 01 	lds	r25, 0x01B1
    2ea6:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <debug_record>

00002eaa <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2eaa:	80 91 b1 01 	lds	r24, 0x01B1
    2eae:	82 95       	swap	r24
    2eb0:	8f 70       	andi	r24, 0x0F	; 15
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <waiting_buffer_scan_tap+0xc>
    2eb4:	54 c0       	rjmp	.+168    	; 0x2f5e <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2eb6:	80 91 ae 01 	lds	r24, 0x01AE
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <waiting_buffer_scan_tap+0x16>
    2ebe:	4f c0       	rjmp	.+158    	; 0x2f5e <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ec0:	80 91 7a 01 	lds	r24, 0x017A
    2ec4:	a0 91 7b 01 	lds	r26, 0x017B
    2ec8:	40 91 af 01 	lds	r20, 0x01AF
    2ecc:	50 91 b0 01 	lds	r21, 0x01B0
    2ed0:	60 91 ac 01 	lds	r22, 0x01AC
    2ed4:	70 91 ad 01 	lds	r23, 0x01AD
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2ed8:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2eda:	8a 17       	cp	r24, r26
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <waiting_buffer_scan_tap+0x36>
    2ede:	3f c0       	rjmp	.+126    	; 0x2f5e <waiting_buffer_scan_tap+0xb4>
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	41 15       	cp	r20, r1
    2ee4:	51 05       	cpc	r21, r1
    2ee6:	c1 f1       	breq	.+112    	; 0x2f58 <waiting_buffer_scan_tap+0xae>
    2ee8:	7f 3f       	cpi	r23, 0xFF	; 255
    2eea:	11 f4       	brne	.+4      	; 0x2ef0 <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2eec:	6f 3f       	cpi	r22, 0xFF	; 255
    2eee:	a1 f1       	breq	.+104    	; 0x2f58 <waiting_buffer_scan_tap+0xae>
    2ef0:	b8 9f       	mul	r27, r24
    2ef2:	f0 01       	movw	r30, r0
    2ef4:	b9 9f       	mul	r27, r25
    2ef6:	f0 0d       	add	r31, r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	e4 58       	subi	r30, 0x84	; 132
    2efc:	fe 4f       	sbci	r31, 0xFE	; 254
    2efe:	21 81       	ldd	r18, Z+1	; 0x01
    2f00:	27 13       	cpse	r18, r23
    2f02:	2a c0       	rjmp	.+84     	; 0x2f58 <waiting_buffer_scan_tap+0xae>
    2f04:	20 81       	ld	r18, Z
    2f06:	26 13       	cpse	r18, r22
    2f08:	27 c0       	rjmp	.+78     	; 0x2f58 <waiting_buffer_scan_tap+0xae>
    2f0a:	22 81       	ldd	r18, Z+2	; 0x02
    2f0c:	21 11       	cpse	r18, r1
    2f0e:	24 c0       	rjmp	.+72     	; 0x2f58 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2f10:	23 81       	ldd	r18, Z+3	; 0x03
    2f12:	34 81       	ldd	r19, Z+4	; 0x04
    2f14:	24 17       	cp	r18, r20
    2f16:	35 07       	cpc	r19, r21
    2f18:	10 f4       	brcc	.+4      	; 0x2f1e <waiting_buffer_scan_tap+0x74>
    2f1a:	21 50       	subi	r18, 0x01	; 1
    2f1c:	31 09       	sbc	r19, r1
    2f1e:	24 1b       	sub	r18, r20
    2f20:	35 0b       	sbc	r19, r21
    2f22:	28 3c       	cpi	r18, 0xC8	; 200
    2f24:	31 05       	cpc	r19, r1
    2f26:	c0 f4       	brcc	.+48     	; 0x2f58 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2f28:	20 91 b1 01 	lds	r18, 0x01B1
    2f2c:	2f 70       	andi	r18, 0x0F	; 15
    2f2e:	20 61       	ori	r18, 0x10	; 16
    2f30:	20 93 b1 01 	sts	0x01B1, r18
            waiting_buffer[i].tap.count = 1;
    2f34:	26 e0       	ldi	r18, 0x06	; 6
    2f36:	28 9f       	mul	r18, r24
    2f38:	f0 01       	movw	r30, r0
    2f3a:	29 9f       	mul	r18, r25
    2f3c:	f0 0d       	add	r31, r0
    2f3e:	11 24       	eor	r1, r1
    2f40:	ef 57       	subi	r30, 0x7F	; 127
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	80 81       	ld	r24, Z
    2f46:	8f 70       	andi	r24, 0x0F	; 15
    2f48:	80 61       	ori	r24, 0x10	; 16
    2f4a:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2f4c:	8c ea       	ldi	r24, 0xAC	; 172
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2f54:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	87 70       	andi	r24, 0x07	; 7
    2f5c:	be cf       	rjmp	.-132    	; 0x2eda <waiting_buffer_scan_tap+0x30>
    2f5e:	08 95       	ret

00002f60 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2f60:	cf 92       	push	r12
    2f62:	df 92       	push	r13
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	62 97       	sbiw	r28, 0x12	; 18
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2f82:	85 e0       	ldi	r24, 0x05	; 5
    2f84:	f8 01       	movw	r30, r16
    2f86:	de 01       	movw	r26, r28
    2f88:	1d 96       	adiw	r26, 0x0d	; 13
    2f8a:	01 90       	ld	r0, Z+
    2f8c:	0d 92       	st	X+, r0
    2f8e:	8a 95       	dec	r24
    2f90:	e1 f7       	brne	.-8      	; 0x2f8a <process_tapping+0x2a>
    2f92:	d8 01       	movw	r26, r16
    2f94:	4c 91       	ld	r20, X
    2f96:	11 96       	adiw	r26, 0x01	; 1
    2f98:	5c 91       	ld	r21, X
    2f9a:	11 97       	sbiw	r26, 0x01	; 1
    2f9c:	12 96       	adiw	r26, 0x02	; 2
    2f9e:	6c 91       	ld	r22, X
    2fa0:	80 91 af 01 	lds	r24, 0x01AF
    2fa4:	90 91 b0 01 	lds	r25, 0x01B0
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	09 f4       	brne	.+2      	; 0x2fae <process_tapping+0x4e>
    2fac:	75 c1       	rjmp	.+746    	; 0x3298 <process_tapping+0x338>
    2fae:	30 91 ac 01 	lds	r19, 0x01AC
    2fb2:	70 91 ad 01 	lds	r23, 0x01AD
    2fb6:	7f 3f       	cpi	r23, 0xFF	; 255
    2fb8:	19 f4       	brne	.+6      	; 0x2fc0 <process_tapping+0x60>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2fba:	3f 3f       	cpi	r19, 0xFF	; 255
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <process_tapping+0x60>
    2fbe:	6c c1       	rjmp	.+728    	; 0x3298 <process_tapping+0x338>
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	c3 80       	ldd	r12, Z+3	; 0x03
    2fc4:	d4 80       	ldd	r13, Z+4	; 0x04

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2fc6:	e0 90 ae 01 	lds	r14, 0x01AE
    2fca:	ee 20       	and	r14, r14
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <process_tapping+0x70>
    2fce:	be c0       	rjmp	.+380    	; 0x314c <process_tapping+0x1ec>
    2fd0:	20 91 b1 01 	lds	r18, 0x01B1
        if (WITHIN_TAPPING_TERM(event)) {
    2fd4:	c8 16       	cp	r12, r24
    2fd6:	d9 06       	cpc	r13, r25
    2fd8:	28 f0       	brcs	.+10     	; 0x2fe4 <process_tapping+0x84>
    2fda:	d6 01       	movw	r26, r12
    2fdc:	a8 1b       	sub	r26, r24
    2fde:	b9 0b       	sbc	r27, r25
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	04 c0       	rjmp	.+8      	; 0x2fec <process_tapping+0x8c>
    2fe4:	80 95       	com	r24
    2fe6:	90 95       	com	r25
    2fe8:	8c 0d       	add	r24, r12
    2fea:	9d 1d       	adc	r25, r13
    2fec:	ff 24       	eor	r15, r15
    2fee:	f3 94       	inc	r15
    2ff0:	88 3c       	cpi	r24, 0xC8	; 200
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	78 f0       	brcs	.+30     	; 0x3014 <process_tapping+0xb4>
    2ff6:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2ff8:	20 7f       	andi	r18, 0xF0	; 240
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <process_tapping+0x9e>
    2ffc:	c4 c0       	rjmp	.+392    	; 0x3186 <process_tapping+0x226>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2ffe:	7c 2d       	mov	r23, r12
    3000:	d9 8a       	std	Y+17, r13	; 0x11
    3002:	c8 8a       	std	Y+16, r12	; 0x10
    3004:	89 89       	ldd	r24, Y+17	; 0x11
    3006:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <debug_event>
                process_action(&tapping_key);
    300a:	8c ea       	ldi	r24, 0xAC	; 172
    300c:	91 e0       	ldi	r25, 0x01	; 1
    300e:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>
    3012:	af c0       	rjmp	.+350    	; 0x3172 <process_tapping+0x212>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    3014:	82 2f       	mov	r24, r18
    3016:	80 7f       	andi	r24, 0xF0	; 240
    3018:	09 f0       	breq	.+2      	; 0x301c <process_tapping+0xbc>
    301a:	45 c0       	rjmp	.+138    	; 0x30a6 <process_tapping+0x146>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    301c:	57 13       	cpse	r21, r23
    301e:	13 c0       	rjmp	.+38     	; 0x3046 <process_tapping+0xe6>
    3020:	43 13       	cpse	r20, r19
    3022:	11 c0       	rjmp	.+34     	; 0x3046 <process_tapping+0xe6>
    3024:	61 11       	cpse	r22, r1
    3026:	0f c0       	rjmp	.+30     	; 0x3046 <process_tapping+0xe6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    3028:	2f 70       	andi	r18, 0x0F	; 15
    302a:	20 61       	ori	r18, 0x10	; 16
    302c:	20 93 b1 01 	sts	0x01B1, r18
                    debug_tapping_key();
    3030:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <debug_tapping_key>
                    process_action(&tapping_key);
    3034:	8c ea       	ldi	r24, 0xAC	; 172
    3036:	91 e0       	ldi	r25, 0x01	; 1
    3038:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    303c:	80 91 b1 01 	lds	r24, 0x01B1
    3040:	f8 01       	movw	r30, r16
    3042:	85 83       	std	Z+5, r24	; 0x05
    3044:	2e c0       	rjmp	.+92     	; 0x30a2 <process_tapping+0x142>
    3046:	cd 28       	or	r12, r13
    3048:	19 f1       	breq	.+70     	; 0x3090 <process_tapping+0x130>
    304a:	5f 3f       	cpi	r21, 0xFF	; 255
    304c:	11 f4       	brne	.+4      	; 0x3052 <process_tapping+0xf2>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    304e:	4f 3f       	cpi	r20, 0xFF	; 255
    3050:	f9 f0       	breq	.+62     	; 0x3090 <process_tapping+0x130>
    3052:	f6 2e       	mov	r15, r22
    3054:	61 11       	cpse	r22, r1
    3056:	1c c0       	rjmp	.+56     	; 0x3090 <process_tapping+0x130>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3058:	80 91 7a 01 	lds	r24, 0x017A
    305c:	20 91 7b 01 	lds	r18, 0x017B
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3060:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3062:	82 17       	cp	r24, r18
    3064:	09 f4       	brne	.+2      	; 0x3068 <process_tapping+0x108>
    3066:	5b c0       	rjmp	.+182    	; 0x311e <process_tapping+0x1be>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	38 9f       	mul	r19, r24
    306c:	f0 01       	movw	r30, r0
    306e:	39 9f       	mul	r19, r25
    3070:	f0 0d       	add	r31, r0
    3072:	11 24       	eor	r1, r1
    3074:	e4 58       	subi	r30, 0x84	; 132
    3076:	fe 4f       	sbci	r31, 0xFE	; 254
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	57 13       	cpse	r21, r23
    307c:	06 c0       	rjmp	.+12     	; 0x308a <process_tapping+0x12a>
    307e:	70 81       	ld	r23, Z
    3080:	47 13       	cpse	r20, r23
    3082:	03 c0       	rjmp	.+6      	; 0x308a <process_tapping+0x12a>
    3084:	72 81       	ldd	r23, Z+2	; 0x02
    3086:	71 11       	cpse	r23, r1
    3088:	03 c0       	rjmp	.+6      	; 0x3090 <process_tapping+0x130>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    308a:	01 96       	adiw	r24, 0x01	; 1
    308c:	87 70       	andi	r24, 0x07	; 7
    308e:	e9 cf       	rjmp	.-46     	; 0x3062 <process_tapping+0x102>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3090:	f6 2e       	mov	r15, r22
    3092:	66 23       	and	r22, r22
    3094:	09 f4       	brne	.+2      	; 0x3098 <process_tapping+0x138>
    3096:	1c c1       	rjmp	.+568    	; 0x32d0 <process_tapping+0x370>
                        tapping_key.tap.interrupted = true;
    3098:	80 91 b1 01 	lds	r24, 0x01B1
    309c:	81 60       	ori	r24, 0x01	; 1
    309e:	80 93 b1 01 	sts	0x01B1, r24
                    }
                    // enqueue 
                    return false;
    30a2:	f1 2c       	mov	r15, r1
    30a4:	15 c1       	rjmp	.+554    	; 0x32d0 <process_tapping+0x370>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30a6:	57 13       	cpse	r21, r23
    30a8:	09 c0       	rjmp	.+18     	; 0x30bc <process_tapping+0x15c>
    30aa:	43 13       	cpse	r20, r19
    30ac:	07 c0       	rjmp	.+14     	; 0x30bc <process_tapping+0x15c>
    30ae:	61 11       	cpse	r22, r1
    30b0:	05 c0       	rjmp	.+10     	; 0x30bc <process_tapping+0x15c>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    30b2:	80 91 b1 01 	lds	r24, 0x01B1
    30b6:	f8 01       	movw	r30, r16
    30b8:	85 83       	std	Z+5, r24	; 0x05
    30ba:	c8 c0       	rjmp	.+400    	; 0x324c <process_tapping+0x2ec>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    30bc:	4d 87       	std	Y+13, r20	; 0x0d
    30be:	5e 87       	std	Y+14, r21	; 0x0e
    30c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c4:	6a 8b       	std	Y+18, r22	; 0x12
    30c6:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <is_tap_key>
    30ca:	6a 89       	ldd	r22, Y+18	; 0x12
    30cc:	88 23       	and	r24, r24
    30ce:	d1 f1       	breq	.+116    	; 0x3144 <process_tapping+0x1e4>
    30d0:	66 23       	and	r22, r22
    30d2:	c1 f1       	breq	.+112    	; 0x3144 <process_tapping+0x1e4>
                    if (tapping_key.tap.count > 1) {
    30d4:	20 91 b1 01 	lds	r18, 0x01B1
    30d8:	82 2f       	mov	r24, r18
    30da:	82 95       	swap	r24
    30dc:	8f 70       	andi	r24, 0x0F	; 15
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	02 97       	sbiw	r24, 0x02	; 2
    30e2:	74 f0       	brlt	.+28     	; 0x3100 <process_tapping+0x1a0>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    30e4:	80 91 ac 01 	lds	r24, 0x01AC
    30e8:	90 91 ad 01 	lds	r25, 0x01AD
    30ec:	98 87       	std	Y+8, r25	; 0x08
    30ee:	8f 83       	std	Y+7, r24	; 0x07
    30f0:	19 86       	std	Y+9, r1	; 0x09
    30f2:	db 86       	std	Y+11, r13	; 0x0b
    30f4:	ca 86       	std	Y+10, r12	; 0x0a
    30f6:	2c 87       	std	Y+12, r18	; 0x0c
    30f8:	ce 01       	movw	r24, r28
    30fa:	07 96       	adiw	r24, 0x07	; 7
    30fc:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    3100:	86 e0       	ldi	r24, 0x06	; 6
    3102:	f8 01       	movw	r30, r16
    3104:	ac ea       	ldi	r26, 0xAC	; 172
    3106:	b1 e0       	ldi	r27, 0x01	; 1
    3108:	01 90       	ld	r0, Z+
    310a:	0d 92       	st	X+, r0
    310c:	8a 95       	dec	r24
    310e:	e1 f7       	brne	.-8      	; 0x3108 <process_tapping+0x1a8>
                    waiting_buffer_scan_tap();
    3110:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3114:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <debug_tapping_key>
                    return true;
    3118:	ff 24       	eor	r15, r15
    311a:	f3 94       	inc	r15
    311c:	d9 c0       	rjmp	.+434    	; 0x32d0 <process_tapping+0x370>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    311e:	4d 87       	std	Y+13, r20	; 0x0d
    3120:	5e 87       	std	Y+14, r21	; 0x0e
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	0e 94 cf 1b 	call	0x379e	; 0x379e <layer_switch_get_action>
                    switch (action.kind.id) {
    312a:	29 2f       	mov	r18, r25
    312c:	22 95       	swap	r18
    312e:	2f 70       	andi	r18, 0x0F	; 15
    3130:	22 30       	cpi	r18, 0x02	; 2
    3132:	08 f0       	brcs	.+2      	; 0x3136 <process_tapping+0x1d6>
    3134:	c1 c0       	rjmp	.+386    	; 0x32b8 <process_tapping+0x358>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3136:	9f 70       	andi	r25, 0x0F	; 15
    3138:	09 f0       	breq	.+2      	; 0x313c <process_tapping+0x1dc>
    313a:	bb c0       	rjmp	.+374    	; 0x32b2 <process_tapping+0x352>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    313c:	80 5e       	subi	r24, 0xE0	; 224
    313e:	88 30       	cpi	r24, 0x08	; 8
    3140:	08 f4       	brcc	.+2      	; 0x3144 <process_tapping+0x1e4>
    3142:	c6 c0       	rjmp	.+396    	; 0x32d0 <process_tapping+0x370>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3144:	c8 01       	movw	r24, r16
    3146:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>
    314a:	e6 cf       	rjmp	.-52     	; 0x3118 <process_tapping+0x1b8>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    314c:	c8 16       	cp	r12, r24
    314e:	d9 06       	cpc	r13, r25
    3150:	08 f4       	brcc	.+2      	; 0x3154 <process_tapping+0x1f4>
    3152:	53 c0       	rjmp	.+166    	; 0x31fa <process_tapping+0x29a>
    3154:	f6 01       	movw	r30, r12
    3156:	e8 1b       	sub	r30, r24
    3158:	f9 0b       	sbc	r31, r25
    315a:	cf 01       	movw	r24, r30
    315c:	88 3c       	cpi	r24, 0xC8	; 200
    315e:	91 05       	cpc	r25, r1
    3160:	08 f4       	brcc	.+2      	; 0x3164 <process_tapping+0x204>
    3162:	50 c0       	rjmp	.+160    	; 0x3204 <process_tapping+0x2a4>
    3164:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3166:	7c 2d       	mov	r23, r12
    3168:	d9 8a       	std	Y+17, r13	; 0x11
    316a:	c8 8a       	std	Y+16, r12	; 0x10
    316c:	89 89       	ldd	r24, Y+17	; 0x11
    316e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    3172:	ec ea       	ldi	r30, 0xAC	; 172
    3174:	f1 e0       	ldi	r31, 0x01	; 1
    3176:	86 e0       	ldi	r24, 0x06	; 6
    3178:	df 01       	movw	r26, r30
    317a:	1d 92       	st	X+, r1
    317c:	8a 95       	dec	r24
    317e:	e9 f7       	brne	.-6      	; 0x317a <process_tapping+0x21a>
                debug_tapping_key();
    3180:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <debug_tapping_key>
                return false;
    3184:	a5 c0       	rjmp	.+330    	; 0x32d0 <process_tapping+0x370>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3186:	57 13       	cpse	r21, r23
    3188:	14 c0       	rjmp	.+40     	; 0x31b2 <process_tapping+0x252>
    318a:	43 13       	cpse	r20, r19
    318c:	12 c0       	rjmp	.+36     	; 0x31b2 <process_tapping+0x252>
    318e:	61 11       	cpse	r22, r1
    3190:	10 c0       	rjmp	.+32     	; 0x31b2 <process_tapping+0x252>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3192:	80 91 b1 01 	lds	r24, 0x01B1
    3196:	f8 01       	movw	r30, r16
    3198:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    319a:	c8 01       	movw	r24, r16
    319c:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>
                    tapping_key = (keyrecord_t){};
    31a0:	86 e0       	ldi	r24, 0x06	; 6
    31a2:	ec ea       	ldi	r30, 0xAC	; 172
    31a4:	f1 e0       	ldi	r31, 0x01	; 1
    31a6:	df 01       	movw	r26, r30
    31a8:	1d 92       	st	X+, r1
    31aa:	8a 95       	dec	r24
    31ac:	e9 f7       	brne	.-6      	; 0x31a8 <process_tapping+0x248>
                    return true;
    31ae:	fe 2c       	mov	r15, r14
    31b0:	8f c0       	rjmp	.+286    	; 0x32d0 <process_tapping+0x370>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    31b2:	4d 87       	std	Y+13, r20	; 0x0d
    31b4:	5e 87       	std	Y+14, r21	; 0x0e
    31b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ba:	6a 8b       	std	Y+18, r22	; 0x12
    31bc:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <is_tap_key>
    31c0:	6a 89       	ldd	r22, Y+18	; 0x12
    31c2:	88 23       	and	r24, r24
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <process_tapping+0x268>
    31c6:	be cf       	rjmp	.-132    	; 0x3144 <process_tapping+0x1e4>
    31c8:	66 23       	and	r22, r22
    31ca:	09 f4       	brne	.+2      	; 0x31ce <process_tapping+0x26e>
    31cc:	bb cf       	rjmp	.-138    	; 0x3144 <process_tapping+0x1e4>
                    if (tapping_key.tap.count > 1) {
    31ce:	20 91 b1 01 	lds	r18, 0x01B1
    31d2:	82 2f       	mov	r24, r18
    31d4:	82 95       	swap	r24
    31d6:	8f 70       	andi	r24, 0x0F	; 15
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	02 97       	sbiw	r24, 0x02	; 2
    31dc:	0c f4       	brge	.+2      	; 0x31e0 <process_tapping+0x280>
    31de:	90 cf       	rjmp	.-224    	; 0x3100 <process_tapping+0x1a0>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    31e0:	80 91 ac 01 	lds	r24, 0x01AC
    31e4:	90 91 ad 01 	lds	r25, 0x01AD
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	1b 82       	std	Y+3, r1	; 0x03
    31ee:	dd 82       	std	Y+5, r13	; 0x05
    31f0:	cc 82       	std	Y+4, r12	; 0x04
    31f2:	2e 83       	std	Y+6, r18	; 0x06
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	81 cf       	rjmp	.-254    	; 0x30fc <process_tapping+0x19c>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    31fa:	80 95       	com	r24
    31fc:	90 95       	com	r25
    31fe:	8c 0d       	add	r24, r12
    3200:	9d 1d       	adc	r25, r13
    3202:	ac cf       	rjmp	.-168    	; 0x315c <process_tapping+0x1fc>
            if (event.pressed) {
    3204:	f6 2e       	mov	r15, r22
    3206:	66 23       	and	r22, r22
    3208:	09 f4       	brne	.+2      	; 0x320c <process_tapping+0x2ac>
    320a:	9c cf       	rjmp	.-200    	; 0x3144 <process_tapping+0x1e4>
                if (IS_TAPPING_KEY(event.key)) {
    320c:	57 13       	cpse	r21, r23
    320e:	33 c0       	rjmp	.+102    	; 0x3276 <process_tapping+0x316>
    3210:	43 13       	cpse	r20, r19
    3212:	31 c0       	rjmp	.+98     	; 0x3276 <process_tapping+0x316>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3214:	20 91 b1 01 	lds	r18, 0x01B1
    3218:	20 fd       	sbrc	r18, 0
    321a:	24 c0       	rjmp	.+72     	; 0x3264 <process_tapping+0x304>
    321c:	82 2f       	mov	r24, r18
    321e:	82 95       	swap	r24
    3220:	8f 70       	andi	r24, 0x0F	; 15
    3222:	48 2f       	mov	r20, r24
    3224:	50 e0       	ldi	r21, 0x00	; 0
    3226:	41 15       	cp	r20, r1
    3228:	51 05       	cpc	r21, r1
    322a:	e1 f0       	breq	.+56     	; 0x3264 <process_tapping+0x304>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    322c:	d8 01       	movw	r26, r16
    322e:	15 96       	adiw	r26, 0x05	; 5
    3230:	2c 93       	st	X, r18
    3232:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3234:	4f 30       	cpi	r20, 0x0F	; 15
    3236:	51 05       	cpc	r21, r1
    3238:	49 f0       	breq	.+18     	; 0x324c <process_tapping+0x2ec>
    323a:	8f 5f       	subi	r24, 0xFF	; 255
    323c:	98 2f       	mov	r25, r24
    323e:	92 95       	swap	r25
    3240:	90 7f       	andi	r25, 0xF0	; 240
    3242:	82 2f       	mov	r24, r18
    3244:	8f 70       	andi	r24, 0x0F	; 15
    3246:	89 2b       	or	r24, r25
    3248:	15 96       	adiw	r26, 0x05	; 5
    324a:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    324c:	c8 01       	movw	r24, r16
    324e:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>
                        tapping_key = *keyp;
    3252:	86 e0       	ldi	r24, 0x06	; 6
    3254:	f8 01       	movw	r30, r16
    3256:	ac ea       	ldi	r26, 0xAC	; 172
    3258:	b1 e0       	ldi	r27, 0x01	; 1
    325a:	01 90       	ld	r0, Z+
    325c:	0d 92       	st	X+, r0
    325e:	8a 95       	dec	r24
    3260:	e1 f7       	brne	.-8      	; 0x325a <process_tapping+0x2fa>
    3262:	8e cf       	rjmp	.-228    	; 0x3180 <process_tapping+0x220>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3264:	86 e0       	ldi	r24, 0x06	; 6
    3266:	f8 01       	movw	r30, r16
    3268:	ac ea       	ldi	r26, 0xAC	; 172
    326a:	b1 e0       	ldi	r27, 0x01	; 1
    326c:	01 90       	ld	r0, Z+
    326e:	0d 92       	st	X+, r0
    3270:	8a 95       	dec	r24
    3272:	e1 f7       	brne	.-8      	; 0x326c <process_tapping+0x30c>
                        return true;
    3274:	2d c0       	rjmp	.+90     	; 0x32d0 <process_tapping+0x370>
                    }
                } else if (is_tap_key(event.key)) {
    3276:	4d 87       	std	Y+13, r20	; 0x0d
    3278:	5e 87       	std	Y+14, r21	; 0x0e
    327a:	8d 85       	ldd	r24, Y+13	; 0x0d
    327c:	9e 85       	ldd	r25, Y+14	; 0x0e
    327e:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <is_tap_key>
    3282:	81 11       	cpse	r24, r1
    3284:	3d cf       	rjmp	.-390    	; 0x3100 <process_tapping+0x1a0>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3286:	80 91 b1 01 	lds	r24, 0x01B1
    328a:	81 60       	ori	r24, 0x01	; 1
    328c:	80 93 b1 01 	sts	0x01B1, r24
                    process_action(keyp);
    3290:	c8 01       	movw	r24, r16
    3292:	0e 94 bf 13 	call	0x277e	; 0x277e <process_action>
                    return true;
    3296:	1c c0       	rjmp	.+56     	; 0x32d0 <process_tapping+0x370>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3298:	66 23       	and	r22, r22
    329a:	09 f4       	brne	.+2      	; 0x329e <process_tapping+0x33e>
    329c:	53 cf       	rjmp	.-346    	; 0x3144 <process_tapping+0x1e4>
    329e:	4d 87       	std	Y+13, r20	; 0x0d
    32a0:	5e 87       	std	Y+14, r21	; 0x0e
    32a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a6:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <is_tap_key>
    32aa:	88 23       	and	r24, r24
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <process_tapping+0x350>
    32ae:	4a cf       	rjmp	.-364    	; 0x3144 <process_tapping+0x1e4>
    32b0:	27 cf       	rjmp	.-434    	; 0x3100 <process_tapping+0x1a0>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    32b2:	81 11       	cpse	r24, r1
    32b4:	43 cf       	rjmp	.-378    	; 0x313c <process_tapping+0x1dc>
    32b6:	0c c0       	rjmp	.+24     	; 0x32d0 <process_tapping+0x370>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    32b8:	24 30       	cpi	r18, 0x04	; 4
    32ba:	08 f0       	brcs	.+2      	; 0x32be <process_tapping+0x35e>
    32bc:	43 cf       	rjmp	.-378    	; 0x3144 <process_tapping+0x1e4>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    32be:	9f 70       	andi	r25, 0x0F	; 15
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <process_tapping+0x364>
    32c2:	3c cf       	rjmp	.-392    	; 0x313c <process_tapping+0x1dc>
    32c4:	d8 01       	movw	r26, r16
    32c6:	15 96       	adiw	r26, 0x05	; 5
    32c8:	9c 91       	ld	r25, X
    32ca:	90 7f       	andi	r25, 0xF0	; 240
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <process_tapping+0x370>
    32ce:	36 cf       	rjmp	.-404    	; 0x313c <process_tapping+0x1dc>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    32d0:	8f 2d       	mov	r24, r15
    32d2:	62 96       	adiw	r28, 0x12	; 18
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	1f 91       	pop	r17
    32e4:	0f 91       	pop	r16
    32e6:	ff 90       	pop	r15
    32e8:	ef 90       	pop	r14
    32ea:	df 90       	pop	r13
    32ec:	cf 90       	pop	r12
    32ee:	08 95       	ret

000032f0 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    32f0:	1f 93       	push	r17
    32f2:	cf 93       	push	r28
    32f4:	df 93       	push	r29
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	2c 97       	sbiw	r28, 0x0c	; 12
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	cd bf       	out	0x3d, r28	; 61
    3306:	4f 83       	std	Y+7, r20	; 0x07
    3308:	58 87       	std	Y+8, r21	; 0x08
    330a:	69 87       	std	Y+9, r22	; 0x09
    330c:	7a 87       	std	Y+10, r23	; 0x0a
    330e:	8b 87       	std	Y+11, r24	; 0x0b
    3310:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3312:	ce 01       	movw	r24, r28
    3314:	07 96       	adiw	r24, 0x07	; 7
    3316:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <process_tapping>
    331a:	88 23       	and	r24, r24
    331c:	71 f0       	breq	.+28     	; 0x333a <action_tapping_process+0x4a>

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    331e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3320:	9b 85       	ldd	r25, Y+11	; 0x0b
    3322:	89 2b       	or	r24, r25
    3324:	09 f4       	brne	.+2      	; 0x3328 <action_tapping_process+0x38>
    3326:	41 c0       	rjmp	.+130    	; 0x33aa <action_tapping_process+0xba>
    3328:	88 85       	ldd	r24, Y+8	; 0x08
    332a:	8f 3f       	cpi	r24, 0xFF	; 255
    332c:	09 f0       	breq	.+2      	; 0x3330 <action_tapping_process+0x40>
    332e:	65 c0       	rjmp	.+202    	; 0x33fa <action_tapping_process+0x10a>
    3330:	8f 81       	ldd	r24, Y+7	; 0x07
    3332:	8f 3f       	cpi	r24, 0xFF	; 255
    3334:	09 f0       	breq	.+2      	; 0x3338 <action_tapping_process+0x48>
    3336:	61 c0       	rjmp	.+194    	; 0x33fa <action_tapping_process+0x10a>
    3338:	38 c0       	rjmp	.+112    	; 0x33aa <action_tapping_process+0xba>
    333a:	86 e0       	ldi	r24, 0x06	; 6
    333c:	fe 01       	movw	r30, r28
    333e:	37 96       	adiw	r30, 0x07	; 7
    3340:	de 01       	movw	r26, r28
    3342:	11 96       	adiw	r26, 0x01	; 1
    3344:	01 90       	ld	r0, Z+
    3346:	0d 92       	st	X+, r0
    3348:	8a 95       	dec	r24
    334a:	e1 f7       	brne	.-8      	; 0x3344 <action_tapping_process+0x54>
    334c:	6a 85       	ldd	r22, Y+10	; 0x0a
    334e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3350:	61 15       	cp	r22, r1
    3352:	71 05       	cpc	r23, r1
    3354:	51 f1       	breq	.+84     	; 0x33aa <action_tapping_process+0xba>
    3356:	ff 81       	ldd	r31, Y+7	; 0x07
    3358:	e8 85       	ldd	r30, Y+8	; 0x08
    335a:	ef 3f       	cpi	r30, 0xFF	; 255
    335c:	11 f4       	brne	.+4      	; 0x3362 <action_tapping_process+0x72>
    335e:	ff 3f       	cpi	r31, 0xFF	; 255
    3360:	21 f1       	breq	.+72     	; 0x33aa <action_tapping_process+0xba>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3362:	20 91 7b 01 	lds	r18, 0x017B
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	c9 01       	movw	r24, r18
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	87 70       	andi	r24, 0x07	; 7
    336e:	99 27       	eor	r25, r25
    3370:	40 91 7a 01 	lds	r20, 0x017A
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	84 17       	cp	r24, r20
    3378:	95 07       	cpc	r25, r21
    337a:	09 f4       	brne	.+2      	; 0x337e <action_tapping_process+0x8e>
    337c:	47 c0       	rjmp	.+142    	; 0x340c <action_tapping_process+0x11c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    337e:	f9 83       	std	Y+1, r31	; 0x01
    3380:	ea 83       	std	Y+2, r30	; 0x02
    3382:	7d 83       	std	Y+5, r23	; 0x05
    3384:	6c 83       	std	Y+4, r22	; 0x04
    3386:	96 e0       	ldi	r25, 0x06	; 6
    3388:	92 9f       	mul	r25, r18
    338a:	d0 01       	movw	r26, r0
    338c:	93 9f       	mul	r25, r19
    338e:	b0 0d       	add	r27, r0
    3390:	11 24       	eor	r1, r1
    3392:	a4 58       	subi	r26, 0x84	; 132
    3394:	be 4f       	sbci	r27, 0xFE	; 254
    3396:	fe 01       	movw	r30, r28
    3398:	31 96       	adiw	r30, 0x01	; 1
    339a:	01 90       	ld	r0, Z+
    339c:	0d 92       	st	X+, r0
    339e:	9a 95       	dec	r25
    33a0:	e1 f7       	brne	.-8      	; 0x339a <action_tapping_process+0xaa>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    33a2:	80 93 7b 01 	sts	0x017B, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    33a6:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    33aa:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    33ac:	80 91 7a 01 	lds	r24, 0x017A
    33b0:	90 91 7b 01 	lds	r25, 0x017B
    33b4:	89 17       	cp	r24, r25
    33b6:	b9 f1       	breq	.+110    	; 0x3426 <action_tapping_process+0x136>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    33b8:	18 9f       	mul	r17, r24
    33ba:	c0 01       	movw	r24, r0
    33bc:	11 24       	eor	r1, r1
    33be:	84 58       	subi	r24, 0x84	; 132
    33c0:	9e 4f       	sbci	r25, 0xFE	; 254
    33c2:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <process_tapping>
    33c6:	88 23       	and	r24, r24
    33c8:	71 f1       	breq	.+92     	; 0x3426 <action_tapping_process+0x136>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    33ca:	e0 91 7a 01 	lds	r30, 0x017A
    33ce:	1e 9f       	mul	r17, r30
    33d0:	f0 01       	movw	r30, r0
    33d2:	11 24       	eor	r1, r1
    33d4:	e4 58       	subi	r30, 0x84	; 132
    33d6:	fe 4f       	sbci	r31, 0xFE	; 254
    33d8:	40 81       	ld	r20, Z
    33da:	51 81       	ldd	r21, Z+1	; 0x01
    33dc:	62 81       	ldd	r22, Z+2	; 0x02
    33de:	73 81       	ldd	r23, Z+3	; 0x03
    33e0:	84 81       	ldd	r24, Z+4	; 0x04
    33e2:	95 81       	ldd	r25, Z+5	; 0x05
    33e4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    33e8:	80 91 7a 01 	lds	r24, 0x017A
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	01 96       	adiw	r24, 0x01	; 1
    33f0:	87 70       	andi	r24, 0x07	; 7
    33f2:	99 27       	eor	r25, r25
    33f4:	80 93 7a 01 	sts	0x017A, r24
    33f8:	d9 cf       	rjmp	.-78     	; 0x33ac <action_tapping_process+0xbc>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    33fa:	4f 81       	ldd	r20, Y+7	; 0x07
    33fc:	58 85       	ldd	r21, Y+8	; 0x08
    33fe:	69 85       	ldd	r22, Y+9	; 0x09
    3400:	7a 85       	ldd	r23, Y+10	; 0x0a
    3402:	8b 85       	ldd	r24, Y+11	; 0x0b
    3404:	9c 85       	ldd	r25, Y+12	; 0x0c
    3406:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <debug_record>
    340a:	cf cf       	rjmp	.-98     	; 0x33aa <action_tapping_process+0xba>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    340c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3410:	10 92 7b 01 	sts	0x017B, r1
    waiting_buffer_tail = 0;
    3414:	10 92 7a 01 	sts	0x017A, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3418:	ec ea       	ldi	r30, 0xAC	; 172
    341a:	f1 e0       	ldi	r31, 0x01	; 1
    341c:	86 e0       	ldi	r24, 0x06	; 6
    341e:	df 01       	movw	r26, r30
    3420:	1d 92       	st	X+, r1
    3422:	8a 95       	dec	r24
    3424:	e9 f7       	brne	.-6      	; 0x3420 <action_tapping_process+0x130>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3426:	2c 96       	adiw	r28, 0x0c	; 12
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	1f 91       	pop	r17
    3438:	08 95       	ret

0000343a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    343a:	df 92       	push	r13
    343c:	ef 92       	push	r14
    343e:	ff 92       	push	r15
    3440:	0f 93       	push	r16
    3442:	1f 93       	push	r17
    3444:	cf 93       	push	r28
    3446:	df 93       	push	r29
    3448:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    344a:	89 2b       	or	r24, r25
    344c:	09 f4       	brne	.+2      	; 0x3450 <action_macro_play+0x16>
    344e:	88 c0       	rjmp	.+272    	; 0x3560 <action_macro_play+0x126>
    3450:	e1 2c       	mov	r14, r1
    3452:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3454:	dd 24       	eor	r13, r13
    3456:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3458:	ef 01       	movw	r28, r30
    345a:	21 96       	adiw	r28, 0x01	; 1
    345c:	84 91       	lpm	r24, Z
    345e:	85 37       	cpi	r24, 0x75	; 117
    3460:	09 f4       	brne	.+2      	; 0x3464 <action_macro_play+0x2a>
    3462:	60 c0       	rjmp	.+192    	; 0x3524 <action_macro_play+0xea>
    3464:	58 f4       	brcc	.+22     	; 0x347c <action_macro_play+0x42>
    3466:	84 37       	cpi	r24, 0x74	; 116
    3468:	08 f0       	brcs	.+2      	; 0x346c <action_macro_play+0x32>
    346a:	4e c0       	rjmp	.+156    	; 0x3508 <action_macro_play+0xce>
    346c:	84 30       	cpi	r24, 0x04	; 4
    346e:	08 f0       	brcs	.+2      	; 0x3472 <action_macro_play+0x38>
    3470:	68 c0       	rjmp	.+208    	; 0x3542 <action_macro_play+0x108>
    3472:	81 30       	cpi	r24, 0x01	; 1
    3474:	d1 f0       	breq	.+52     	; 0x34aa <action_macro_play+0x70>
    3476:	82 30       	cpi	r24, 0x02	; 2
    3478:	71 f1       	breq	.+92     	; 0x34d6 <action_macro_play+0x9c>
    347a:	72 c0       	rjmp	.+228    	; 0x3560 <action_macro_play+0x126>
    347c:	88 37       	cpi	r24, 0x78	; 120
    347e:	09 f4       	brne	.+2      	; 0x3482 <action_macro_play+0x48>
    3480:	5b c0       	rjmp	.+182    	; 0x3538 <action_macro_play+0xfe>
    3482:	50 f4       	brcc	.+20     	; 0x3498 <action_macro_play+0x5e>
    3484:	86 37       	cpi	r24, 0x76	; 118
    3486:	09 f4       	brne	.+2      	; 0x348a <action_macro_play+0x50>
    3488:	53 c0       	rjmp	.+166    	; 0x3530 <action_macro_play+0xf6>
    348a:	87 37       	cpi	r24, 0x77	; 119
    348c:	09 f0       	breq	.+2      	; 0x3490 <action_macro_play+0x56>
    348e:	68 c0       	rjmp	.+208    	; 0x3560 <action_macro_play+0x126>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3490:	8e 2d       	mov	r24, r14
    3492:	0e 94 c3 1c 	call	0x3986	; 0x3986 <set_mods>
    3496:	52 c0       	rjmp	.+164    	; 0x353c <action_macro_play+0x102>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3498:	9c e7       	ldi	r25, 0x7C	; 124
    349a:	98 0f       	add	r25, r24
    349c:	90 37       	cpi	r25, 0x70	; 112
    349e:	08 f0       	brcs	.+2      	; 0x34a2 <action_macro_play+0x68>
    34a0:	5f c0       	rjmp	.+190    	; 0x3560 <action_macro_play+0x126>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    34a2:	8f 77       	andi	r24, 0x7F	; 127
    34a4:	0e 94 62 13 	call	0x26c4	; 0x26c4 <unregister_code>
                break;
    34a8:	4e c0       	rjmp	.+156    	; 0x3546 <action_macro_play+0x10c>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    34aa:	8f 01       	movw	r16, r30
    34ac:	0e 5f       	subi	r16, 0xFE	; 254
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	fe 01       	movw	r30, r28
    34b2:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    34b4:	90 e2       	ldi	r25, 0x20	; 32
    34b6:	98 0f       	add	r25, r24
    34b8:	98 30       	cpi	r25, 0x08	; 8
    34ba:	50 f4       	brcc	.+20     	; 0x34d0 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    34bc:	87 70       	andi	r24, 0x07	; 7
    34be:	fd 2d       	mov	r31, r13
    34c0:	01 c0       	rjmp	.+2      	; 0x34c4 <action_macro_play+0x8a>
    34c2:	ff 0f       	add	r31, r31
    34c4:	8a 95       	dec	r24
    34c6:	ea f7       	brpl	.-6      	; 0x34c2 <action_macro_play+0x88>
    34c8:	8f 2f       	mov	r24, r31
    34ca:	0e 94 c9 1c 	call	0x3992	; 0x3992 <add_weak_mods>
    34ce:	15 c0       	rjmp	.+42     	; 0x34fa <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    34d0:	0e 94 8f 12 	call	0x251e	; 0x251e <register_code>
    34d4:	14 c0       	rjmp	.+40     	; 0x34fe <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    34d6:	8f 01       	movw	r16, r30
    34d8:	0e 5f       	subi	r16, 0xFE	; 254
    34da:	1f 4f       	sbci	r17, 0xFF	; 255
    34dc:	fe 01       	movw	r30, r28
    34de:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    34e0:	90 e2       	ldi	r25, 0x20	; 32
    34e2:	98 0f       	add	r25, r24
    34e4:	98 30       	cpi	r25, 0x08	; 8
    34e6:	68 f4       	brcc	.+26     	; 0x3502 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    34e8:	87 70       	andi	r24, 0x07	; 7
    34ea:	fd 2d       	mov	r31, r13
    34ec:	01 c0       	rjmp	.+2      	; 0x34f0 <action_macro_play+0xb6>
    34ee:	ff 0f       	add	r31, r31
    34f0:	8a 95       	dec	r24
    34f2:	ea f7       	brpl	.-6      	; 0x34ee <action_macro_play+0xb4>
    34f4:	8f 2f       	mov	r24, r31
    34f6:	0e 94 cf 1c 	call	0x399e	; 0x399e <del_weak_mods>
                    send_keyboard_report();
    34fa:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    34fe:	e8 01       	movw	r28, r16
    3500:	22 c0       	rjmp	.+68     	; 0x3546 <action_macro_play+0x10c>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3502:	0e 94 62 13 	call	0x26c4	; 0x26c4 <unregister_code>
    3506:	fb cf       	rjmp	.-10     	; 0x34fe <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    3508:	cf 01       	movw	r24, r30
    350a:	02 96       	adiw	r24, 0x02	; 2
    350c:	fe 01       	movw	r30, r28
    350e:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3510:	cc 23       	and	r28, r28
    3512:	61 f0       	breq	.+24     	; 0x352c <action_macro_play+0xf2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3514:	ef e9       	ldi	r30, 0x9F	; 159
    3516:	ff e0       	ldi	r31, 0x0F	; 15
    3518:	31 97       	sbiw	r30, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <action_macro_play+0xde>
    351c:	00 c0       	rjmp	.+0      	; 0x351e <action_macro_play+0xe4>
    351e:	00 00       	nop
    3520:	c1 50       	subi	r28, 0x01	; 1
    3522:	f6 cf       	rjmp	.-20     	; 0x3510 <action_macro_play+0xd6>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3524:	cf 01       	movw	r24, r30
    3526:	02 96       	adiw	r24, 0x02	; 2
    3528:	fe 01       	movw	r30, r28
    352a:	f4 90       	lpm	r15, Z
    352c:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    352e:	0b c0       	rjmp	.+22     	; 0x3546 <action_macro_play+0x10c>
            case MOD_STORE:
                mod_storage = get_mods();
    3530:	0e 94 b3 1c 	call	0x3966	; 0x3966 <get_mods>
    3534:	e8 2e       	mov	r14, r24
                break;
    3536:	07 c0       	rjmp	.+14     	; 0x3546 <action_macro_play+0x10c>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3538:	0e 94 c6 1c 	call	0x398c	; 0x398c <clear_mods>
                send_keyboard_report();
    353c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <send_keyboard_report>
                break;
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <action_macro_play+0x10c>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3542:	0e 94 8f 12 	call	0x251e	; 0x251e <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3546:	8f 2d       	mov	r24, r15
    3548:	88 23       	and	r24, r24
    354a:	41 f0       	breq	.+16     	; 0x355c <action_macro_play+0x122>
    354c:	ef e9       	ldi	r30, 0x9F	; 159
    354e:	ff e0       	ldi	r31, 0x0F	; 15
    3550:	31 97       	sbiw	r30, 0x01	; 1
    3552:	f1 f7       	brne	.-4      	; 0x3550 <action_macro_play+0x116>
    3554:	00 c0       	rjmp	.+0      	; 0x3556 <action_macro_play+0x11c>
    3556:	00 00       	nop
    3558:	81 50       	subi	r24, 0x01	; 1
    355a:	f6 cf       	rjmp	.-20     	; 0x3548 <action_macro_play+0x10e>
    355c:	fe 01       	movw	r30, r28
    355e:	7c cf       	rjmp	.-264    	; 0x3458 <action_macro_play+0x1e>
    }
}
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16
    3568:	ff 90       	pop	r15
    356a:	ef 90       	pop	r14
    356c:	df 90       	pop	r13
    356e:	08 95       	ret

00003570 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3570:	60 93 b6 01 	sts	0x01B6, r22
    3574:	70 93 b7 01 	sts	0x01B7, r23
    3578:	80 93 b8 01 	sts	0x01B8, r24
    357c:	90 93 b9 01 	sts	0x01B9, r25
    hook_default_layer_change(default_layer_state);
    3580:	0e 94 57 1d 	call	0x3aae	; 0x3aae <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3584:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <clear_keyboard_but_mods>

00003588 <layer_state_set>:
 * Keymap Layer State
 */
uint32_t layer_state = 0;

static void layer_state_set(uint32_t state)
{
    3588:	cf 92       	push	r12
    358a:	df 92       	push	r13
    358c:	ef 92       	push	r14
    358e:	ff 92       	push	r15
    3590:	6b 01       	movw	r12, r22
    3592:	7c 01       	movw	r14, r24
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    led_layer_set(state);
    3594:	0e 94 1f 09 	call	0x123e	; 0x123e <led_layer_set>
    layer_state = state;
    3598:	c0 92 b2 01 	sts	0x01B2, r12
    359c:	d0 92 b3 01 	sts	0x01B3, r13
    35a0:	e0 92 b4 01 	sts	0x01B4, r14
    35a4:	f0 92 b5 01 	sts	0x01B5, r15
    hook_layer_change(layer_state);
    35a8:	c7 01       	movw	r24, r14
    35aa:	b6 01       	movw	r22, r12
    35ac:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
}
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	df 90       	pop	r13
    35b6:	cf 90       	pop	r12
    layer_debug(); dprint(" to ");
    led_layer_set(state);
    layer_state = state;
    hook_layer_change(layer_state);
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    35b8:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <clear_keyboard_but_mods>

000035bc <default_layer_debug>:
    35bc:	08 95       	ret

000035be <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    35be:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <default_layer_state_set>

000035c2 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    35c6:	00 91 b6 01 	lds	r16, 0x01B6
    35ca:	10 91 b7 01 	lds	r17, 0x01B7
    35ce:	20 91 b8 01 	lds	r18, 0x01B8
    35d2:	30 91 b9 01 	lds	r19, 0x01B9
    35d6:	60 2b       	or	r22, r16
    35d8:	71 2b       	or	r23, r17
    35da:	82 2b       	or	r24, r18
    35dc:	93 2b       	or	r25, r19
}
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    35e2:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <default_layer_state_set>

000035e6 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    35ea:	00 91 b6 01 	lds	r16, 0x01B6
    35ee:	10 91 b7 01 	lds	r17, 0x01B7
    35f2:	20 91 b8 01 	lds	r18, 0x01B8
    35f6:	30 91 b9 01 	lds	r19, 0x01B9
    35fa:	60 23       	and	r22, r16
    35fc:	71 23       	and	r23, r17
    35fe:	82 23       	and	r24, r18
    3600:	93 23       	and	r25, r19
}
    3602:	1f 91       	pop	r17
    3604:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3606:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <default_layer_state_set>

0000360a <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    360a:	0f 93       	push	r16
    360c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    360e:	00 91 b6 01 	lds	r16, 0x01B6
    3612:	10 91 b7 01 	lds	r17, 0x01B7
    3616:	20 91 b8 01 	lds	r18, 0x01B8
    361a:	30 91 b9 01 	lds	r19, 0x01B9
    361e:	60 27       	eor	r22, r16
    3620:	71 27       	eor	r23, r17
    3622:	82 27       	eor	r24, r18
    3624:	93 27       	eor	r25, r19
}
    3626:	1f 91       	pop	r17
    3628:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    362a:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <default_layer_state_set>

0000362e <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	cb 01       	movw	r24, r22
    3634:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

00003638 <layer_move>:
}

void layer_move(uint8_t layer)
{
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    363c:	41 e0       	ldi	r20, 0x01	; 1
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	8a 01       	movw	r16, r20
    3646:	9b 01       	movw	r18, r22
    3648:	04 c0       	rjmp	.+8      	; 0x3652 <layer_move+0x1a>
    364a:	00 0f       	add	r16, r16
    364c:	11 1f       	adc	r17, r17
    364e:	22 1f       	adc	r18, r18
    3650:	33 1f       	adc	r19, r19
    3652:	8a 95       	dec	r24
    3654:	d2 f7       	brpl	.-12     	; 0x364a <layer_move+0x12>
    3656:	c9 01       	movw	r24, r18
    3658:	b8 01       	movw	r22, r16
}
    365a:	1f 91       	pop	r17
    365c:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    365e:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

00003662 <layer_on>:
}

void layer_on(uint8_t layer)
{
    3662:	0f 93       	push	r16
    3664:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	04 c0       	rjmp	.+8      	; 0x3678 <layer_on+0x16>
    3670:	44 0f       	add	r20, r20
    3672:	55 1f       	adc	r21, r21
    3674:	66 1f       	adc	r22, r22
    3676:	77 1f       	adc	r23, r23
    3678:	8a 95       	dec	r24
    367a:	d2 f7       	brpl	.-12     	; 0x3670 <layer_on+0xe>
    367c:	80 91 b2 01 	lds	r24, 0x01B2
    3680:	90 91 b3 01 	lds	r25, 0x01B3
    3684:	a0 91 b4 01 	lds	r26, 0x01B4
    3688:	b0 91 b5 01 	lds	r27, 0x01B5
    368c:	8a 01       	movw	r16, r20
    368e:	9b 01       	movw	r18, r22
    3690:	08 2b       	or	r16, r24
    3692:	19 2b       	or	r17, r25
    3694:	2a 2b       	or	r18, r26
    3696:	3b 2b       	or	r19, r27
    3698:	c9 01       	movw	r24, r18
    369a:	b8 01       	movw	r22, r16
}
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    36a0:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

000036a4 <layer_off>:
}

void layer_off(uint8_t layer)
{
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    36a8:	41 e0       	ldi	r20, 0x01	; 1
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	04 c0       	rjmp	.+8      	; 0x36ba <layer_off+0x16>
    36b2:	44 0f       	add	r20, r20
    36b4:	55 1f       	adc	r21, r21
    36b6:	66 1f       	adc	r22, r22
    36b8:	77 1f       	adc	r23, r23
    36ba:	8a 95       	dec	r24
    36bc:	d2 f7       	brpl	.-12     	; 0x36b2 <layer_off+0xe>
    36be:	40 95       	com	r20
    36c0:	50 95       	com	r21
    36c2:	60 95       	com	r22
    36c4:	70 95       	com	r23
    36c6:	80 91 b2 01 	lds	r24, 0x01B2
    36ca:	90 91 b3 01 	lds	r25, 0x01B3
    36ce:	a0 91 b4 01 	lds	r26, 0x01B4
    36d2:	b0 91 b5 01 	lds	r27, 0x01B5
    36d6:	8a 01       	movw	r16, r20
    36d8:	9b 01       	movw	r18, r22
    36da:	08 23       	and	r16, r24
    36dc:	19 23       	and	r17, r25
    36de:	2a 23       	and	r18, r26
    36e0:	3b 23       	and	r19, r27
    36e2:	c9 01       	movw	r24, r18
    36e4:	b8 01       	movw	r22, r16
}
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    36ea:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

000036ee <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	70 e0       	ldi	r23, 0x00	; 0
    36fa:	04 c0       	rjmp	.+8      	; 0x3704 <layer_invert+0x16>
    36fc:	44 0f       	add	r20, r20
    36fe:	55 1f       	adc	r21, r21
    3700:	66 1f       	adc	r22, r22
    3702:	77 1f       	adc	r23, r23
    3704:	8a 95       	dec	r24
    3706:	d2 f7       	brpl	.-12     	; 0x36fc <layer_invert+0xe>
    3708:	80 91 b2 01 	lds	r24, 0x01B2
    370c:	90 91 b3 01 	lds	r25, 0x01B3
    3710:	a0 91 b4 01 	lds	r26, 0x01B4
    3714:	b0 91 b5 01 	lds	r27, 0x01B5
    3718:	8a 01       	movw	r16, r20
    371a:	9b 01       	movw	r18, r22
    371c:	08 27       	eor	r16, r24
    371e:	19 27       	eor	r17, r25
    3720:	2a 27       	eor	r18, r26
    3722:	3b 27       	eor	r19, r27
    3724:	c9 01       	movw	r24, r18
    3726:	b8 01       	movw	r22, r16
}
    3728:	1f 91       	pop	r17
    372a:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    372c:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

00003730 <layer_or>:
}

void layer_or(uint32_t state)
{
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3734:	00 91 b2 01 	lds	r16, 0x01B2
    3738:	10 91 b3 01 	lds	r17, 0x01B3
    373c:	20 91 b4 01 	lds	r18, 0x01B4
    3740:	30 91 b5 01 	lds	r19, 0x01B5
    3744:	60 2b       	or	r22, r16
    3746:	71 2b       	or	r23, r17
    3748:	82 2b       	or	r24, r18
    374a:	93 2b       	or	r25, r19
}
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3750:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

00003754 <layer_and>:
}
void layer_and(uint32_t state)
{
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3758:	00 91 b2 01 	lds	r16, 0x01B2
    375c:	10 91 b3 01 	lds	r17, 0x01B3
    3760:	20 91 b4 01 	lds	r18, 0x01B4
    3764:	30 91 b5 01 	lds	r19, 0x01B5
    3768:	60 23       	and	r22, r16
    376a:	71 23       	and	r23, r17
    376c:	82 23       	and	r24, r18
    376e:	93 23       	and	r25, r19
}
    3770:	1f 91       	pop	r17
    3772:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3774:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

00003778 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3778:	0f 93       	push	r16
    377a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    377c:	00 91 b2 01 	lds	r16, 0x01B2
    3780:	10 91 b3 01 	lds	r17, 0x01B3
    3784:	20 91 b4 01 	lds	r18, 0x01B4
    3788:	30 91 b5 01 	lds	r19, 0x01B5
    378c:	60 27       	eor	r22, r16
    378e:	71 27       	eor	r23, r17
    3790:	82 27       	eor	r24, r18
    3792:	93 27       	eor	r25, r19
}
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3798:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <layer_state_set>

0000379c <layer_debug>:
}

void layer_debug(void)
{
    379c:	08 95       	ret

0000379e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    379e:	cf 92       	push	r12
    37a0:	df 92       	push	r13
    37a2:	ef 92       	push	r14
    37a4:	ff 92       	push	r15
    37a6:	0f 93       	push	r16
    37a8:	1f 93       	push	r17
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    37b0:	c0 90 b2 01 	lds	r12, 0x01B2
    37b4:	d0 90 b3 01 	lds	r13, 0x01B3
    37b8:	e0 90 b4 01 	lds	r14, 0x01B4
    37bc:	f0 90 b5 01 	lds	r15, 0x01B5
    37c0:	80 91 b6 01 	lds	r24, 0x01B6
    37c4:	90 91 b7 01 	lds	r25, 0x01B7
    37c8:	a0 91 b8 01 	lds	r26, 0x01B8
    37cc:	b0 91 b9 01 	lds	r27, 0x01B9
    37d0:	c8 2a       	or	r12, r24
    37d2:	d9 2a       	or	r13, r25
    37d4:	ea 2a       	or	r14, r26
    37d6:	fb 2a       	or	r15, r27
    37d8:	cf e1       	ldi	r28, 0x1F	; 31
    37da:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    37dc:	d7 01       	movw	r26, r14
    37de:	c6 01       	movw	r24, r12
    37e0:	0c 2e       	mov	r0, r28
    37e2:	04 c0       	rjmp	.+8      	; 0x37ec <layer_switch_get_action+0x4e>
    37e4:	b6 95       	lsr	r27
    37e6:	a7 95       	ror	r26
    37e8:	97 95       	ror	r25
    37ea:	87 95       	ror	r24
    37ec:	0a 94       	dec	r0
    37ee:	d2 f7       	brpl	.-12     	; 0x37e4 <layer_switch_get_action+0x46>
    37f0:	80 ff       	sbrs	r24, 0
    37f2:	07 c0       	rjmp	.+14     	; 0x3802 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    37f4:	b8 01       	movw	r22, r16
    37f6:	8c 2f       	mov	r24, r28
    37f8:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    37fc:	81 30       	cpi	r24, 0x01	; 1
    37fe:	91 05       	cpc	r25, r1
    3800:	31 f4       	brne	.+12     	; 0x380e <layer_switch_get_action+0x70>
    3802:	21 97       	sbiw	r28, 0x01	; 1
    3804:	58 f7       	brcc	.-42     	; 0x37dc <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3806:	b8 01       	movw	r22, r16
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	1f 91       	pop	r17
    3814:	0f 91       	pop	r16
    3816:	ff 90       	pop	r15
    3818:	ef 90       	pop	r14
    381a:	df 90       	pop	r13
    381c:	cf 90       	pop	r12
    381e:	08 95       	ret

00003820 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    3820:	90 91 0b 01 	lds	r25, 0x010B
    3824:	99 23       	and	r25, r25
    3826:	79 f1       	breq	.+94     	; 0x3886 <add_key+0x66>
    3828:	90 91 0c 01 	lds	r25, 0x010C
    382c:	99 23       	and	r25, r25
    382e:	59 f1       	breq	.+86     	; 0x3886 <add_key+0x66>
    3830:	98 2f       	mov	r25, r24
    3832:	96 95       	lsr	r25
    3834:	96 95       	lsr	r25
    3836:	96 95       	lsr	r25
    3838:	9f 30       	cpi	r25, 0x0F	; 15
    383a:	a0 f4       	brcc	.+40     	; 0x3864 <add_key+0x44>
    383c:	e0 91 0d 01 	lds	r30, 0x010D
    3840:	f0 91 0e 01 	lds	r31, 0x010E
    3844:	e9 0f       	add	r30, r25
    3846:	f1 1d       	adc	r31, r1
    3848:	87 70       	andi	r24, 0x07	; 7
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	a9 01       	movw	r20, r18
    3850:	02 c0       	rjmp	.+4      	; 0x3856 <add_key+0x36>
    3852:	44 0f       	add	r20, r20
    3854:	55 1f       	adc	r21, r21
    3856:	8a 95       	dec	r24
    3858:	e2 f7       	brpl	.-8      	; 0x3852 <add_key+0x32>
    385a:	ca 01       	movw	r24, r20
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	89 2b       	or	r24, r25
    3860:	81 83       	std	Z+1, r24	; 0x01
    3862:	08 95       	ret
    3864:	90 91 cd 01 	lds	r25, 0x01CD
    3868:	90 ff       	sbrs	r25, 0
    386a:	29 c0       	rjmp	.+82     	; 0x38be <add_key+0x9e>
    386c:	1f 92       	push	r1
    386e:	8f 93       	push	r24
    3870:	8e ee       	ldi	r24, 0xEE	; 238
    3872:	94 e0       	ldi	r25, 0x04	; 4
    3874:	9f 93       	push	r25
    3876:	8f 93       	push	r24
    3878:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	08 95       	ret
    3886:	20 91 0d 01 	lds	r18, 0x010D
    388a:	30 91 0e 01 	lds	r19, 0x010E
    388e:	f9 01       	movw	r30, r18
    3890:	32 96       	adiw	r30, 0x02	; 2
    3892:	9f ef       	ldi	r25, 0xFF	; 255
    3894:	40 e0       	ldi	r20, 0x00	; 0
    3896:	51 91       	ld	r21, Z+
    3898:	85 17       	cp	r24, r21
    389a:	89 f0       	breq	.+34     	; 0x38be <add_key+0x9e>
    389c:	9f 3f       	cpi	r25, 0xFF	; 255
    389e:	19 f4       	brne	.+6      	; 0x38a6 <add_key+0x86>
    38a0:	51 11       	cpse	r21, r1
    38a2:	01 c0       	rjmp	.+2      	; 0x38a6 <add_key+0x86>
    38a4:	94 2f       	mov	r25, r20
    38a6:	4f 5f       	subi	r20, 0xFF	; 255
    38a8:	4e 30       	cpi	r20, 0x0E	; 14
    38aa:	a9 f7       	brne	.-22     	; 0x3896 <add_key+0x76>
    38ac:	9f 3f       	cpi	r25, 0xFF	; 255
    38ae:	39 f0       	breq	.+14     	; 0x38be <add_key+0x9e>
    38b0:	f9 01       	movw	r30, r18
    38b2:	e9 0f       	add	r30, r25
    38b4:	f1 1d       	adc	r31, r1
    38b6:	97 fd       	sbrc	r25, 7
    38b8:	fa 95       	dec	r31
    38ba:	82 83       	std	Z+2, r24	; 0x02
    38bc:	08 95       	ret
    38be:	08 95       	ret

000038c0 <del_key>:
    38c0:	90 91 0b 01 	lds	r25, 0x010B
    38c4:	99 23       	and	r25, r25
    38c6:	81 f1       	breq	.+96     	; 0x3928 <del_key+0x68>
    38c8:	90 91 0c 01 	lds	r25, 0x010C
    38cc:	99 23       	and	r25, r25
    38ce:	61 f1       	breq	.+88     	; 0x3928 <del_key+0x68>
    38d0:	98 2f       	mov	r25, r24
    38d2:	96 95       	lsr	r25
    38d4:	96 95       	lsr	r25
    38d6:	96 95       	lsr	r25
    38d8:	9f 30       	cpi	r25, 0x0F	; 15
    38da:	a8 f4       	brcc	.+42     	; 0x3906 <del_key+0x46>
    38dc:	e0 91 0d 01 	lds	r30, 0x010D
    38e0:	f0 91 0e 01 	lds	r31, 0x010E
    38e4:	e9 0f       	add	r30, r25
    38e6:	f1 1d       	adc	r31, r1
    38e8:	87 70       	andi	r24, 0x07	; 7
    38ea:	21 e0       	ldi	r18, 0x01	; 1
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	a9 01       	movw	r20, r18
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <del_key+0x36>
    38f2:	44 0f       	add	r20, r20
    38f4:	55 1f       	adc	r21, r21
    38f6:	8a 95       	dec	r24
    38f8:	e2 f7       	brpl	.-8      	; 0x38f2 <del_key+0x32>
    38fa:	ca 01       	movw	r24, r20
    38fc:	80 95       	com	r24
    38fe:	91 81       	ldd	r25, Z+1	; 0x01
    3900:	89 23       	and	r24, r25
    3902:	81 83       	std	Z+1, r24	; 0x01
    3904:	08 95       	ret
    3906:	90 91 cd 01 	lds	r25, 0x01CD
    390a:	90 ff       	sbrs	r25, 0
    390c:	1d c0       	rjmp	.+58     	; 0x3948 <del_key+0x88>
    390e:	1f 92       	push	r1
    3910:	8f 93       	push	r24
    3912:	80 ed       	ldi	r24, 0xD0	; 208
    3914:	94 e0       	ldi	r25, 0x04	; 4
    3916:	9f 93       	push	r25
    3918:	8f 93       	push	r24
    391a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	08 95       	ret
    3928:	20 91 0d 01 	lds	r18, 0x010D
    392c:	30 91 0e 01 	lds	r19, 0x010E
    3930:	f9 01       	movw	r30, r18
    3932:	32 96       	adiw	r30, 0x02	; 2
    3934:	20 5f       	subi	r18, 0xF0	; 240
    3936:	3f 4f       	sbci	r19, 0xFF	; 255
    3938:	90 81       	ld	r25, Z
    393a:	89 13       	cpse	r24, r25
    393c:	01 c0       	rjmp	.+2      	; 0x3940 <del_key+0x80>
    393e:	10 82       	st	Z, r1
    3940:	31 96       	adiw	r30, 0x01	; 1
    3942:	e2 17       	cp	r30, r18
    3944:	f3 07       	cpc	r31, r19
    3946:	c1 f7       	brne	.-16     	; 0x3938 <del_key+0x78>
    3948:	08 95       	ret

0000394a <clear_keys>:
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	e0 91 0d 01 	lds	r30, 0x010D
    3952:	f0 91 0e 01 	lds	r31, 0x010E
    3956:	e8 0f       	add	r30, r24
    3958:	f9 1f       	adc	r31, r25
    395a:	10 82       	st	Z, r1
    395c:	01 96       	adiw	r24, 0x01	; 1
    395e:	80 31       	cpi	r24, 0x10	; 16
    3960:	91 05       	cpc	r25, r1
    3962:	a9 f7       	brne	.-22     	; 0x394e <clear_keys+0x4>
    3964:	08 95       	ret

00003966 <get_mods>:
    3966:	80 91 cc 01 	lds	r24, 0x01CC
    396a:	08 95       	ret

0000396c <add_mods>:
    396c:	90 91 cc 01 	lds	r25, 0x01CC
    3970:	89 2b       	or	r24, r25
    3972:	80 93 cc 01 	sts	0x01CC, r24
    3976:	08 95       	ret

00003978 <del_mods>:
    3978:	80 95       	com	r24
    397a:	90 91 cc 01 	lds	r25, 0x01CC
    397e:	89 23       	and	r24, r25
    3980:	80 93 cc 01 	sts	0x01CC, r24
    3984:	08 95       	ret

00003986 <set_mods>:
    3986:	80 93 cc 01 	sts	0x01CC, r24
    398a:	08 95       	ret

0000398c <clear_mods>:
    398c:	10 92 cc 01 	sts	0x01CC, r1
    3990:	08 95       	ret

00003992 <add_weak_mods>:
    3992:	90 91 cb 01 	lds	r25, 0x01CB
    3996:	89 2b       	or	r24, r25
    3998:	80 93 cb 01 	sts	0x01CB, r24
    399c:	08 95       	ret

0000399e <del_weak_mods>:
    399e:	80 95       	com	r24
    39a0:	90 91 cb 01 	lds	r25, 0x01CB
    39a4:	89 23       	and	r24, r25
    39a6:	80 93 cb 01 	sts	0x01CB, r24
    39aa:	08 95       	ret

000039ac <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    39ac:	10 92 cb 01 	sts	0x01CB, r1
    39b0:	08 95       	ret

000039b2 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    39b2:	80 93 ba 01 	sts	0x01BA, r24
    39b6:	08 95       	ret

000039b8 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    39b8:	10 92 ba 01 	sts	0x01BA, r1
    39bc:	08 95       	ret

000039be <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    39be:	80 91 0d 01 	lds	r24, 0x010D
    39c2:	90 91 0e 01 	lds	r25, 0x010E
    39c6:	fc 01       	movw	r30, r24
    39c8:	31 96       	adiw	r30, 0x01	; 1
    39ca:	9c 01       	movw	r18, r24
    39cc:	20 5f       	subi	r18, 0xF0	; 240
    39ce:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    39d2:	91 91       	ld	r25, Z+
    39d4:	91 11       	cpse	r25, r1
            cnt++;
    39d6:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    39d8:	e2 17       	cp	r30, r18
    39da:	f3 07       	cpc	r31, r19
    39dc:	d1 f7       	brne	.-12     	; 0x39d2 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    39de:	08 95       	ret

000039e0 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    39e0:	e0 91 0d 01 	lds	r30, 0x010D
    39e4:	f0 91 0e 01 	lds	r31, 0x010E
    39e8:	80 91 cc 01 	lds	r24, 0x01CC
    39ec:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    39ee:	e0 91 0d 01 	lds	r30, 0x010D
    39f2:	f0 91 0e 01 	lds	r31, 0x010E
    39f6:	90 81       	ld	r25, Z
    39f8:	80 91 cb 01 	lds	r24, 0x01CB
    39fc:	89 2b       	or	r24, r25
    39fe:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3a00:	80 91 ba 01 	lds	r24, 0x01BA
    3a04:	88 23       	and	r24, r24
    3a06:	61 f0       	breq	.+24     	; 0x3a20 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3a08:	e0 91 0d 01 	lds	r30, 0x010D
    3a0c:	f0 91 0e 01 	lds	r31, 0x010E
    3a10:	90 81       	ld	r25, Z
    3a12:	89 2b       	or	r24, r25
    3a14:	80 83       	st	Z, r24
        if (has_anykey()) {
    3a16:	0e 94 df 1c 	call	0x39be	; 0x39be <has_anykey>
    3a1a:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3a1c:	10 92 ba 01 	sts	0x01BA, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3a20:	80 91 0d 01 	lds	r24, 0x010D
    3a24:	90 91 0e 01 	lds	r25, 0x010E
    3a28:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <host_keyboard_send>

00003a2c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3a2c:	90 93 39 01 	sts	0x0139, r25
    3a30:	80 93 38 01 	sts	0x0138, r24
    3a34:	08 95       	ret

00003a36 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3a36:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3a38:	98 2f       	mov	r25, r24
    3a3a:	93 73       	andi	r25, 0x33	; 51
    3a3c:	44 e0       	ldi	r20, 0x04	; 4
    3a3e:	94 9f       	mul	r25, r20
    3a40:	90 01       	movw	r18, r0
    3a42:	11 24       	eor	r1, r1
    3a44:	8c 7c       	andi	r24, 0xCC	; 204
    3a46:	86 95       	lsr	r24
    3a48:	86 95       	lsr	r24
    3a4a:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3a4c:	82 2f       	mov	r24, r18
    3a4e:	85 75       	andi	r24, 0x55	; 85
    3a50:	88 0f       	add	r24, r24
    3a52:	2a 7a       	andi	r18, 0xAA	; 170
    3a54:	26 95       	lsr	r18
    return bits;
}
    3a56:	82 2b       	or	r24, r18
    3a58:	08 95       	ret

00003a5a <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	1f 92       	push	r1
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3a66:	99 83       	std	Y+1, r25	; 0x01
    3a68:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <bitrev>
    3a6c:	18 2f       	mov	r17, r24
    3a6e:	99 81       	ldd	r25, Y+1	; 0x01
    3a70:	89 2f       	mov	r24, r25
    3a72:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <bitrev>
    return bits;
    3a76:	21 2f       	mov	r18, r17
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	32 2f       	mov	r19, r18
    3a7c:	22 27       	eor	r18, r18
}
    3a7e:	a9 01       	movw	r20, r18
    3a80:	48 2b       	or	r20, r24
    3a82:	ca 01       	movw	r24, r20
    3a84:	0f 90       	pop	r0
    3a86:	df 91       	pop	r29
    3a88:	cf 91       	pop	r28
    3a8a:	1f 91       	pop	r17
    3a8c:	08 95       	ret

00003a8e <hook_keyboard_loop>:
    3a8e:	08 95       	ret

00003a90 <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
    3a94:	00 d0       	rcall	.+0      	; 0x3a96 <hook_matrix_change+0x6>
    3a96:	00 d0       	rcall	.+0      	; 0x3a98 <hook_matrix_change+0x8>
    3a98:	1f 92       	push	r1
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	df 91       	pop	r29
    3aaa:	cf 91       	pop	r28
    3aac:	08 95       	ret

00003aae <hook_default_layer_change>:
    3aae:	08 95       	ret

00003ab0 <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3ab0:	08 95       	ret

00003ab2 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3ab2:	0c 94 4d 12 	jmp	0x249a	; 0x249a <keyboard_set_leds>

00003ab6 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3ab6:	08 95       	ret

00003ab8 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3ab8:	80 91 e2 01 	lds	r24, 0x01E2
    3abc:	84 30       	cpi	r24, 0x04	; 4
    3abe:	21 f1       	breq	.+72     	; 0x3b08 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3ac0:	10 92 ce 01 	sts	0x01CE, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3ac4:	20 e4       	ldi	r18, 0x40	; 64
    3ac6:	88 e1       	ldi	r24, 0x18	; 24
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	a8 95       	wdr
    3ad0:	80 93 60 00 	sts	0x0060, r24
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3ada:	83 b7       	in	r24, 0x33	; 51
    3adc:	81 7f       	andi	r24, 0xF1	; 241
    3ade:	84 60       	ori	r24, 0x04	; 4
    3ae0:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3ae2:	83 b7       	in	r24, 0x33	; 51
    3ae4:	81 60       	ori	r24, 0x01	; 1
    3ae6:	83 bf       	out	0x33, r24	; 51
    sei();
    3ae8:	78 94       	sei
    sleep_cpu();
    3aea:	88 95       	sleep
    sleep_disable();
    3aec:	83 b7       	in	r24, 0x33	; 51
    3aee:	8e 7f       	andi	r24, 0xFE	; 254
    3af0:	83 bf       	out	0x33, r24	; 51
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	a8 95       	wdr
    3af8:	80 91 60 00 	lds	r24, 0x0060
    3afc:	88 61       	ori	r24, 0x18	; 24
    3afe:	80 93 60 00 	sts	0x0060, r24
    3b02:	10 92 60 00 	sts	0x0060, r1
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	08 95       	ret

00003b0a <matrix_power_down>:
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    3b0a:	08 95       	ret

00003b0c <matrix_power_up>:
    3b0c:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <matrix_power_down>

00003b10 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3b10:	cf 93       	push	r28
    matrix_power_up();
    3b12:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <matrix_power_up>
    matrix_scan();
    3b16:	0e 94 96 07 	call	0xf2c	; 0xf2c <matrix_scan>
    matrix_power_down();
    3b1a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b1e:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3b20:	8c 2f       	mov	r24, r28
    3b22:	0e 94 cf 08 	call	0x119e	; 0x119e <matrix_get_row>
    3b26:	89 2b       	or	r24, r25
    3b28:	29 f4       	brne	.+10     	; 0x3b34 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b2a:	cf 5f       	subi	r28, 0xFF	; 255
    3b2c:	c6 30       	cpi	r28, 0x06	; 6
    3b2e:	c1 f7       	brne	.-16     	; 0x3b20 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	01 c0       	rjmp	.+2      	; 0x3b36 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3b36:	cf 91       	pop	r28
    3b38:	08 95       	ret

00003b3a <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3b3a:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <clear_keyboard>

00003b3e <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3b3e:	1f 92       	push	r1
    3b40:	0f 92       	push	r0
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	0f 92       	push	r0
    3b46:	11 24       	eor	r1, r1
    3b48:	8f 93       	push	r24
    3b4a:	9f 93       	push	r25
    3b4c:	af 93       	push	r26
    3b4e:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3b50:	80 91 ce 01 	lds	r24, 0x01CE
    3b54:	81 11       	cpse	r24, r1
    3b56:	13 c0       	rjmp	.+38     	; 0x3b7e <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3b58:	80 91 cf 01 	lds	r24, 0x01CF
    3b5c:	90 91 d0 01 	lds	r25, 0x01D0
    3b60:	a0 91 d1 01 	lds	r26, 0x01D1
    3b64:	b0 91 d2 01 	lds	r27, 0x01D2
    3b68:	41 96       	adiw	r24, 0x11	; 17
    3b6a:	a1 1d       	adc	r26, r1
    3b6c:	b1 1d       	adc	r27, r1
    3b6e:	80 93 cf 01 	sts	0x01CF, r24
    3b72:	90 93 d0 01 	sts	0x01D0, r25
    3b76:	a0 93 d1 01 	sts	0x01D1, r26
    3b7a:	b0 93 d2 01 	sts	0x01D2, r27
            break;
        default:
            ;
    }
}
    3b7e:	bf 91       	pop	r27
    3b80:	af 91       	pop	r26
    3b82:	9f 91       	pop	r25
    3b84:	8f 91       	pop	r24
    3b86:	0f 90       	pop	r0
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	0f 90       	pop	r0
    3b8c:	1f 90       	pop	r1
    3b8e:	18 95       	reti

00003b90 <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    3b90:	82 e0       	ldi	r24, 0x02	; 2
    3b92:	84 bd       	out	0x24, r24	; 36
    3b94:	93 e0       	ldi	r25, 0x03	; 3
    3b96:	95 bd       	out	0x25, r25	; 37
    3b98:	9a ef       	ldi	r25, 0xFA	; 250
    3b9a:	97 bd       	out	0x27, r25	; 39
    3b9c:	80 93 6e 00 	sts	0x006E, r24
    3ba0:	08 95       	ret

00003ba2 <timer_read>:
    3ba2:	2f b7       	in	r18, 0x3f	; 63
    3ba4:	f8 94       	cli
    3ba6:	80 91 cf 01 	lds	r24, 0x01CF
    3baa:	90 91 d0 01 	lds	r25, 0x01D0
    3bae:	a0 91 d1 01 	lds	r26, 0x01D1
    3bb2:	b0 91 d2 01 	lds	r27, 0x01D2
    3bb6:	2f bf       	out	0x3f, r18	; 63
    3bb8:	08 95       	ret

00003bba <timer_read32>:
    3bba:	2f b7       	in	r18, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	60 91 cf 01 	lds	r22, 0x01CF
    3bc2:	70 91 d0 01 	lds	r23, 0x01D0
    3bc6:	80 91 d1 01 	lds	r24, 0x01D1
    3bca:	90 91 d2 01 	lds	r25, 0x01D2
    3bce:	2f bf       	out	0x3f, r18	; 63
    3bd0:	08 95       	ret

00003bd2 <timer_elapsed>:
    3bd2:	cf 92       	push	r12
    3bd4:	df 92       	push	r13
    3bd6:	ef 92       	push	r14
    3bd8:	ff 92       	push	r15
    3bda:	0f 93       	push	r16
    3bdc:	1f 93       	push	r17
    3bde:	2f b7       	in	r18, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	40 91 cf 01 	lds	r20, 0x01CF
    3be6:	50 91 d0 01 	lds	r21, 0x01D0
    3bea:	60 91 d1 01 	lds	r22, 0x01D1
    3bee:	70 91 d2 01 	lds	r23, 0x01D2
    3bf2:	2f bf       	out	0x3f, r18	; 63
    3bf4:	6a 01       	movw	r12, r20
    3bf6:	7b 01       	movw	r14, r22
    3bf8:	ee 24       	eor	r14, r14
    3bfa:	ff 24       	eor	r15, r15
    3bfc:	8c 01       	movw	r16, r24
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	c0 16       	cp	r12, r16
    3c04:	d1 06       	cpc	r13, r17
    3c06:	e2 06       	cpc	r14, r18
    3c08:	f3 06       	cpc	r15, r19
    3c0a:	10 f4       	brcc	.+4      	; 0x3c10 <timer_elapsed+0x3e>
    3c0c:	41 50       	subi	r20, 0x01	; 1
    3c0e:	51 09       	sbc	r21, r1
    3c10:	9a 01       	movw	r18, r20
    3c12:	28 1b       	sub	r18, r24
    3c14:	39 0b       	sbc	r19, r25
    3c16:	c9 01       	movw	r24, r18
    3c18:	1f 91       	pop	r17
    3c1a:	0f 91       	pop	r16
    3c1c:	ff 90       	pop	r15
    3c1e:	ef 90       	pop	r14
    3c20:	df 90       	pop	r13
    3c22:	cf 90       	pop	r12
    3c24:	08 95       	ret

00003c26 <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3c26:	1f 92       	push	r1
    3c28:	0f 92       	push	r0
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	0f 92       	push	r0
    3c2e:	11 24       	eor	r1, r1
    3c30:	8f 93       	push	r24
    3c32:	9f 93       	push	r25
    3c34:	af 93       	push	r26
    3c36:	bf 93       	push	r27
    timer_count++;
    3c38:	80 91 cf 01 	lds	r24, 0x01CF
    3c3c:	90 91 d0 01 	lds	r25, 0x01D0
    3c40:	a0 91 d1 01 	lds	r26, 0x01D1
    3c44:	b0 91 d2 01 	lds	r27, 0x01D2
    3c48:	01 96       	adiw	r24, 0x01	; 1
    3c4a:	a1 1d       	adc	r26, r1
    3c4c:	b1 1d       	adc	r27, r1
    3c4e:	80 93 cf 01 	sts	0x01CF, r24
    3c52:	90 93 d0 01 	sts	0x01D0, r25
    3c56:	a0 93 d1 01 	sts	0x01D1, r26
    3c5a:	b0 93 d2 01 	sts	0x01D2, r27
}
    3c5e:	bf 91       	pop	r27
    3c60:	af 91       	pop	r26
    3c62:	9f 91       	pop	r25
    3c64:	8f 91       	pop	r24
    3c66:	0f 90       	pop	r0
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	0f 90       	pop	r0
    3c6c:	1f 90       	pop	r1
    3c6e:	18 95       	reti

00003c70 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3c70:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <USB_Disable>
    cli();
    3c74:	f8 94       	cli
    3c76:	2f ef       	ldi	r18, 0xFF	; 255
    3c78:	87 ea       	ldi	r24, 0xA7	; 167
    3c7a:	91 e6       	ldi	r25, 0x61	; 97
    3c7c:	21 50       	subi	r18, 0x01	; 1
    3c7e:	80 40       	sbci	r24, 0x00	; 0
    3c80:	90 40       	sbci	r25, 0x00	; 0
    3c82:	e1 f7       	brne	.-8      	; 0x3c7c <bootloader_jump+0xc>
    3c84:	00 c0       	rjmp	.+0      	; 0x3c86 <bootloader_jump+0x16>
    3c86:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3c88:	87 e0       	ldi	r24, 0x07	; 7
    3c8a:	90 eb       	ldi	r25, 0xB0	; 176
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	80 93 ec 01 	sts	0x01EC, r24
    3c92:	90 93 ed 01 	sts	0x01ED, r25
    3c96:	a0 93 ee 01 	sts	0x01EE, r26
    3c9a:	b0 93 ef 01 	sts	0x01EF, r27
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3c9e:	9c e0       	ldi	r25, 0x0C	; 12
    3ca0:	88 e1       	ldi	r24, 0x18	; 24
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	f8 94       	cli
    3ca6:	a8 95       	wdr
    3ca8:	80 93 60 00 	sts	0x0060, r24
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	90 93 60 00 	sts	0x0060, r25
    3cb2:	ff cf       	rjmp	.-2      	; 0x3cb2 <bootloader_jump+0x42>

00003cb4 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3cb4:	8d 3b       	cpi	r24, 0xBD	; 189
    3cb6:	50 f4       	brcc	.+20     	; 0x3ccc <keycode_to_action+0x18>
    3cb8:	88 3a       	cpi	r24, 0xA8	; 168
    3cba:	70 f5       	brcc	.+92     	; 0x3d18 <keycode_to_action+0x64>
    3cbc:	85 3a       	cpi	r24, 0xA5	; 165
    3cbe:	18 f5       	brcc	.+70     	; 0x3d06 <keycode_to_action+0x52>
    3cc0:	84 30       	cpi	r24, 0x04	; 4
    3cc2:	f8 f4       	brcc	.+62     	; 0x3d02 <keycode_to_action+0x4e>
    3cc4:	81 30       	cpi	r24, 0x01	; 1
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <keycode_to_action+0x16>
    3cc8:	6c c0       	rjmp	.+216    	; 0x3da2 <keycode_to_action+0xee>
    3cca:	68 c0       	rjmp	.+208    	; 0x3d9c <keycode_to_action+0xe8>
    3ccc:	88 3e       	cpi	r24, 0xE8	; 232
    3cce:	98 f4       	brcc	.+38     	; 0x3cf6 <keycode_to_action+0x42>
    3cd0:	80 3e       	cpi	r24, 0xE0	; 224
    3cd2:	b8 f4       	brcc	.+46     	; 0x3d02 <keycode_to_action+0x4e>
    3cd4:	8f 3b       	cpi	r24, 0xBF	; 191
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <keycode_to_action+0x26>
    3cd8:	61 c0       	rjmp	.+194    	; 0x3d9c <keycode_to_action+0xe8>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3cda:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <clear_keyboard>
    3cde:	2f ef       	ldi	r18, 0xFF	; 255
    3ce0:	80 e7       	ldi	r24, 0x70	; 112
    3ce2:	92 e0       	ldi	r25, 0x02	; 2
    3ce4:	21 50       	subi	r18, 0x01	; 1
    3ce6:	80 40       	sbci	r24, 0x00	; 0
    3ce8:	90 40       	sbci	r25, 0x00	; 0
    3cea:	e1 f7       	brne	.-8      	; 0x3ce4 <keycode_to_action+0x30>
    3cec:	00 c0       	rjmp	.+0      	; 0x3cee <keycode_to_action+0x3a>
    3cee:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3cf0:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <bootloader_jump>
    3cf4:	53 c0       	rjmp	.+166    	; 0x3d9c <keycode_to_action+0xe8>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3cf6:	80 3f       	cpi	r24, 0xF0	; 240
    3cf8:	08 f4       	brcc	.+2      	; 0x3cfc <keycode_to_action+0x48>
    3cfa:	50 c0       	rjmp	.+160    	; 0x3d9c <keycode_to_action+0xe8>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	90 65       	ori	r25, 0x50	; 80
            break;
    3d00:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3d02:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3d04:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3d06:	85 3a       	cpi	r24, 0xA5	; 165
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <keycode_to_action+0x58>
    3d0a:	4e c0       	rjmp	.+156    	; 0x3da8 <keycode_to_action+0xf4>
    3d0c:	86 3a       	cpi	r24, 0xA6	; 166
    3d0e:	09 f4       	brne	.+2      	; 0x3d12 <keycode_to_action+0x5e>
    3d10:	4e c0       	rjmp	.+156    	; 0x3dae <keycode_to_action+0xfa>
    3d12:	83 e8       	ldi	r24, 0x83	; 131
    3d14:	90 e4       	ldi	r25, 0x40	; 64
    3d16:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3d18:	88 3a       	cpi	r24, 0xA8	; 168
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <keycode_to_action+0x6a>
    3d1c:	4b c0       	rjmp	.+150    	; 0x3db4 <keycode_to_action+0x100>
    3d1e:	89 3a       	cpi	r24, 0xA9	; 169
    3d20:	09 f4       	brne	.+2      	; 0x3d24 <keycode_to_action+0x70>
    3d22:	4b c0       	rjmp	.+150    	; 0x3dba <keycode_to_action+0x106>
    3d24:	8a 3a       	cpi	r24, 0xAA	; 170
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <keycode_to_action+0x76>
    3d28:	4b c0       	rjmp	.+150    	; 0x3dc0 <keycode_to_action+0x10c>
    3d2a:	8b 3a       	cpi	r24, 0xAB	; 171
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <keycode_to_action+0x7c>
    3d2e:	4b c0       	rjmp	.+150    	; 0x3dc6 <keycode_to_action+0x112>
    3d30:	8c 3a       	cpi	r24, 0xAC	; 172
    3d32:	09 f4       	brne	.+2      	; 0x3d36 <keycode_to_action+0x82>
    3d34:	4b c0       	rjmp	.+150    	; 0x3dcc <keycode_to_action+0x118>
    3d36:	8d 3a       	cpi	r24, 0xAD	; 173
    3d38:	09 f4       	brne	.+2      	; 0x3d3c <keycode_to_action+0x88>
    3d3a:	4b c0       	rjmp	.+150    	; 0x3dd2 <keycode_to_action+0x11e>
    3d3c:	8e 3a       	cpi	r24, 0xAE	; 174
    3d3e:	09 f4       	brne	.+2      	; 0x3d42 <keycode_to_action+0x8e>
    3d40:	4b c0       	rjmp	.+150    	; 0x3dd8 <keycode_to_action+0x124>
    3d42:	8f 3a       	cpi	r24, 0xAF	; 175
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <keycode_to_action+0x94>
    3d46:	4b c0       	rjmp	.+150    	; 0x3dde <keycode_to_action+0x12a>
    3d48:	81 3b       	cpi	r24, 0xB1	; 177
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <keycode_to_action+0x9a>
    3d4c:	4b c0       	rjmp	.+150    	; 0x3de4 <keycode_to_action+0x130>
    3d4e:	80 3b       	cpi	r24, 0xB0	; 176
    3d50:	09 f4       	brne	.+2      	; 0x3d54 <keycode_to_action+0xa0>
    3d52:	4b c0       	rjmp	.+150    	; 0x3dea <keycode_to_action+0x136>
    3d54:	82 3b       	cpi	r24, 0xB2	; 178
    3d56:	09 f4       	brne	.+2      	; 0x3d5a <keycode_to_action+0xa6>
    3d58:	4b c0       	rjmp	.+150    	; 0x3df0 <keycode_to_action+0x13c>
    3d5a:	83 3b       	cpi	r24, 0xB3	; 179
    3d5c:	09 f4       	brne	.+2      	; 0x3d60 <keycode_to_action+0xac>
    3d5e:	4b c0       	rjmp	.+150    	; 0x3df6 <keycode_to_action+0x142>
    3d60:	84 3b       	cpi	r24, 0xB4	; 180
    3d62:	09 f4       	brne	.+2      	; 0x3d66 <keycode_to_action+0xb2>
    3d64:	4b c0       	rjmp	.+150    	; 0x3dfc <keycode_to_action+0x148>
    3d66:	85 3b       	cpi	r24, 0xB5	; 181
    3d68:	09 f4       	brne	.+2      	; 0x3d6c <keycode_to_action+0xb8>
    3d6a:	4b c0       	rjmp	.+150    	; 0x3e02 <keycode_to_action+0x14e>
    3d6c:	86 3b       	cpi	r24, 0xB6	; 182
    3d6e:	09 f4       	brne	.+2      	; 0x3d72 <keycode_to_action+0xbe>
    3d70:	4b c0       	rjmp	.+150    	; 0x3e08 <keycode_to_action+0x154>
    3d72:	87 3b       	cpi	r24, 0xB7	; 183
    3d74:	09 f4       	brne	.+2      	; 0x3d78 <keycode_to_action+0xc4>
    3d76:	4b c0       	rjmp	.+150    	; 0x3e0e <keycode_to_action+0x15a>
    3d78:	88 3b       	cpi	r24, 0xB8	; 184
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <keycode_to_action+0xca>
    3d7c:	4b c0       	rjmp	.+150    	; 0x3e14 <keycode_to_action+0x160>
    3d7e:	89 3b       	cpi	r24, 0xB9	; 185
    3d80:	09 f4       	brne	.+2      	; 0x3d84 <keycode_to_action+0xd0>
    3d82:	4b c0       	rjmp	.+150    	; 0x3e1a <keycode_to_action+0x166>
    3d84:	8a 3b       	cpi	r24, 0xBA	; 186
    3d86:	09 f4       	brne	.+2      	; 0x3d8a <keycode_to_action+0xd6>
    3d88:	4b c0       	rjmp	.+150    	; 0x3e20 <keycode_to_action+0x16c>
    3d8a:	8b 3b       	cpi	r24, 0xBB	; 187
    3d8c:	09 f4       	brne	.+2      	; 0x3d90 <keycode_to_action+0xdc>
    3d8e:	4b c0       	rjmp	.+150    	; 0x3e26 <keycode_to_action+0x172>
    3d90:	8c 3b       	cpi	r24, 0xBC	; 188
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <keycode_to_action+0xe2>
    3d94:	4b c0       	rjmp	.+150    	; 0x3e2c <keycode_to_action+0x178>
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	94 e4       	ldi	r25, 0x44	; 68
    3d9a:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
    3da0:	08 95       	ret
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3da8:	81 e8       	ldi	r24, 0x81	; 129
    3daa:	90 e4       	ldi	r25, 0x40	; 64
    3dac:	08 95       	ret
    3dae:	82 e8       	ldi	r24, 0x82	; 130
    3db0:	90 e4       	ldi	r25, 0x40	; 64
    3db2:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3db4:	82 ee       	ldi	r24, 0xE2	; 226
    3db6:	94 e4       	ldi	r25, 0x44	; 68
    3db8:	08 95       	ret
    3dba:	89 ee       	ldi	r24, 0xE9	; 233
    3dbc:	94 e4       	ldi	r25, 0x44	; 68
    3dbe:	08 95       	ret
    3dc0:	8a ee       	ldi	r24, 0xEA	; 234
    3dc2:	94 e4       	ldi	r25, 0x44	; 68
    3dc4:	08 95       	ret
    3dc6:	85 eb       	ldi	r24, 0xB5	; 181
    3dc8:	94 e4       	ldi	r25, 0x44	; 68
    3dca:	08 95       	ret
    3dcc:	86 eb       	ldi	r24, 0xB6	; 182
    3dce:	94 e4       	ldi	r25, 0x44	; 68
    3dd0:	08 95       	ret
    3dd2:	83 eb       	ldi	r24, 0xB3	; 179
    3dd4:	94 e4       	ldi	r25, 0x44	; 68
    3dd6:	08 95       	ret
    3dd8:	84 eb       	ldi	r24, 0xB4	; 180
    3dda:	94 e4       	ldi	r25, 0x44	; 68
    3ddc:	08 95       	ret
    3dde:	87 eb       	ldi	r24, 0xB7	; 183
    3de0:	94 e4       	ldi	r25, 0x44	; 68
    3de2:	08 95       	ret
    3de4:	8c ec       	ldi	r24, 0xCC	; 204
    3de6:	94 e4       	ldi	r25, 0x44	; 68
    3de8:	08 95       	ret
    3dea:	8d ec       	ldi	r24, 0xCD	; 205
    3dec:	94 e4       	ldi	r25, 0x44	; 68
    3dee:	08 95       	ret
    3df0:	83 e8       	ldi	r24, 0x83	; 131
    3df2:	95 e4       	ldi	r25, 0x45	; 69
    3df4:	08 95       	ret
    3df6:	8a e8       	ldi	r24, 0x8A	; 138
    3df8:	95 e4       	ldi	r25, 0x45	; 69
    3dfa:	08 95       	ret
    3dfc:	82 e9       	ldi	r24, 0x92	; 146
    3dfe:	95 e4       	ldi	r25, 0x45	; 69
    3e00:	08 95       	ret
    3e02:	84 e9       	ldi	r24, 0x94	; 148
    3e04:	95 e4       	ldi	r25, 0x45	; 69
    3e06:	08 95       	ret
    3e08:	81 e2       	ldi	r24, 0x21	; 33
    3e0a:	96 e4       	ldi	r25, 0x46	; 70
    3e0c:	08 95       	ret
    3e0e:	83 e2       	ldi	r24, 0x23	; 35
    3e10:	96 e4       	ldi	r25, 0x46	; 70
    3e12:	08 95       	ret
    3e14:	84 e2       	ldi	r24, 0x24	; 36
    3e16:	96 e4       	ldi	r25, 0x46	; 70
    3e18:	08 95       	ret
    3e1a:	85 e2       	ldi	r24, 0x25	; 37
    3e1c:	96 e4       	ldi	r25, 0x46	; 70
    3e1e:	08 95       	ret
    3e20:	86 e2       	ldi	r24, 0x26	; 38
    3e22:	96 e4       	ldi	r25, 0x46	; 70
    3e24:	08 95       	ret
    3e26:	87 e2       	ldi	r24, 0x27	; 39
    3e28:	96 e4       	ldi	r25, 0x46	; 70
    3e2a:	08 95       	ret
    3e2c:	8a e2       	ldi	r24, 0x2A	; 42
    3e2e:	96 e4       	ldi	r25, 0x46	; 70
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3e30:	08 95       	ret

00003e32 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3e32:	0e 94 55 07 	call	0xeaa	; 0xeaa <keymap_key_to_keycode>
    switch (keycode) {
    3e36:	80 3e       	cpi	r24, 0xE0	; 224
    3e38:	a8 f4       	brcc	.+42     	; 0x3e64 <action_for_key+0x32>
    3e3a:	80 3c       	cpi	r24, 0xC0	; 192
    3e3c:	00 f5       	brcc	.+64     	; 0x3e7e <action_for_key+0x4c>
    3e3e:	81 33       	cpi	r24, 0x31	; 49
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <action_for_key+0x12>
    3e42:	5c c0       	rjmp	.+184    	; 0x3efc <action_for_key+0xca>
    3e44:	38 f4       	brcc	.+14     	; 0x3e54 <action_for_key+0x22>
    3e46:	89 32       	cpi	r24, 0x29	; 41
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <action_for_key+0x1a>
    3e4a:	52 c0       	rjmp	.+164    	; 0x3ef0 <action_for_key+0xbe>
    3e4c:	8a 32       	cpi	r24, 0x2A	; 42
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <action_for_key+0x20>
    3e50:	5b c0       	rjmp	.+182    	; 0x3f08 <action_for_key+0xd6>
    3e52:	5f c0       	rjmp	.+190    	; 0x3f12 <action_for_key+0xe0>
    3e54:	89 33       	cpi	r24, 0x39	; 57
    3e56:	b1 f0       	breq	.+44     	; 0x3e84 <action_for_key+0x52>
    3e58:	82 38       	cpi	r24, 0x82	; 130
    3e5a:	a1 f0       	breq	.+40     	; 0x3e84 <action_for_key+0x52>
    3e5c:	85 33       	cpi	r24, 0x35	; 53
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <action_for_key+0x30>
    3e60:	41 c0       	rjmp	.+130    	; 0x3ee4 <action_for_key+0xb2>
    3e62:	57 c0       	rjmp	.+174    	; 0x3f12 <action_for_key+0xe0>
    3e64:	83 3e       	cpi	r24, 0xE3	; 227
    3e66:	41 f1       	breq	.+80     	; 0x3eb8 <action_for_key+0x86>
    3e68:	28 f4       	brcc	.+10     	; 0x3e74 <action_for_key+0x42>
    3e6a:	80 3e       	cpi	r24, 0xE0	; 224
    3e6c:	99 f0       	breq	.+38     	; 0x3e94 <action_for_key+0x62>
    3e6e:	82 3e       	cpi	r24, 0xE2	; 226
    3e70:	b9 f0       	breq	.+46     	; 0x3ea0 <action_for_key+0x6e>
    3e72:	4f c0       	rjmp	.+158    	; 0x3f12 <action_for_key+0xe0>
    3e74:	86 3e       	cpi	r24, 0xE6	; 230
    3e76:	31 f1       	breq	.+76     	; 0x3ec4 <action_for_key+0x92>
    3e78:	87 3e       	cpi	r24, 0xE7	; 231
    3e7a:	71 f1       	breq	.+92     	; 0x3ed8 <action_for_key+0xa6>
    3e7c:	4a c0       	rjmp	.+148    	; 0x3f12 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3e7e:	0e 94 65 07 	call	0xeca	; 0xeca <keymap_fn_to_action>
    3e82:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3e84:	90 91 eb 01 	lds	r25, 0x01EB
    3e88:	90 fd       	sbrc	r25, 0
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <action_for_key+0x5e>
    3e8c:	91 ff       	sbrs	r25, 1
    3e8e:	41 c0       	rjmp	.+130    	; 0x3f12 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3e90:	80 ee       	ldi	r24, 0xE0	; 224
    3e92:	3f c0       	rjmp	.+126    	; 0x3f12 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3e94:	80 91 eb 01 	lds	r24, 0x01EB
    3e98:	80 ff       	sbrs	r24, 0
    3e9a:	fa cf       	rjmp	.-12     	; 0x3e90 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3e9c:	89 e3       	ldi	r24, 0x39	; 57
    3e9e:	39 c0       	rjmp	.+114    	; 0x3f12 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3ea0:	80 91 eb 01 	lds	r24, 0x01EB
    3ea4:	82 ff       	sbrs	r24, 2
    3ea6:	0c c0       	rjmp	.+24     	; 0x3ec0 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3ea8:	80 91 eb 01 	lds	r24, 0x01EB
    3eac:	84 ff       	sbrs	r24, 4
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	2f c0       	rjmp	.+94     	; 0x3f12 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3eb4:	83 ee       	ldi	r24, 0xE3	; 227
    3eb6:	2d c0       	rjmp	.+90     	; 0x3f12 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3eb8:	80 91 eb 01 	lds	r24, 0x01EB
    3ebc:	82 ff       	sbrs	r24, 2
    3ebe:	f4 cf       	rjmp	.-24     	; 0x3ea8 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3ec0:	82 ee       	ldi	r24, 0xE2	; 226
    3ec2:	27 c0       	rjmp	.+78     	; 0x3f12 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3ec4:	80 91 eb 01 	lds	r24, 0x01EB
    3ec8:	83 ff       	sbrs	r24, 3
    3eca:	0a c0       	rjmp	.+20     	; 0x3ee0 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3ecc:	80 91 eb 01 	lds	r24, 0x01EB
    3ed0:	84 fd       	sbrc	r24, 4
    3ed2:	ee cf       	rjmp	.-36     	; 0x3eb0 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3ed4:	87 ee       	ldi	r24, 0xE7	; 231
    3ed6:	1d c0       	rjmp	.+58     	; 0x3f12 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3ed8:	80 91 eb 01 	lds	r24, 0x01EB
    3edc:	83 ff       	sbrs	r24, 3
    3ede:	f6 cf       	rjmp	.-20     	; 0x3ecc <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3ee0:	86 ee       	ldi	r24, 0xE6	; 230
    3ee2:	17 c0       	rjmp	.+46     	; 0x3f12 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3ee4:	80 91 eb 01 	lds	r24, 0x01EB
    3ee8:	85 ff       	sbrs	r24, 5
    3eea:	06 c0       	rjmp	.+12     	; 0x3ef8 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3eec:	89 e2       	ldi	r24, 0x29	; 41
    3eee:	11 c0       	rjmp	.+34     	; 0x3f12 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3ef0:	80 91 eb 01 	lds	r24, 0x01EB
    3ef4:	85 ff       	sbrs	r24, 5
    3ef6:	fa cf       	rjmp	.-12     	; 0x3eec <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3ef8:	85 e3       	ldi	r24, 0x35	; 53
    3efa:	0b c0       	rjmp	.+22     	; 0x3f12 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3efc:	80 91 eb 01 	lds	r24, 0x01EB
    3f00:	86 ff       	sbrs	r24, 6
    3f02:	06 c0       	rjmp	.+12     	; 0x3f10 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3f04:	8a e2       	ldi	r24, 0x2A	; 42
    3f06:	05 c0       	rjmp	.+10     	; 0x3f12 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3f08:	80 91 eb 01 	lds	r24, 0x01EB
    3f0c:	86 ff       	sbrs	r24, 6
    3f0e:	fa cf       	rjmp	.-12     	; 0x3f04 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3f10:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3f12:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <keycode_to_action>
    }
}
    3f16:	08 95       	ret

00003f18 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	08 95       	ret

00003f1e <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3f1e:	08 95       	ret

00003f20 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3f20:	af 92       	push	r10
    3f22:	bf 92       	push	r11
    3f24:	cf 92       	push	r12
    3f26:	df 92       	push	r13
    3f28:	ef 92       	push	r14
    3f2a:	ff 92       	push	r15
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f34:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3f36:	cc 24       	eor	r12, r12
    3f38:	c3 94       	inc	r12
    3f3a:	d1 2c       	mov	r13, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3f3c:	8c 2f       	mov	r24, r28
    3f3e:	0e 94 cf 08 	call	0x119e	; 0x119e <matrix_get_row>
    3f42:	5c 01       	movw	r10, r24
    3f44:	00 e0       	ldi	r16, 0x00	; 0
    3f46:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3f48:	c6 01       	movw	r24, r12
    3f4a:	00 2e       	mov	r0, r16
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <scan_key+0x32>
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	0a 94       	dec	r0
    3f54:	e2 f7       	brpl	.-8      	; 0x3f4e <scan_key+0x2e>
    3f56:	8a 21       	and	r24, r10
    3f58:	9b 21       	and	r25, r11
    3f5a:	89 2b       	or	r24, r25
    3f5c:	a9 f0       	breq	.+42     	; 0x3f88 <scan_key+0x68>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3f5e:	60 2f       	mov	r22, r16
    3f60:	7c 2f       	mov	r23, r28
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <action_for_key>
                if (action.code == code ||
    3f68:	8e 15       	cp	r24, r14
    3f6a:	9f 05       	cpc	r25, r15
    3f6c:	59 f0       	breq	.+22     	; 0x3f84 <scan_key+0x64>
    3f6e:	29 2f       	mov	r18, r25
    3f70:	20 7e       	andi	r18, 0xE0	; 224
    3f72:	39 2f       	mov	r19, r25
    3f74:	30 7c       	andi	r19, 0xC0	; 192
    3f76:	11 f0       	breq	.+4      	; 0x3f7c <scan_key+0x5c>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3f78:	20 3a       	cpi	r18, 0xA0	; 160
    3f7a:	31 f4       	brne	.+12     	; 0x3f88 <scan_key+0x68>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	e8 16       	cp	r14, r24
    3f80:	f9 06       	cpc	r15, r25
    3f82:	11 f4       	brne	.+4      	; 0x3f88 <scan_key+0x68>
                     action.key.code == code)) {
                    return true;
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	09 c0       	rjmp	.+18     	; 0x3f9a <scan_key+0x7a>
    3f88:	0f 5f       	subi	r16, 0xFF	; 255
    3f8a:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3f8c:	0f 30       	cpi	r16, 0x0F	; 15
    3f8e:	11 05       	cpc	r17, r1
    3f90:	d9 f6       	brne	.-74     	; 0x3f48 <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f92:	cf 5f       	subi	r28, 0xFF	; 255
    3f94:	c6 30       	cpi	r28, 0x06	; 6
    3f96:	91 f6       	brne	.-92     	; 0x3f3c <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3f98:	80 e0       	ldi	r24, 0x00	; 0
}
    3f9a:	cf 91       	pop	r28
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	ff 90       	pop	r15
    3fa2:	ef 90       	pop	r14
    3fa4:	df 90       	pop	r13
    3fa6:	cf 90       	pop	r12
    3fa8:	bf 90       	pop	r11
    3faa:	af 90       	pop	r10
    3fac:	08 95       	ret

00003fae <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3fb4:	8c e2       	ldi	r24, 0x2C	; 44
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <scan_key>
    3fbc:	88 23       	and	r24, r24
    3fbe:	29 f0       	breq	.+10     	; 0x3fca <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3fc0:	ce 01       	movw	r24, r28
}
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3fc6:	0c 94 90 1f 	jmp	0x3f20	; 0x3f20 <scan_key>
}
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	08 95       	ret

00003fd2 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3fd2:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3fd4:	0e 94 51 21 	call	0x42a2	; 0x42a2 <eeconfig_is_enabled>
    3fd8:	81 11       	cpse	r24, r1
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <bootmagic+0xe>
        eeconfig_init();
    3fdc:	0e 94 37 21 	call	0x426e	; 0x426e <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3fe0:	83 e1       	ldi	r24, 0x13	; 19
    3fe2:	95 e0       	ldi	r25, 0x05	; 5
    3fe4:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3fe8:	c5 e6       	ldi	r28, 0x65	; 101
    3fea:	c1 50       	subi	r28, 0x01	; 1
    3fec:	49 f0       	breq	.+18     	; 0x4000 <bootmagic+0x2e>
    3fee:	0e 94 96 07 	call	0xf2c	; 0xf2c <matrix_scan>
    3ff2:	8f e3       	ldi	r24, 0x3F	; 63
    3ff4:	9c e9       	ldi	r25, 0x9C	; 156
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	f1 f7       	brne	.-4      	; 0x3ff6 <bootmagic+0x24>
    3ffa:	00 c0       	rjmp	.+0      	; 0x3ffc <bootmagic+0x2a>
    3ffc:	00 00       	nop
    3ffe:	f5 cf       	rjmp	.-22     	; 0x3fea <bootmagic+0x18>
    print("done.\n");
    4000:	8c e0       	ldi	r24, 0x0C	; 12
    4002:	95 e0       	ldi	r25, 0x05	; 5
    4004:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    4008:	89 e2       	ldi	r24, 0x29	; 41
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4010:	81 11       	cpse	r24, r1
    4012:	2b c1       	rjmp	.+598    	; 0x426a <bootmagic+0x298>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4014:	8a e2       	ldi	r24, 0x2A	; 42
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    401c:	81 11       	cpse	r24, r1
        eeconfig_init();
    401e:	0e 94 37 21 	call	0x426e	; 0x426e <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    4022:	85 e0       	ldi	r24, 0x05	; 5
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    402a:	81 11       	cpse	r24, r1
        bootloader_jump();
    402c:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    4030:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4034:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <eeconfig_read_debug>
    4038:	80 93 cd 01 	sts	0x01CD, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    403c:	87 e0       	ldi	r24, 0x07	; 7
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4044:	88 23       	and	r24, r24
    4046:	c1 f1       	breq	.+112    	; 0x40b8 <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4048:	8b e1       	ldi	r24, 0x1B	; 27
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4050:	88 23       	and	r24, r24
    4052:	51 f0       	breq	.+20     	; 0x4068 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    4054:	80 91 cd 01 	lds	r24, 0x01CD
    4058:	81 fb       	bst	r24, 1
    405a:	22 27       	eor	r18, r18
    405c:	20 f9       	bld	r18, 0
    405e:	91 e0       	ldi	r25, 0x01	; 1
    4060:	92 27       	eor	r25, r18
    4062:	90 fb       	bst	r25, 0
    4064:	81 f9       	bld	r24, 1
    4066:	0f c0       	rjmp	.+30     	; 0x4086 <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4068:	8e e0       	ldi	r24, 0x0E	; 14
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4070:	88 23       	and	r24, r24
    4072:	61 f0       	breq	.+24     	; 0x408c <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    4074:	80 91 cd 01 	lds	r24, 0x01CD
    4078:	82 fb       	bst	r24, 2
    407a:	22 27       	eor	r18, r18
    407c:	20 f9       	bld	r18, 0
    407e:	91 e0       	ldi	r25, 0x01	; 1
    4080:	92 27       	eor	r25, r18
    4082:	90 fb       	bst	r25, 0
    4084:	82 f9       	bld	r24, 2
    4086:	80 93 cd 01 	sts	0x01CD, r24
    408a:	16 c0       	rjmp	.+44     	; 0x40b8 <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    408c:	80 e1       	ldi	r24, 0x10	; 16
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4094:	90 91 cd 01 	lds	r25, 0x01CD
    4098:	88 23       	and	r24, r24
    409a:	41 f0       	breq	.+16     	; 0x40ac <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    409c:	93 fb       	bst	r25, 3
    409e:	22 27       	eor	r18, r18
    40a0:	20 f9       	bld	r18, 0
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	82 27       	eor	r24, r18
    40a6:	80 fb       	bst	r24, 0
    40a8:	93 f9       	bld	r25, 3
    40aa:	04 c0       	rjmp	.+8      	; 0x40b4 <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    40ac:	89 2f       	mov	r24, r25
    40ae:	80 95       	com	r24
    40b0:	80 fb       	bst	r24, 0
    40b2:	90 f9       	bld	r25, 0
    40b4:	90 93 cd 01 	sts	0x01CD, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    40b8:	80 91 cd 01 	lds	r24, 0x01CD
    40bc:	0e 94 60 21 	call	0x42c0	; 0x42c0 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    40c0:	0e 94 6e 21 	call	0x42dc	; 0x42dc <eeconfig_read_keymap>
    40c4:	80 93 eb 01 	sts	0x01EB, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    40c8:	80 ee       	ldi	r24, 0xE0	; 224
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    40d0:	88 23       	and	r24, r24
    40d2:	41 f0       	breq	.+16     	; 0x40e4 <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    40d4:	80 91 eb 01 	lds	r24, 0x01EB
    40d8:	98 2f       	mov	r25, r24
    40da:	90 95       	com	r25
    40dc:	90 fb       	bst	r25, 0
    40de:	80 f9       	bld	r24, 0
    40e0:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    40e4:	89 e3       	ldi	r24, 0x39	; 57
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    40ec:	88 23       	and	r24, r24
    40ee:	59 f0       	breq	.+22     	; 0x4106 <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    40f0:	80 91 eb 01 	lds	r24, 0x01EB
    40f4:	81 fb       	bst	r24, 1
    40f6:	22 27       	eor	r18, r18
    40f8:	20 f9       	bld	r18, 0
    40fa:	91 e0       	ldi	r25, 0x01	; 1
    40fc:	92 27       	eor	r25, r18
    40fe:	90 fb       	bst	r25, 0
    4100:	81 f9       	bld	r24, 1
    4102:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4106:	82 ee       	ldi	r24, 0xE2	; 226
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    410e:	88 23       	and	r24, r24
    4110:	59 f0       	breq	.+22     	; 0x4128 <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4112:	80 91 eb 01 	lds	r24, 0x01EB
    4116:	82 fb       	bst	r24, 2
    4118:	22 27       	eor	r18, r18
    411a:	20 f9       	bld	r18, 0
    411c:	91 e0       	ldi	r25, 0x01	; 1
    411e:	92 27       	eor	r25, r18
    4120:	90 fb       	bst	r25, 0
    4122:	82 f9       	bld	r24, 2
    4124:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4128:	86 ee       	ldi	r24, 0xE6	; 230
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4130:	88 23       	and	r24, r24
    4132:	59 f0       	breq	.+22     	; 0x414a <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4134:	80 91 eb 01 	lds	r24, 0x01EB
    4138:	83 fb       	bst	r24, 3
    413a:	22 27       	eor	r18, r18
    413c:	20 f9       	bld	r18, 0
    413e:	91 e0       	ldi	r25, 0x01	; 1
    4140:	92 27       	eor	r25, r18
    4142:	90 fb       	bst	r25, 0
    4144:	83 f9       	bld	r24, 3
    4146:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    414a:	83 ee       	ldi	r24, 0xE3	; 227
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4152:	88 23       	and	r24, r24
    4154:	59 f0       	breq	.+22     	; 0x416c <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    4156:	80 91 eb 01 	lds	r24, 0x01EB
    415a:	84 fb       	bst	r24, 4
    415c:	22 27       	eor	r18, r18
    415e:	20 f9       	bld	r18, 0
    4160:	91 e0       	ldi	r25, 0x01	; 1
    4162:	92 27       	eor	r25, r18
    4164:	90 fb       	bst	r25, 0
    4166:	84 f9       	bld	r24, 4
    4168:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    416c:	85 e3       	ldi	r24, 0x35	; 53
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4174:	88 23       	and	r24, r24
    4176:	59 f0       	breq	.+22     	; 0x418e <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4178:	80 91 eb 01 	lds	r24, 0x01EB
    417c:	85 fb       	bst	r24, 5
    417e:	22 27       	eor	r18, r18
    4180:	20 f9       	bld	r18, 0
    4182:	91 e0       	ldi	r25, 0x01	; 1
    4184:	92 27       	eor	r25, r18
    4186:	90 fb       	bst	r25, 0
    4188:	85 f9       	bld	r24, 5
    418a:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    418e:	81 e3       	ldi	r24, 0x31	; 49
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4196:	88 23       	and	r24, r24
    4198:	59 f0       	breq	.+22     	; 0x41b0 <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    419a:	80 91 eb 01 	lds	r24, 0x01EB
    419e:	86 fb       	bst	r24, 6
    41a0:	22 27       	eor	r18, r18
    41a2:	20 f9       	bld	r18, 0
    41a4:	91 e0       	ldi	r25, 0x01	; 1
    41a6:	92 27       	eor	r25, r18
    41a8:	90 fb       	bst	r25, 0
    41aa:	86 f9       	bld	r24, 6
    41ac:	80 93 eb 01 	sts	0x01EB, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    41b0:	81 e1       	ldi	r24, 0x11	; 17
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    41b8:	88 23       	and	r24, r24
    41ba:	59 f0       	breq	.+22     	; 0x41d2 <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    41bc:	80 91 eb 01 	lds	r24, 0x01EB
    41c0:	87 fb       	bst	r24, 7
    41c2:	22 27       	eor	r18, r18
    41c4:	20 f9       	bld	r18, 0
    41c6:	91 e0       	ldi	r25, 0x01	; 1
    41c8:	92 27       	eor	r25, r18
    41ca:	90 fb       	bst	r25, 0
    41cc:	87 f9       	bld	r24, 7
    41ce:	80 93 eb 01 	sts	0x01EB, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    41d2:	80 91 eb 01 	lds	r24, 0x01EB
    41d6:	0e 94 72 21 	call	0x42e4	; 0x42e4 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    41da:	80 91 eb 01 	lds	r24, 0x01EB
    41de:	87 fb       	bst	r24, 7
    41e0:	88 27       	eor	r24, r24
    41e2:	80 f9       	bld	r24, 0
    41e4:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    41e8:	87 e2       	ldi	r24, 0x27	; 39
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    41f0:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    41f2:	8e e1       	ldi	r24, 0x1E	; 30
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    41fa:	81 11       	cpse	r24, r1
    41fc:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    41fe:	8f e1       	ldi	r24, 0x1F	; 31
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4206:	81 11       	cpse	r24, r1
    4208:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    420a:	80 e2       	ldi	r24, 0x20	; 32
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4212:	81 11       	cpse	r24, r1
    4214:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4216:	81 e2       	ldi	r24, 0x21	; 33
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    421e:	81 11       	cpse	r24, r1
    4220:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4222:	82 e2       	ldi	r24, 0x22	; 34
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    422a:	81 11       	cpse	r24, r1
    422c:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    422e:	83 e2       	ldi	r24, 0x23	; 35
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4236:	81 11       	cpse	r24, r1
    4238:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    423a:	84 e2       	ldi	r24, 0x24	; 36
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <bootmagic_scan_key>
    4242:	88 23       	and	r24, r24
    4244:	11 f0       	breq	.+4      	; 0x424a <bootmagic+0x278>
    4246:	c0 68       	ori	r28, 0x80	; 128
    4248:	02 c0       	rjmp	.+4      	; 0x424e <bootmagic+0x27c>
    if (default_layer) {
    424a:	cc 23       	and	r28, r28
    424c:	29 f0       	breq	.+10     	; 0x4258 <bootmagic+0x286>
        eeconfig_write_default_layer(default_layer);
    424e:	8c 2f       	mov	r24, r28
    4250:	0e 94 69 21 	call	0x42d2	; 0x42d2 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4254:	6c 2f       	mov	r22, r28
    4256:	03 c0       	rjmp	.+6      	; 0x425e <bootmagic+0x28c>
    } else {
        default_layer = eeconfig_read_default_layer();
    4258:	0e 94 65 21 	call	0x42ca	; 0x42ca <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    425c:	68 2f       	mov	r22, r24
    425e:	70 e0       	ldi	r23, 0x00	; 0
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4264:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4266:	0c 94 df 1a 	jmp	0x35be	; 0x35be <default_layer_set>
    }
}
    426a:	cf 91       	pop	r28
    426c:	08 95       	ret

0000426e <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    426e:	6d ee       	ldi	r22, 0xED	; 237
    4270:	7e ef       	ldi	r23, 0xFE	; 254
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 cf 2a 	call	0x559e	; 0x559e <eeprom_write_word>
    427a:	60 e0       	ldi	r22, 0x00	; 0
    427c:	82 e0       	ldi	r24, 0x02	; 2
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_write_byte>
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	83 e0       	ldi	r24, 0x03	; 3
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_write_byte>
    428e:	60 e0       	ldi	r22, 0x00	; 0
    4290:	84 e0       	ldi	r24, 0x04	; 4
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_write_byte>
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	85 e0       	ldi	r24, 0x05	; 5
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0c 94 c1 2a 	jmp	0x5582	; 0x5582 <eeprom_write_byte>

000042a2 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 bb 2a 	call	0x5576	; 0x5576 <eeprom_read_word>
    42aa:	21 e0       	ldi	r18, 0x01	; 1
    42ac:	8d 3e       	cpi	r24, 0xED	; 237
    42ae:	9e 4f       	sbci	r25, 0xFE	; 254
    42b0:	09 f0       	breq	.+2      	; 0x42b4 <eeconfig_is_enabled+0x12>
    42b2:	20 e0       	ldi	r18, 0x00	; 0
}
    42b4:	82 2f       	mov	r24, r18
    42b6:	08 95       	ret

000042b8 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    42b8:	82 e0       	ldi	r24, 0x02	; 2
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0c 94 b3 2a 	jmp	0x5566	; 0x5566 <eeprom_read_byte>

000042c0 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    42c0:	68 2f       	mov	r22, r24
    42c2:	82 e0       	ldi	r24, 0x02	; 2
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	0c 94 c1 2a 	jmp	0x5582	; 0x5582 <eeprom_write_byte>

000042ca <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    42ca:	83 e0       	ldi	r24, 0x03	; 3
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	0c 94 b3 2a 	jmp	0x5566	; 0x5566 <eeprom_read_byte>

000042d2 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    42d2:	68 2f       	mov	r22, r24
    42d4:	83 e0       	ldi	r24, 0x03	; 3
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0c 94 c1 2a 	jmp	0x5582	; 0x5582 <eeprom_write_byte>

000042dc <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    42dc:	84 e0       	ldi	r24, 0x04	; 4
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	0c 94 b3 2a 	jmp	0x5566	; 0x5566 <eeprom_read_byte>

000042e4 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    42e4:	68 2f       	mov	r22, r24
    42e6:	84 e0       	ldi	r24, 0x04	; 4
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0c 94 c1 2a 	jmp	0x5582	; 0x5582 <eeprom_write_byte>

000042ee <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    42ee:	80 91 d5 01 	lds	r24, 0x01D5
    42f2:	80 ff       	sbrs	r24, 0
    42f4:	0b c0       	rjmp	.+22     	; 0x430c <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    42f6:	60 91 12 01 	lds	r22, 0x0112
    42fa:	85 e0       	ldi	r24, 0x05	; 5
    42fc:	68 9f       	mul	r22, r24
    42fe:	b0 01       	movw	r22, r0
    4300:	11 24       	eor	r1, r1
    4302:	75 95       	asr	r23
    4304:	67 95       	ror	r22
    4306:	75 95       	asr	r23
    4308:	67 95       	ror	r22
    430a:	2b c0       	rjmp	.+86     	; 0x4362 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    430c:	81 ff       	sbrs	r24, 1
    430e:	09 c0       	rjmp	.+18     	; 0x4322 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4310:	60 91 12 01 	lds	r22, 0x0112
    4314:	85 e0       	ldi	r24, 0x05	; 5
    4316:	68 9f       	mul	r22, r24
    4318:	b0 01       	movw	r22, r0
    431a:	11 24       	eor	r1, r1
    431c:	75 95       	asr	r23
    431e:	67 95       	ror	r22
    4320:	20 c0       	rjmp	.+64     	; 0x4362 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    4322:	82 ff       	sbrs	r24, 2
    4324:	07 c0       	rjmp	.+14     	; 0x4334 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4326:	60 91 12 01 	lds	r22, 0x0112
    432a:	85 e0       	ldi	r24, 0x05	; 5
    432c:	68 9f       	mul	r22, r24
    432e:	b0 01       	movw	r22, r0
    4330:	11 24       	eor	r1, r1
    4332:	17 c0       	rjmp	.+46     	; 0x4362 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    4334:	90 91 d6 01 	lds	r25, 0x01D6
    4338:	99 23       	and	r25, r25
    433a:	d1 f0       	breq	.+52     	; 0x4370 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    433c:	60 91 11 01 	lds	r22, 0x0111
    4340:	96 17       	cp	r25, r22
    4342:	88 f7       	brcc	.-30     	; 0x4326 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4344:	20 91 12 01 	lds	r18, 0x0112
    4348:	85 e0       	ldi	r24, 0x05	; 5
    434a:	28 9f       	mul	r18, r24
    434c:	90 01       	movw	r18, r0
    434e:	11 24       	eor	r1, r1
    4350:	92 9f       	mul	r25, r18
    4352:	a0 01       	movw	r20, r0
    4354:	93 9f       	mul	r25, r19
    4356:	50 0d       	add	r21, r0
    4358:	11 24       	eor	r1, r1
    435a:	70 e0       	ldi	r23, 0x00	; 0
    435c:	ca 01       	movw	r24, r20
    435e:	0e 94 85 2a 	call	0x550a	; 0x550a <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4362:	60 38       	cpi	r22, 0x80	; 128
    4364:	71 05       	cpc	r23, r1
    4366:	40 f4       	brcc	.+16     	; 0x4378 <move_unit+0x8a>
    4368:	61 15       	cp	r22, r1
    436a:	71 05       	cpc	r23, r1
    436c:	19 f4       	brne	.+6      	; 0x4374 <move_unit+0x86>
    436e:	06 c0       	rjmp	.+12     	; 0x437c <move_unit+0x8e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4370:	65 e0       	ldi	r22, 0x05	; 5
    4372:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4374:	86 2f       	mov	r24, r22
    4376:	08 95       	ret
    4378:	8f e7       	ldi	r24, 0x7F	; 127
    437a:	08 95       	ret
    437c:	81 e0       	ldi	r24, 0x01	; 1
}
    437e:	08 95       	ret

00004380 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4380:	80 91 d5 01 	lds	r24, 0x01D5
    4384:	80 ff       	sbrs	r24, 0
    4386:	08 c0       	rjmp	.+16     	; 0x4398 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4388:	60 91 10 01 	lds	r22, 0x0110
    438c:	70 e0       	ldi	r23, 0x00	; 0
    438e:	75 95       	asr	r23
    4390:	67 95       	ror	r22
    4392:	75 95       	asr	r23
    4394:	67 95       	ror	r22
    4396:	21 c0       	rjmp	.+66     	; 0x43da <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4398:	81 ff       	sbrs	r24, 1
    439a:	06 c0       	rjmp	.+12     	; 0x43a8 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    439c:	60 91 10 01 	lds	r22, 0x0110
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	75 95       	asr	r23
    43a4:	67 95       	ror	r22
    43a6:	19 c0       	rjmp	.+50     	; 0x43da <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    43a8:	82 ff       	sbrs	r24, 2
    43aa:	04 c0       	rjmp	.+8      	; 0x43b4 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    43ac:	60 91 10 01 	lds	r22, 0x0110
    43b0:	70 e0       	ldi	r23, 0x00	; 0
    43b2:	10 c0       	rjmp	.+32     	; 0x43d4 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    43b4:	90 91 d6 01 	lds	r25, 0x01D6
    43b8:	99 23       	and	r25, r25
    43ba:	99 f0       	breq	.+38     	; 0x43e2 <wheel_unit+0x62>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    43bc:	60 91 0f 01 	lds	r22, 0x010F
    43c0:	96 17       	cp	r25, r22
    43c2:	a0 f7       	brcc	.-24     	; 0x43ac <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    43c4:	80 91 10 01 	lds	r24, 0x0110
    43c8:	89 9f       	mul	r24, r25
    43ca:	c0 01       	movw	r24, r0
    43cc:	11 24       	eor	r1, r1
    43ce:	70 e0       	ldi	r23, 0x00	; 0
    43d0:	0e 94 85 2a 	call	0x550a	; 0x550a <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    43d4:	60 38       	cpi	r22, 0x80	; 128
    43d6:	71 05       	cpc	r23, r1
    43d8:	40 f4       	brcc	.+16     	; 0x43ea <wheel_unit+0x6a>
    43da:	61 15       	cp	r22, r1
    43dc:	71 05       	cpc	r23, r1
    43de:	19 f4       	brne	.+6      	; 0x43e6 <wheel_unit+0x66>
    43e0:	06 c0       	rjmp	.+12     	; 0x43ee <wheel_unit+0x6e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    43e2:	61 e0       	ldi	r22, 0x01	; 1
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    43e6:	86 2f       	mov	r24, r22
    43e8:	08 95       	ret
    43ea:	8f e7       	ldi	r24, 0x7F	; 127
    43ec:	08 95       	ret
    43ee:	81 e0       	ldi	r24, 0x01	; 1
}
    43f0:	08 95       	ret

000043f2 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    43f2:	80 3f       	cpi	r24, 0xF0	; 240
    43f4:	21 f4       	brne	.+8      	; 0x43fe <mousekey_on+0xc>
    43f6:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    43fa:	81 95       	neg	r24
    43fc:	04 c0       	rjmp	.+8      	; 0x4406 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    43fe:	81 3f       	cpi	r24, 0xF1	; 241
    4400:	29 f4       	brne	.+10     	; 0x440c <mousekey_on+0x1a>
    4402:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    4406:	80 93 d9 01 	sts	0x01D9, r24
    440a:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    440c:	82 3f       	cpi	r24, 0xF2	; 242
    440e:	21 f4       	brne	.+8      	; 0x4418 <mousekey_on+0x26>
    4410:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    4414:	81 95       	neg	r24
    4416:	04 c0       	rjmp	.+8      	; 0x4420 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4418:	83 3f       	cpi	r24, 0xF3	; 243
    441a:	29 f4       	brne	.+10     	; 0x4426 <mousekey_on+0x34>
    441c:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    4420:	80 93 d8 01 	sts	0x01D8, r24
    4424:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4426:	89 3f       	cpi	r24, 0xF9	; 249
    4428:	19 f4       	brne	.+6      	; 0x4430 <mousekey_on+0x3e>
    442a:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    442e:	05 c0       	rjmp	.+10     	; 0x443a <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4430:	8a 3f       	cpi	r24, 0xFA	; 250
    4432:	31 f4       	brne	.+12     	; 0x4440 <mousekey_on+0x4e>
    4434:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    4438:	81 95       	neg	r24
    443a:	80 93 da 01 	sts	0x01DA, r24
    443e:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4440:	8b 3f       	cpi	r24, 0xFB	; 251
    4442:	21 f4       	brne	.+8      	; 0x444c <mousekey_on+0x5a>
    4444:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    4448:	81 95       	neg	r24
    444a:	04 c0       	rjmp	.+8      	; 0x4454 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    444c:	8c 3f       	cpi	r24, 0xFC	; 252
    444e:	29 f4       	brne	.+10     	; 0x445a <mousekey_on+0x68>
    4450:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    4454:	80 93 db 01 	sts	0x01DB, r24
    4458:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    445a:	84 3f       	cpi	r24, 0xF4	; 244
    445c:	21 f4       	brne	.+8      	; 0x4466 <mousekey_on+0x74>
    445e:	80 91 d7 01 	lds	r24, 0x01D7
    4462:	81 60       	ori	r24, 0x01	; 1
    4464:	17 c0       	rjmp	.+46     	; 0x4494 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4466:	85 3f       	cpi	r24, 0xF5	; 245
    4468:	21 f4       	brne	.+8      	; 0x4472 <mousekey_on+0x80>
    446a:	80 91 d7 01 	lds	r24, 0x01D7
    446e:	82 60       	ori	r24, 0x02	; 2
    4470:	11 c0       	rjmp	.+34     	; 0x4494 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4472:	86 3f       	cpi	r24, 0xF6	; 246
    4474:	21 f4       	brne	.+8      	; 0x447e <mousekey_on+0x8c>
    4476:	80 91 d7 01 	lds	r24, 0x01D7
    447a:	84 60       	ori	r24, 0x04	; 4
    447c:	0b c0       	rjmp	.+22     	; 0x4494 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    447e:	87 3f       	cpi	r24, 0xF7	; 247
    4480:	21 f4       	brne	.+8      	; 0x448a <mousekey_on+0x98>
    4482:	80 91 d7 01 	lds	r24, 0x01D7
    4486:	88 60       	ori	r24, 0x08	; 8
    4488:	05 c0       	rjmp	.+10     	; 0x4494 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    448a:	88 3f       	cpi	r24, 0xF8	; 248
    448c:	31 f4       	brne	.+12     	; 0x449a <mousekey_on+0xa8>
    448e:	80 91 d7 01 	lds	r24, 0x01D7
    4492:	80 61       	ori	r24, 0x10	; 16
    4494:	80 93 d7 01 	sts	0x01D7, r24
    4498:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    449a:	8d 3f       	cpi	r24, 0xFD	; 253
    449c:	21 f4       	brne	.+8      	; 0x44a6 <mousekey_on+0xb4>
    449e:	80 91 d5 01 	lds	r24, 0x01D5
    44a2:	81 60       	ori	r24, 0x01	; 1
    44a4:	0b c0       	rjmp	.+22     	; 0x44bc <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    44a6:	8e 3f       	cpi	r24, 0xFE	; 254
    44a8:	21 f4       	brne	.+8      	; 0x44b2 <mousekey_on+0xc0>
    44aa:	80 91 d5 01 	lds	r24, 0x01D5
    44ae:	82 60       	ori	r24, 0x02	; 2
    44b0:	05 c0       	rjmp	.+10     	; 0x44bc <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    44b2:	8f 3f       	cpi	r24, 0xFF	; 255
    44b4:	29 f4       	brne	.+10     	; 0x44c0 <mousekey_on+0xce>
    44b6:	80 91 d5 01 	lds	r24, 0x01D5
    44ba:	84 60       	ori	r24, 0x04	; 4
    44bc:	80 93 d5 01 	sts	0x01D5, r24
    44c0:	08 95       	ret

000044c2 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    44c2:	80 3f       	cpi	r24, 0xF0	; 240
    44c4:	39 f4       	brne	.+14     	; 0x44d4 <mousekey_off+0x12>
    44c6:	80 91 d9 01 	lds	r24, 0x01D9
    44ca:	87 ff       	sbrs	r24, 7
    44cc:	6c c0       	rjmp	.+216    	; 0x45a6 <mousekey_off+0xe4>
    44ce:	10 92 d9 01 	sts	0x01D9, r1
    44d2:	69 c0       	rjmp	.+210    	; 0x45a6 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    44d4:	81 3f       	cpi	r24, 0xF1	; 241
    44d6:	29 f4       	brne	.+10     	; 0x44e2 <mousekey_off+0x20>
    44d8:	80 91 d9 01 	lds	r24, 0x01D9
    44dc:	18 16       	cp	r1, r24
    44de:	bc f3       	brlt	.-18     	; 0x44ce <mousekey_off+0xc>
    44e0:	62 c0       	rjmp	.+196    	; 0x45a6 <mousekey_off+0xe4>
    44e2:	90 91 d8 01 	lds	r25, 0x01D8
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    44e6:	82 3f       	cpi	r24, 0xF2	; 242
    44e8:	29 f4       	brne	.+10     	; 0x44f4 <mousekey_off+0x32>
    44ea:	97 ff       	sbrs	r25, 7
    44ec:	5c c0       	rjmp	.+184    	; 0x45a6 <mousekey_off+0xe4>
    44ee:	10 92 d8 01 	sts	0x01D8, r1
    44f2:	59 c0       	rjmp	.+178    	; 0x45a6 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    44f4:	83 3f       	cpi	r24, 0xF3	; 243
    44f6:	19 f4       	brne	.+6      	; 0x44fe <mousekey_off+0x3c>
    44f8:	19 16       	cp	r1, r25
    44fa:	cc f3       	brlt	.-14     	; 0x44ee <mousekey_off+0x2c>
    44fc:	54 c0       	rjmp	.+168    	; 0x45a6 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    44fe:	89 3f       	cpi	r24, 0xF9	; 249
    4500:	41 f4       	brne	.+16     	; 0x4512 <mousekey_off+0x50>
    4502:	80 91 da 01 	lds	r24, 0x01DA
    4506:	18 16       	cp	r1, r24
    4508:	0c f0       	brlt	.+2      	; 0x450c <mousekey_off+0x4a>
    450a:	4d c0       	rjmp	.+154    	; 0x45a6 <mousekey_off+0xe4>
    450c:	10 92 da 01 	sts	0x01DA, r1
    4510:	4a c0       	rjmp	.+148    	; 0x45a6 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4512:	8a 3f       	cpi	r24, 0xFA	; 250
    4514:	29 f4       	brne	.+10     	; 0x4520 <mousekey_off+0x5e>
    4516:	80 91 da 01 	lds	r24, 0x01DA
    451a:	87 ff       	sbrs	r24, 7
    451c:	44 c0       	rjmp	.+136    	; 0x45a6 <mousekey_off+0xe4>
    451e:	f6 cf       	rjmp	.-20     	; 0x450c <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4520:	8b 3f       	cpi	r24, 0xFB	; 251
    4522:	39 f4       	brne	.+14     	; 0x4532 <mousekey_off+0x70>
    4524:	80 91 db 01 	lds	r24, 0x01DB
    4528:	87 ff       	sbrs	r24, 7
    452a:	3d c0       	rjmp	.+122    	; 0x45a6 <mousekey_off+0xe4>
    452c:	10 92 db 01 	sts	0x01DB, r1
    4530:	3a c0       	rjmp	.+116    	; 0x45a6 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4532:	8c 3f       	cpi	r24, 0xFC	; 252
    4534:	29 f4       	brne	.+10     	; 0x4540 <mousekey_off+0x7e>
    4536:	80 91 db 01 	lds	r24, 0x01DB
    453a:	18 16       	cp	r1, r24
    453c:	bc f3       	brlt	.-18     	; 0x452c <mousekey_off+0x6a>
    453e:	33 c0       	rjmp	.+102    	; 0x45a6 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4540:	84 3f       	cpi	r24, 0xF4	; 244
    4542:	21 f4       	brne	.+8      	; 0x454c <mousekey_off+0x8a>
    4544:	80 91 d7 01 	lds	r24, 0x01D7
    4548:	8e 7f       	andi	r24, 0xFE	; 254
    454a:	17 c0       	rjmp	.+46     	; 0x457a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    454c:	85 3f       	cpi	r24, 0xF5	; 245
    454e:	21 f4       	brne	.+8      	; 0x4558 <mousekey_off+0x96>
    4550:	80 91 d7 01 	lds	r24, 0x01D7
    4554:	8d 7f       	andi	r24, 0xFD	; 253
    4556:	11 c0       	rjmp	.+34     	; 0x457a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4558:	86 3f       	cpi	r24, 0xF6	; 246
    455a:	21 f4       	brne	.+8      	; 0x4564 <mousekey_off+0xa2>
    455c:	80 91 d7 01 	lds	r24, 0x01D7
    4560:	8b 7f       	andi	r24, 0xFB	; 251
    4562:	0b c0       	rjmp	.+22     	; 0x457a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4564:	87 3f       	cpi	r24, 0xF7	; 247
    4566:	21 f4       	brne	.+8      	; 0x4570 <mousekey_off+0xae>
    4568:	80 91 d7 01 	lds	r24, 0x01D7
    456c:	87 7f       	andi	r24, 0xF7	; 247
    456e:	05 c0       	rjmp	.+10     	; 0x457a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4570:	88 3f       	cpi	r24, 0xF8	; 248
    4572:	31 f4       	brne	.+12     	; 0x4580 <mousekey_off+0xbe>
    4574:	80 91 d7 01 	lds	r24, 0x01D7
    4578:	8f 7e       	andi	r24, 0xEF	; 239
    457a:	80 93 d7 01 	sts	0x01D7, r24
    457e:	13 c0       	rjmp	.+38     	; 0x45a6 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4580:	8d 3f       	cpi	r24, 0xFD	; 253
    4582:	21 f4       	brne	.+8      	; 0x458c <mousekey_off+0xca>
    4584:	80 91 d5 01 	lds	r24, 0x01D5
    4588:	8e 7f       	andi	r24, 0xFE	; 254
    458a:	0b c0       	rjmp	.+22     	; 0x45a2 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    458c:	8e 3f       	cpi	r24, 0xFE	; 254
    458e:	21 f4       	brne	.+8      	; 0x4598 <mousekey_off+0xd6>
    4590:	80 91 d5 01 	lds	r24, 0x01D5
    4594:	8d 7f       	andi	r24, 0xFD	; 253
    4596:	05 c0       	rjmp	.+10     	; 0x45a2 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4598:	8f 3f       	cpi	r24, 0xFF	; 255
    459a:	29 f4       	brne	.+10     	; 0x45a6 <mousekey_off+0xe4>
    459c:	80 91 d5 01 	lds	r24, 0x01D5
    45a0:	8b 7f       	andi	r24, 0xFB	; 251
    45a2:	80 93 d5 01 	sts	0x01D5, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    45a6:	80 91 d8 01 	lds	r24, 0x01D8
    45aa:	81 11       	cpse	r24, r1
    45ac:	0e c0       	rjmp	.+28     	; 0x45ca <mousekey_off+0x108>
    45ae:	80 91 d9 01 	lds	r24, 0x01D9
    45b2:	81 11       	cpse	r24, r1
    45b4:	0a c0       	rjmp	.+20     	; 0x45ca <mousekey_off+0x108>
    45b6:	80 91 da 01 	lds	r24, 0x01DA
    45ba:	81 11       	cpse	r24, r1
    45bc:	06 c0       	rjmp	.+12     	; 0x45ca <mousekey_off+0x108>
    45be:	80 91 db 01 	lds	r24, 0x01DB
    45c2:	81 11       	cpse	r24, r1
    45c4:	02 c0       	rjmp	.+4      	; 0x45ca <mousekey_off+0x108>
        mousekey_repeat = 0;
    45c6:	10 92 d6 01 	sts	0x01D6, r1
    45ca:	08 95       	ret

000045cc <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    45cc:	80 91 cd 01 	lds	r24, 0x01CD
    45d0:	83 ff       	sbrs	r24, 3
    45d2:	7e c0       	rjmp	.+252    	; 0x46d0 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    45d4:	8f e4       	ldi	r24, 0x4F	; 79
    45d6:	95 e0       	ldi	r25, 0x05	; 5
    45d8:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    phex(mouse_report.buttons); print("|");
    45dc:	80 91 d7 01 	lds	r24, 0x01D7
    45e0:	1f 92       	push	r1
    45e2:	8f 93       	push	r24
    45e4:	8a e4       	ldi	r24, 0x4A	; 74
    45e6:	95 e0       	ldi	r25, 0x05	; 5
    45e8:	9f 93       	push	r25
    45ea:	8f 93       	push	r24
    45ec:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    45f0:	88 e4       	ldi	r24, 0x48	; 72
    45f2:	95 e0       	ldi	r25, 0x05	; 5
    45f4:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print_decs(mouse_report.x); print(" ");
    45f8:	80 91 d8 01 	lds	r24, 0x01D8
    45fc:	28 2f       	mov	r18, r24
    45fe:	08 2e       	mov	r0, r24
    4600:	00 0c       	add	r0, r0
    4602:	33 0b       	sbc	r19, r19
    4604:	3f 93       	push	r19
    4606:	8f 93       	push	r24
    4608:	85 e4       	ldi	r24, 0x45	; 69
    460a:	95 e0       	ldi	r25, 0x05	; 5
    460c:	9f 93       	push	r25
    460e:	8f 93       	push	r24
    4610:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4614:	83 e4       	ldi	r24, 0x43	; 67
    4616:	95 e0       	ldi	r25, 0x05	; 5
    4618:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print_decs(mouse_report.y); print(" ");
    461c:	80 91 d9 01 	lds	r24, 0x01D9
    4620:	28 2f       	mov	r18, r24
    4622:	08 2e       	mov	r0, r24
    4624:	00 0c       	add	r0, r0
    4626:	33 0b       	sbc	r19, r19
    4628:	3f 93       	push	r19
    462a:	8f 93       	push	r24
    462c:	80 e4       	ldi	r24, 0x40	; 64
    462e:	95 e0       	ldi	r25, 0x05	; 5
    4630:	9f 93       	push	r25
    4632:	8f 93       	push	r24
    4634:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4638:	8e e3       	ldi	r24, 0x3E	; 62
    463a:	95 e0       	ldi	r25, 0x05	; 5
    463c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print_decs(mouse_report.v); print(" ");
    4640:	80 91 da 01 	lds	r24, 0x01DA
    4644:	28 2f       	mov	r18, r24
    4646:	08 2e       	mov	r0, r24
    4648:	00 0c       	add	r0, r0
    464a:	33 0b       	sbc	r19, r19
    464c:	3f 93       	push	r19
    464e:	8f 93       	push	r24
    4650:	8b e3       	ldi	r24, 0x3B	; 59
    4652:	95 e0       	ldi	r25, 0x05	; 5
    4654:	9f 93       	push	r25
    4656:	8f 93       	push	r24
    4658:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    465c:	89 e3       	ldi	r24, 0x39	; 57
    465e:	95 e0       	ldi	r25, 0x05	; 5
    4660:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print_decs(mouse_report.h); print("](");
    4664:	80 91 db 01 	lds	r24, 0x01DB
    4668:	28 2f       	mov	r18, r24
    466a:	08 2e       	mov	r0, r24
    466c:	00 0c       	add	r0, r0
    466e:	33 0b       	sbc	r19, r19
    4670:	3f 93       	push	r19
    4672:	8f 93       	push	r24
    4674:	86 e3       	ldi	r24, 0x36	; 54
    4676:	95 e0       	ldi	r25, 0x05	; 5
    4678:	9f 93       	push	r25
    467a:	8f 93       	push	r24
    467c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4680:	83 e3       	ldi	r24, 0x33	; 51
    4682:	95 e0       	ldi	r25, 0x05	; 5
    4684:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print_dec(mousekey_repeat); print("/");
    4688:	80 91 d6 01 	lds	r24, 0x01D6
    468c:	1f 92       	push	r1
    468e:	8f 93       	push	r24
    4690:	80 e3       	ldi	r24, 0x30	; 48
    4692:	95 e0       	ldi	r25, 0x05	; 5
    4694:	9f 93       	push	r25
    4696:	8f 93       	push	r24
    4698:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    469c:	8e e2       	ldi	r24, 0x2E	; 46
    469e:	95 e0       	ldi	r25, 0x05	; 5
    46a0:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print_dec(mousekey_accel); print(")\n");
    46a4:	80 91 d5 01 	lds	r24, 0x01D5
    46a8:	1f 92       	push	r1
    46aa:	8f 93       	push	r24
    46ac:	8b e2       	ldi	r24, 0x2B	; 43
    46ae:	95 e0       	ldi	r25, 0x05	; 5
    46b0:	9f 93       	push	r25
    46b2:	8f 93       	push	r24
    46b4:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    46b8:	88 e2       	ldi	r24, 0x28	; 40
    46ba:	95 e0       	ldi	r25, 0x05	; 5
    46bc:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    46c0:	8d b7       	in	r24, 0x3d	; 61
    46c2:	9e b7       	in	r25, 0x3e	; 62
    46c4:	4c 96       	adiw	r24, 0x1c	; 28
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	f8 94       	cli
    46ca:	9e bf       	out	0x3e, r25	; 62
    46cc:	0f be       	out	0x3f, r0	; 63
    46ce:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    46d0:	87 ed       	ldi	r24, 0xD7	; 215
    46d2:	91 e0       	ldi	r25, 0x01	; 1
    46d4:	0e 94 3c 11 	call	0x2278	; 0x2278 <host_mouse_send>
    last_timer = timer_read();
    46d8:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <timer_read>
    46dc:	90 93 d4 01 	sts	0x01D4, r25
    46e0:	80 93 d3 01 	sts	0x01D3, r24
    46e4:	08 95       	ret

000046e6 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    46ec:	80 91 d3 01 	lds	r24, 0x01D3
    46f0:	90 91 d4 01 	lds	r25, 0x01D4
    46f4:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <timer_elapsed>
    46f8:	ac 01       	movw	r20, r24
    46fa:	90 91 d6 01 	lds	r25, 0x01D6
    46fe:	99 23       	and	r25, r25
    4700:	21 f0       	breq	.+8      	; 0x470a <mousekey_task+0x24>
    4702:	20 91 13 01 	lds	r18, 0x0113
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	06 c0       	rjmp	.+12     	; 0x4716 <mousekey_task+0x30>
    470a:	20 91 14 01 	lds	r18, 0x0114
    470e:	8a e0       	ldi	r24, 0x0A	; 10
    4710:	28 9f       	mul	r18, r24
    4712:	90 01       	movw	r18, r0
    4714:	11 24       	eor	r1, r1
    4716:	42 17       	cp	r20, r18
    4718:	53 07       	cpc	r21, r19
    471a:	08 f4       	brcc	.+2      	; 0x471e <mousekey_task+0x38>
    471c:	85 c0       	rjmp	.+266    	; 0x4828 <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    471e:	80 91 d8 01 	lds	r24, 0x01D8
    4722:	c0 91 d9 01 	lds	r28, 0x01D9
    4726:	d0 91 da 01 	lds	r29, 0x01DA
    472a:	10 91 db 01 	lds	r17, 0x01DB
    472e:	81 11       	cpse	r24, r1
    4730:	07 c0       	rjmp	.+14     	; 0x4740 <mousekey_task+0x5a>
    4732:	c1 11       	cpse	r28, r1
    4734:	75 c0       	rjmp	.+234    	; 0x4820 <mousekey_task+0x13a>
    4736:	d1 11       	cpse	r29, r1
    4738:	73 c0       	rjmp	.+230    	; 0x4820 <mousekey_task+0x13a>
    473a:	11 11       	cpse	r17, r1
    473c:	71 c0       	rjmp	.+226    	; 0x4820 <mousekey_task+0x13a>
    473e:	74 c0       	rjmp	.+232    	; 0x4828 <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4740:	9f 3f       	cpi	r25, 0xFF	; 255
    4742:	19 f0       	breq	.+6      	; 0x474a <mousekey_task+0x64>
        mousekey_repeat++;
    4744:	9f 5f       	subi	r25, 0xFF	; 255
    4746:	90 93 d6 01 	sts	0x01D6, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    474a:	18 16       	cp	r1, r24
    474c:	24 f4       	brge	.+8      	; 0x4756 <mousekey_task+0x70>
    474e:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    4752:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4756:	80 91 d8 01 	lds	r24, 0x01D8
    475a:	87 ff       	sbrs	r24, 7
    475c:	05 c0       	rjmp	.+10     	; 0x4768 <mousekey_task+0x82>
    475e:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    4762:	81 95       	neg	r24
    4764:	80 93 d8 01 	sts	0x01D8, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4768:	1c 16       	cp	r1, r28
    476a:	24 f4       	brge	.+8      	; 0x4774 <mousekey_task+0x8e>
    476c:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    4770:	80 93 d9 01 	sts	0x01D9, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4774:	80 91 d9 01 	lds	r24, 0x01D9
    4778:	87 ff       	sbrs	r24, 7
    477a:	05 c0       	rjmp	.+10     	; 0x4786 <mousekey_task+0xa0>
    477c:	0e 94 77 21 	call	0x42ee	; 0x42ee <move_unit>
    4780:	81 95       	neg	r24
    4782:	80 93 d9 01 	sts	0x01D9, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4786:	60 91 d8 01 	lds	r22, 0x01D8
    478a:	66 23       	and	r22, r22
    478c:	31 f1       	breq	.+76     	; 0x47da <mousekey_task+0xf4>
    478e:	c0 91 d9 01 	lds	r28, 0x01D9
    4792:	cc 23       	and	r28, r28
    4794:	11 f1       	breq	.+68     	; 0x47da <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4796:	06 2e       	mov	r0, r22
    4798:	00 0c       	add	r0, r0
    479a:	77 0b       	sbc	r23, r23
    479c:	88 0b       	sbc	r24, r24
    479e:	99 0b       	sbc	r25, r25
    47a0:	0e 94 80 29 	call	0x5300	; 0x5300 <__floatsisf>
    47a4:	23 e3       	ldi	r18, 0x33	; 51
    47a6:	33 e3       	ldi	r19, 0x33	; 51
    47a8:	43 e3       	ldi	r20, 0x33	; 51
    47aa:	5f e3       	ldi	r21, 0x3F	; 63
    47ac:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__mulsf3>
    47b0:	0e 94 48 29 	call	0x5290	; 0x5290 <__fixsfsi>
    47b4:	60 93 d8 01 	sts	0x01D8, r22
        mouse_report.y *= 0.7;
    47b8:	6c 2f       	mov	r22, r28
    47ba:	cc 0f       	add	r28, r28
    47bc:	77 0b       	sbc	r23, r23
    47be:	88 0b       	sbc	r24, r24
    47c0:	99 0b       	sbc	r25, r25
    47c2:	0e 94 80 29 	call	0x5300	; 0x5300 <__floatsisf>
    47c6:	23 e3       	ldi	r18, 0x33	; 51
    47c8:	33 e3       	ldi	r19, 0x33	; 51
    47ca:	43 e3       	ldi	r20, 0x33	; 51
    47cc:	5f e3       	ldi	r21, 0x3F	; 63
    47ce:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__mulsf3>
    47d2:	0e 94 48 29 	call	0x5290	; 0x5290 <__fixsfsi>
    47d6:	60 93 d9 01 	sts	0x01D9, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    47da:	1d 16       	cp	r1, r29
    47dc:	24 f4       	brge	.+8      	; 0x47e6 <mousekey_task+0x100>
    47de:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    47e2:	80 93 da 01 	sts	0x01DA, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    47e6:	80 91 da 01 	lds	r24, 0x01DA
    47ea:	87 ff       	sbrs	r24, 7
    47ec:	05 c0       	rjmp	.+10     	; 0x47f8 <mousekey_task+0x112>
    47ee:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    47f2:	81 95       	neg	r24
    47f4:	80 93 da 01 	sts	0x01DA, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    47f8:	11 16       	cp	r1, r17
    47fa:	24 f4       	brge	.+8      	; 0x4804 <mousekey_task+0x11e>
    47fc:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    4800:	80 93 db 01 	sts	0x01DB, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4804:	80 91 db 01 	lds	r24, 0x01DB
    4808:	87 ff       	sbrs	r24, 7
    480a:	05 c0       	rjmp	.+10     	; 0x4816 <mousekey_task+0x130>
    480c:	0e 94 c0 21 	call	0x4380	; 0x4380 <wheel_unit>
    4810:	81 95       	neg	r24
    4812:	80 93 db 01 	sts	0x01DB, r24

    mousekey_send();
}
    4816:	df 91       	pop	r29
    4818:	cf 91       	pop	r28
    481a:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    481c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    4820:	9f 3f       	cpi	r25, 0xFF	; 255
    4822:	09 f0       	breq	.+2      	; 0x4826 <mousekey_task+0x140>
    4824:	8f cf       	rjmp	.-226    	; 0x4744 <mousekey_task+0x5e>
    4826:	a0 cf       	rjmp	.-192    	; 0x4768 <mousekey_task+0x82>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    4828:	df 91       	pop	r29
    482a:	cf 91       	pop	r28
    482c:	1f 91       	pop	r17
    482e:	08 95       	ret

00004830 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4830:	e7 ed       	ldi	r30, 0xD7	; 215
    4832:	f1 e0       	ldi	r31, 0x01	; 1
    4834:	85 e0       	ldi	r24, 0x05	; 5
    4836:	df 01       	movw	r26, r30
    4838:	1d 92       	st	X+, r1
    483a:	8a 95       	dec	r24
    483c:	e9 f7       	brne	.-6      	; 0x4838 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    483e:	10 92 d6 01 	sts	0x01D6, r1
    mousekey_accel = 0;
    4842:	10 92 d5 01 	sts	0x01D5, r1
    4846:	08 95       	ret

00004848 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4848:	82 e7       	ldi	r24, 0x72	; 114
    484a:	97 e0       	ldi	r25, 0x07	; 7
    484c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4850:	1f 92       	push	r1
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	8f 93       	push	r24
    4856:	1f 92       	push	r1
    4858:	85 e0       	ldi	r24, 0x05	; 5
    485a:	8f 93       	push	r24
    485c:	84 e2       	ldi	r24, 0x24	; 36
    485e:	97 e0       	ldi	r25, 0x07	; 7
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4868:	0f 90       	pop	r0
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
    4872:	0f 90       	pop	r0
    4874:	08 95       	ret

00004876 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4876:	83 30       	cpi	r24, 0x03	; 3
    4878:	e9 f1       	breq	.+122    	; 0x48f4 <mousekey_param_inc+0x7e>
    487a:	28 f4       	brcc	.+10     	; 0x4886 <mousekey_param_inc+0x10>
    487c:	81 30       	cpi	r24, 0x01	; 1
    487e:	61 f0       	breq	.+24     	; 0x4898 <mousekey_param_inc+0x22>
    4880:	82 30       	cpi	r24, 0x02	; 2
    4882:	09 f1       	breq	.+66     	; 0x48c6 <mousekey_param_inc+0x50>
    4884:	08 95       	ret
    4886:	85 30       	cpi	r24, 0x05	; 5
    4888:	09 f4       	brne	.+2      	; 0x488c <mousekey_param_inc+0x16>
    488a:	62 c0       	rjmp	.+196    	; 0x4950 <mousekey_param_inc+0xda>
    488c:	08 f4       	brcc	.+2      	; 0x4890 <mousekey_param_inc+0x1a>
    488e:	49 c0       	rjmp	.+146    	; 0x4922 <mousekey_param_inc+0xac>
    4890:	86 30       	cpi	r24, 0x06	; 6
    4892:	09 f4       	brne	.+2      	; 0x4896 <mousekey_param_inc+0x20>
    4894:	74 c0       	rjmp	.+232    	; 0x497e <mousekey_param_inc+0x108>
    4896:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4898:	80 91 14 01 	lds	r24, 0x0114
    489c:	26 2f       	mov	r18, r22
    489e:	30 e0       	ldi	r19, 0x00	; 0
    48a0:	28 0f       	add	r18, r24
    48a2:	31 1d       	adc	r19, r1
    48a4:	2f 3f       	cpi	r18, 0xFF	; 255
    48a6:	31 05       	cpc	r19, r1
    48a8:	24 f4       	brge	.+8      	; 0x48b2 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    48aa:	68 0f       	add	r22, r24
    48ac:	60 93 14 01 	sts	0x0114, r22
    48b0:	03 c0       	rjmp	.+6      	; 0x48b8 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    48b2:	8f ef       	ldi	r24, 0xFF	; 255
    48b4:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    48b8:	80 91 14 01 	lds	r24, 0x0114
    48bc:	1f 92       	push	r1
    48be:	8f 93       	push	r24
    48c0:	8d e5       	ldi	r24, 0x5D	; 93
    48c2:	96 e0       	ldi	r25, 0x06	; 6
    48c4:	72 c0       	rjmp	.+228    	; 0x49aa <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    48c6:	80 91 13 01 	lds	r24, 0x0113
    48ca:	26 2f       	mov	r18, r22
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	28 0f       	add	r18, r24
    48d0:	31 1d       	adc	r19, r1
    48d2:	2f 3f       	cpi	r18, 0xFF	; 255
    48d4:	31 05       	cpc	r19, r1
    48d6:	24 f4       	brge	.+8      	; 0x48e0 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    48d8:	68 0f       	add	r22, r24
    48da:	60 93 13 01 	sts	0x0113, r22
    48de:	03 c0       	rjmp	.+6      	; 0x48e6 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    48e0:	8f ef       	ldi	r24, 0xFF	; 255
    48e2:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    48e6:	80 91 13 01 	lds	r24, 0x0113
    48ea:	1f 92       	push	r1
    48ec:	8f 93       	push	r24
    48ee:	8b e4       	ldi	r24, 0x4B	; 75
    48f0:	96 e0       	ldi	r25, 0x06	; 6
    48f2:	5b c0       	rjmp	.+182    	; 0x49aa <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    48f4:	80 91 12 01 	lds	r24, 0x0112
    48f8:	26 2f       	mov	r18, r22
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	28 0f       	add	r18, r24
    48fe:	31 1d       	adc	r19, r1
    4900:	2f 3f       	cpi	r18, 0xFF	; 255
    4902:	31 05       	cpc	r19, r1
    4904:	24 f4       	brge	.+8      	; 0x490e <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4906:	68 0f       	add	r22, r24
    4908:	60 93 12 01 	sts	0x0112, r22
    490c:	03 c0       	rjmp	.+6      	; 0x4914 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    490e:	8f ef       	ldi	r24, 0xFF	; 255
    4910:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4914:	80 91 12 01 	lds	r24, 0x0112
    4918:	1f 92       	push	r1
    491a:	8f 93       	push	r24
    491c:	88 e3       	ldi	r24, 0x38	; 56
    491e:	96 e0       	ldi	r25, 0x06	; 6
    4920:	44 c0       	rjmp	.+136    	; 0x49aa <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4922:	80 91 11 01 	lds	r24, 0x0111
    4926:	26 2f       	mov	r18, r22
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	28 0f       	add	r18, r24
    492c:	31 1d       	adc	r19, r1
    492e:	2f 3f       	cpi	r18, 0xFF	; 255
    4930:	31 05       	cpc	r19, r1
    4932:	24 f4       	brge	.+8      	; 0x493c <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4934:	68 0f       	add	r22, r24
    4936:	60 93 11 01 	sts	0x0111, r22
    493a:	03 c0       	rjmp	.+6      	; 0x4942 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    493c:	8f ef       	ldi	r24, 0xFF	; 255
    493e:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4942:	80 91 11 01 	lds	r24, 0x0111
    4946:	1f 92       	push	r1
    4948:	8f 93       	push	r24
    494a:	83 e2       	ldi	r24, 0x23	; 35
    494c:	96 e0       	ldi	r25, 0x06	; 6
    494e:	2d c0       	rjmp	.+90     	; 0x49aa <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4950:	80 91 10 01 	lds	r24, 0x0110
    4954:	26 2f       	mov	r18, r22
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	28 0f       	add	r18, r24
    495a:	31 1d       	adc	r19, r1
    495c:	2f 3f       	cpi	r18, 0xFF	; 255
    495e:	31 05       	cpc	r19, r1
    4960:	24 f4       	brge	.+8      	; 0x496a <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4962:	68 0f       	add	r22, r24
    4964:	60 93 10 01 	sts	0x0110, r22
    4968:	03 c0       	rjmp	.+6      	; 0x4970 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    496a:	8f ef       	ldi	r24, 0xFF	; 255
    496c:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4970:	80 91 10 01 	lds	r24, 0x0110
    4974:	1f 92       	push	r1
    4976:	8f 93       	push	r24
    4978:	8a e0       	ldi	r24, 0x0A	; 10
    497a:	96 e0       	ldi	r25, 0x06	; 6
    497c:	16 c0       	rjmp	.+44     	; 0x49aa <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    497e:	80 91 0f 01 	lds	r24, 0x010F
    4982:	26 2f       	mov	r18, r22
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	28 0f       	add	r18, r24
    4988:	31 1d       	adc	r19, r1
    498a:	2f 3f       	cpi	r18, 0xFF	; 255
    498c:	31 05       	cpc	r19, r1
    498e:	24 f4       	brge	.+8      	; 0x4998 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4990:	68 0f       	add	r22, r24
    4992:	60 93 0f 01 	sts	0x010F, r22
    4996:	03 c0       	rjmp	.+6      	; 0x499e <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4998:	8f ef       	ldi	r24, 0xFF	; 255
    499a:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    499e:	80 91 0f 01 	lds	r24, 0x010F
    49a2:	1f 92       	push	r1
    49a4:	8f 93       	push	r24
    49a6:	8f ee       	ldi	r24, 0xEF	; 239
    49a8:	95 e0       	ldi	r25, 0x05	; 5
    49aa:	9f 93       	push	r25
    49ac:	8f 93       	push	r24
    49ae:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
            break;
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	0f 90       	pop	r0
    49b8:	0f 90       	pop	r0
    49ba:	08 95       	ret

000049bc <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    49bc:	83 30       	cpi	r24, 0x03	; 3
    49be:	81 f1       	breq	.+96     	; 0x4a20 <mousekey_param_dec+0x64>
    49c0:	28 f4       	brcc	.+10     	; 0x49cc <mousekey_param_dec+0x10>
    49c2:	81 30       	cpi	r24, 0x01	; 1
    49c4:	59 f0       	breq	.+22     	; 0x49dc <mousekey_param_dec+0x20>
    49c6:	82 30       	cpi	r24, 0x02	; 2
    49c8:	d1 f0       	breq	.+52     	; 0x49fe <mousekey_param_dec+0x42>
    49ca:	08 95       	ret
    49cc:	85 30       	cpi	r24, 0x05	; 5
    49ce:	09 f4       	brne	.+2      	; 0x49d2 <mousekey_param_dec+0x16>
    49d0:	49 c0       	rjmp	.+146    	; 0x4a64 <mousekey_param_dec+0xa8>
    49d2:	b8 f1       	brcs	.+110    	; 0x4a42 <mousekey_param_dec+0x86>
    49d4:	86 30       	cpi	r24, 0x06	; 6
    49d6:	09 f4       	brne	.+2      	; 0x49da <mousekey_param_dec+0x1e>
    49d8:	56 c0       	rjmp	.+172    	; 0x4a86 <mousekey_param_dec+0xca>
    49da:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    49dc:	80 91 14 01 	lds	r24, 0x0114
    49e0:	68 17       	cp	r22, r24
    49e2:	20 f4       	brcc	.+8      	; 0x49ec <mousekey_param_dec+0x30>
                mk_delay -= dec;
    49e4:	86 1b       	sub	r24, r22
    49e6:	80 93 14 01 	sts	0x0114, r24
    49ea:	02 c0       	rjmp	.+4      	; 0x49f0 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    49ec:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    49f0:	80 91 14 01 	lds	r24, 0x0114
    49f4:	1f 92       	push	r1
    49f6:	8f 93       	push	r24
    49f8:	80 ee       	ldi	r24, 0xE0	; 224
    49fa:	95 e0       	ldi	r25, 0x05	; 5
    49fc:	54 c0       	rjmp	.+168    	; 0x4aa6 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    49fe:	80 91 13 01 	lds	r24, 0x0113
    4a02:	68 17       	cp	r22, r24
    4a04:	20 f4       	brcc	.+8      	; 0x4a0e <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4a06:	86 1b       	sub	r24, r22
    4a08:	80 93 13 01 	sts	0x0113, r24
    4a0c:	02 c0       	rjmp	.+4      	; 0x4a12 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4a0e:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4a12:	80 91 13 01 	lds	r24, 0x0113
    4a16:	1f 92       	push	r1
    4a18:	8f 93       	push	r24
    4a1a:	8e ec       	ldi	r24, 0xCE	; 206
    4a1c:	95 e0       	ldi	r25, 0x05	; 5
    4a1e:	43 c0       	rjmp	.+134    	; 0x4aa6 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4a20:	80 91 12 01 	lds	r24, 0x0112
    4a24:	68 17       	cp	r22, r24
    4a26:	20 f4       	brcc	.+8      	; 0x4a30 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4a28:	86 1b       	sub	r24, r22
    4a2a:	80 93 12 01 	sts	0x0112, r24
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4a30:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4a34:	80 91 12 01 	lds	r24, 0x0112
    4a38:	1f 92       	push	r1
    4a3a:	8f 93       	push	r24
    4a3c:	8b eb       	ldi	r24, 0xBB	; 187
    4a3e:	95 e0       	ldi	r25, 0x05	; 5
    4a40:	32 c0       	rjmp	.+100    	; 0x4aa6 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4a42:	80 91 11 01 	lds	r24, 0x0111
    4a46:	68 17       	cp	r22, r24
    4a48:	20 f4       	brcc	.+8      	; 0x4a52 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4a4a:	86 1b       	sub	r24, r22
    4a4c:	80 93 11 01 	sts	0x0111, r24
    4a50:	02 c0       	rjmp	.+4      	; 0x4a56 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4a52:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4a56:	80 91 11 01 	lds	r24, 0x0111
    4a5a:	1f 92       	push	r1
    4a5c:	8f 93       	push	r24
    4a5e:	86 ea       	ldi	r24, 0xA6	; 166
    4a60:	95 e0       	ldi	r25, 0x05	; 5
    4a62:	21 c0       	rjmp	.+66     	; 0x4aa6 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4a64:	80 91 10 01 	lds	r24, 0x0110
    4a68:	68 17       	cp	r22, r24
    4a6a:	20 f4       	brcc	.+8      	; 0x4a74 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4a6c:	86 1b       	sub	r24, r22
    4a6e:	80 93 10 01 	sts	0x0110, r24
    4a72:	02 c0       	rjmp	.+4      	; 0x4a78 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4a74:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4a78:	80 91 10 01 	lds	r24, 0x0110
    4a7c:	1f 92       	push	r1
    4a7e:	8f 93       	push	r24
    4a80:	8d e8       	ldi	r24, 0x8D	; 141
    4a82:	95 e0       	ldi	r25, 0x05	; 5
    4a84:	10 c0       	rjmp	.+32     	; 0x4aa6 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4a86:	80 91 0f 01 	lds	r24, 0x010F
    4a8a:	68 17       	cp	r22, r24
    4a8c:	20 f4       	brcc	.+8      	; 0x4a96 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4a8e:	86 1b       	sub	r24, r22
    4a90:	80 93 0f 01 	sts	0x010F, r24
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4a96:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a9a:	80 91 0f 01 	lds	r24, 0x010F
    4a9e:	1f 92       	push	r1
    4aa0:	8f 93       	push	r24
    4aa2:	82 e7       	ldi	r24, 0x72	; 114
    4aa4:	95 e0       	ldi	r25, 0x05	; 5
    4aa6:	9f 93       	push	r25
    4aa8:	8f 93       	push	r24
    4aaa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
            break;
    4aae:	0f 90       	pop	r0
    4ab0:	0f 90       	pop	r0
    4ab2:	0f 90       	pop	r0
    4ab4:	0f 90       	pop	r0
    4ab6:	08 95       	ret

00004ab8 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4ab8:	cf 93       	push	r28
    4aba:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4abc:	1f 92       	push	r1
    4abe:	8f 93       	push	r24
    4ac0:	87 e7       	ldi	r24, 0x77	; 119
    4ac2:	98 e0       	ldi	r25, 0x08	; 8
    4ac4:	9f 93       	push	r25
    4ac6:	8f 93       	push	r24
    4ac8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    default_layer_set(1UL<<layer);
    4acc:	81 e0       	ldi	r24, 0x01	; 1
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	a0 e0       	ldi	r26, 0x00	; 0
    4ad2:	b0 e0       	ldi	r27, 0x00	; 0
    4ad4:	bc 01       	movw	r22, r24
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	04 c0       	rjmp	.+8      	; 0x4ae2 <switch_default_layer+0x2a>
    4ada:	66 0f       	add	r22, r22
    4adc:	77 1f       	adc	r23, r23
    4ade:	88 1f       	adc	r24, r24
    4ae0:	99 1f       	adc	r25, r25
    4ae2:	ca 95       	dec	r28
    4ae4:	d2 f7       	brpl	.-12     	; 0x4ada <switch_default_layer+0x22>
    4ae6:	0e 94 df 1a 	call	0x35be	; 0x35be <default_layer_set>
    clear_keyboard();
    4aea:	0f 90       	pop	r0
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
}
    4af2:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4af4:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <clear_keyboard>

00004af8 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4af8:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4afa:	8b 31       	cpi	r24, 0x1B	; 27
    4afc:	09 f4       	brne	.+2      	; 0x4b00 <command_common+0x8>
    4afe:	cb c1       	rjmp	.+918    	; 0x4e96 <command_common+0x39e>
    4b00:	08 f0       	brcs	.+2      	; 0x4b04 <command_common+0xc>
    4b02:	49 c0       	rjmp	.+146    	; 0x4b96 <command_common+0x9e>
    4b04:	8e 30       	cpi	r24, 0x0E	; 14
    4b06:	09 f4       	brne	.+2      	; 0x4b0a <command_common+0x12>
    4b08:	da c1       	rjmp	.+948    	; 0x4ebe <command_common+0x3c6>
    4b0a:	00 f5       	brcc	.+64     	; 0x4b4c <command_common+0x54>
    4b0c:	87 30       	cpi	r24, 0x07	; 7
    4b0e:	09 f4       	brne	.+2      	; 0x4b12 <command_common+0x1a>
    4b10:	a9 c1       	rjmp	.+850    	; 0x4e64 <command_common+0x36c>
    4b12:	a8 f4       	brcc	.+42     	; 0x4b3e <command_common+0x46>
    4b14:	86 30       	cpi	r24, 0x06	; 6
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <command_common+0x22>
    4b18:	5a c2       	rjmp	.+1204   	; 0x4fce <command_common+0x4d6>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4b1a:	80 91 cd 01 	lds	r24, 0x01CD
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4b1e:	81 7f       	andi	r24, 0xF1	; 241
    4b20:	8e 7f       	andi	r24, 0xFE	; 254
    4b22:	80 93 cd 01 	sts	0x01CD, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4b26:	8c e7       	ldi	r24, 0x7C	; 124
    4b28:	98 e0       	ldi	r25, 0x08	; 8
    4b2a:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4b2e:	8c ea       	ldi	r24, 0xAC	; 172
    4b30:	9c e0       	ldi	r25, 0x0C	; 12
    4b32:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            command_state = CONSOLE;
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	80 93 dd 01 	sts	0x01DD, r24
    4b3c:	91 c1       	rjmp	.+802    	; 0x4e60 <command_common+0x368>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4b3e:	88 30       	cpi	r24, 0x08	; 8
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <command_common+0x4c>
    4b42:	5b c0       	rjmp	.+182    	; 0x4bfa <command_common+0x102>
    4b44:	8b 30       	cpi	r24, 0x0B	; 11
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <command_common+0x52>
    4b48:	87 c1       	rjmp	.+782    	; 0x4e58 <command_common+0x360>
    4b4a:	41 c2       	rjmp	.+1154   	; 0x4fce <command_common+0x4d6>
    4b4c:	81 31       	cpi	r24, 0x11	; 17
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <command_common+0x5a>
    4b50:	26 c2       	rjmp	.+1100   	; 0x4f9e <command_common+0x4a6>
    4b52:	20 f4       	brcc	.+8      	; 0x4b5c <command_common+0x64>
    4b54:	80 31       	cpi	r24, 0x10	; 16
    4b56:	09 f4       	brne	.+2      	; 0x4b5a <command_common+0x62>
    4b58:	c6 c1       	rjmp	.+908    	; 0x4ee6 <command_common+0x3ee>
    4b5a:	39 c2       	rjmp	.+1138   	; 0x4fce <command_common+0x4d6>
    4b5c:	86 31       	cpi	r24, 0x16	; 22
    4b5e:	09 f4       	brne	.+2      	; 0x4b62 <command_common+0x6a>
    4b60:	dd c1       	rjmp	.+954    	; 0x4f1c <command_common+0x424>
    4b62:	89 31       	cpi	r24, 0x19	; 25
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <command_common+0x70>
    4b66:	33 c2       	rjmp	.+1126   	; 0x4fce <command_common+0x4d6>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4b68:	80 e2       	ldi	r24, 0x20	; 32
    4b6a:	9c e0       	ldi	r25, 0x0C	; 12
    4b6c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4b70:	85 ef       	ldi	r24, 0xF5	; 245
    4b72:	9b e0       	ldi	r25, 0x0B	; 11
    4b74:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4b78:	8b eb       	ldi	r24, 0xBB	; 187
    4b7a:	9b e0       	ldi	r25, 0x0B	; 11
    4b7c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4b80:	8e e8       	ldi	r24, 0x8E	; 142
    4b82:	9b e0       	ldi	r25, 0x0B	; 11
    4b84:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            /* build options */
            print("OPTIONS:"
    4b88:	89 e4       	ldi	r24, 0x49	; 73
    4b8a:	9b e0       	ldi	r25, 0x0B	; 11
    4b8c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4b90:	8e e1       	ldi	r24, 0x1E	; 30
    4b92:	9b e0       	ldi	r25, 0x0B	; 11
    4b94:	63 c1       	rjmp	.+710    	; 0x4e5c <command_common+0x364>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4b96:	85 33       	cpi	r24, 0x35	; 53
    4b98:	09 f4       	brne	.+2      	; 0x4b9c <command_common+0xa4>
    4b9a:	13 c2       	rjmp	.+1062   	; 0x4fc2 <command_common+0x4ca>
    4b9c:	68 f4       	brcc	.+26     	; 0x4bb8 <command_common+0xc0>
    4b9e:	87 32       	cpi	r24, 0x27	; 39
    4ba0:	09 f4       	brne	.+2      	; 0x4ba4 <command_common+0xac>
    4ba2:	0f c2       	rjmp	.+1054   	; 0x4fc2 <command_common+0x4ca>
    4ba4:	28 f4       	brcc	.+10     	; 0x4bb0 <command_common+0xb8>
    4ba6:	8e 31       	cpi	r24, 0x1E	; 30
    4ba8:	08 f4       	brcc	.+2      	; 0x4bac <command_common+0xb4>
    4baa:	11 c2       	rjmp	.+1058   	; 0x4fce <command_common+0x4d6>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4bac:	8d 51       	subi	r24, 0x1D	; 29
    4bae:	0c c2       	rjmp	.+1048   	; 0x4fc8 <command_common+0x4d0>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4bb0:	89 32       	cpi	r24, 0x29	; 41
    4bb2:	09 f4       	brne	.+2      	; 0x4bb6 <command_common+0xbe>
    4bb4:	06 c2       	rjmp	.+1036   	; 0x4fc2 <command_common+0x4ca>
    4bb6:	0b c2       	rjmp	.+1046   	; 0x4fce <command_common+0x4d6>
    4bb8:	83 34       	cpi	r24, 0x43	; 67
    4bba:	38 f4       	brcc	.+14     	; 0x4bca <command_common+0xd2>
    4bbc:	8a 33       	cpi	r24, 0x3A	; 58
    4bbe:	08 f0       	brcs	.+2      	; 0x4bc2 <command_common+0xca>
    4bc0:	02 c2       	rjmp	.+1028   	; 0x4fc6 <command_common+0x4ce>
    4bc2:	88 33       	cpi	r24, 0x38	; 56
    4bc4:	09 f4       	brne	.+2      	; 0x4bc8 <command_common+0xd0>
    4bc6:	48 c1       	rjmp	.+656    	; 0x4e58 <command_common+0x360>
    4bc8:	02 c2       	rjmp	.+1028   	; 0x4fce <command_common+0x4d6>
    4bca:	83 34       	cpi	r24, 0x43	; 67
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <command_common+0xd8>
    4bce:	f9 c1       	rjmp	.+1010   	; 0x4fc2 <command_common+0x4ca>
    4bd0:	88 34       	cpi	r24, 0x48	; 72
    4bd2:	09 f0       	breq	.+2      	; 0x4bd6 <command_common+0xde>
    4bd4:	fc c1       	rjmp	.+1016   	; 0x4fce <command_common+0x4d6>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4bd6:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <clear_keyboard>
            print("\n\nbootloader... ");
    4bda:	8b e9       	ldi	r24, 0x9B	; 155
    4bdc:	9c e0       	ldi	r25, 0x0C	; 12
    4bde:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4be2:	9f ef       	ldi	r25, 0xFF	; 255
    4be4:	23 ed       	ldi	r18, 0xD3	; 211
    4be6:	80 e3       	ldi	r24, 0x30	; 48
    4be8:	91 50       	subi	r25, 0x01	; 1
    4bea:	20 40       	sbci	r18, 0x00	; 0
    4bec:	80 40       	sbci	r24, 0x00	; 0
    4bee:	e1 f7       	brne	.-8      	; 0x4be8 <command_common+0xf0>
    4bf0:	00 c0       	rjmp	.+0      	; 0x4bf2 <command_common+0xfa>
    4bf2:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4bf4:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <bootloader_jump>
    4bf8:	33 c1       	rjmp	.+614    	; 0x4e60 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4bfa:	80 eb       	ldi	r24, 0xB0	; 176
    4bfc:	9c e0       	ldi	r25, 0x0C	; 12
    4bfe:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4c02:	8b e7       	ldi	r24, 0x7B	; 123
    4c04:	9a e0       	ldi	r25, 0x0A	; 10
    4c06:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4c0a:	0e 94 65 21 	call	0x42ca	; 0x42ca <eeconfig_read_default_layer>
    4c0e:	1f 92       	push	r1
    4c10:	8f 93       	push	r24
    4c12:	88 e7       	ldi	r24, 0x78	; 120
    4c14:	9a e0       	ldi	r25, 0x0A	; 10
    4c16:	9f 93       	push	r25
    4c18:	8f 93       	push	r24
    4c1a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4c1e:	86 e7       	ldi	r24, 0x76	; 118
    4c20:	9a e0       	ldi	r25, 0x0A	; 10
    4c22:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4c26:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <eeconfig_read_debug>
    4c2a:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4c2c:	83 e6       	ldi	r24, 0x63	; 99
    4c2e:	9a e0       	ldi	r25, 0x0A	; 10
    4c30:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4c34:	1f 92       	push	r1
    4c36:	cf 93       	push	r28
    4c38:	8e e5       	ldi	r24, 0x5E	; 94
    4c3a:	9a e0       	ldi	r25, 0x0A	; 10
    4c3c:	9f 93       	push	r25
    4c3e:	8f 93       	push	r24
    4c40:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4c44:	8c e5       	ldi	r24, 0x5C	; 92
    4c46:	9a e0       	ldi	r25, 0x0A	; 10
    4c48:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4c4c:	82 e5       	ldi	r24, 0x52	; 82
    4c4e:	9a e0       	ldi	r25, 0x0A	; 10
    4c50:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4c54:	8c 2f       	mov	r24, r28
    4c56:	81 70       	andi	r24, 0x01	; 1
    4c58:	1f 92       	push	r1
    4c5a:	8f 93       	push	r24
    4c5c:	8f e4       	ldi	r24, 0x4F	; 79
    4c5e:	9a e0       	ldi	r25, 0x0A	; 10
    4c60:	9f 93       	push	r25
    4c62:	8f 93       	push	r24
    4c64:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4c68:	8d e4       	ldi	r24, 0x4D	; 77
    4c6a:	9a e0       	ldi	r25, 0x0A	; 10
    4c6c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4c70:	83 e4       	ldi	r24, 0x43	; 67
    4c72:	9a e0       	ldi	r25, 0x0A	; 10
    4c74:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4c78:	c1 fb       	bst	r28, 1
    4c7a:	88 27       	eor	r24, r24
    4c7c:	80 f9       	bld	r24, 0
    4c7e:	1f 92       	push	r1
    4c80:	8f 93       	push	r24
    4c82:	80 e4       	ldi	r24, 0x40	; 64
    4c84:	9a e0       	ldi	r25, 0x0A	; 10
    4c86:	9f 93       	push	r25
    4c88:	8f 93       	push	r24
    4c8a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4c8e:	8e e3       	ldi	r24, 0x3E	; 62
    4c90:	9a e0       	ldi	r25, 0x0A	; 10
    4c92:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4c96:	82 e3       	ldi	r24, 0x32	; 50
    4c98:	9a e0       	ldi	r25, 0x0A	; 10
    4c9a:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4c9e:	c2 fb       	bst	r28, 2
    4ca0:	88 27       	eor	r24, r24
    4ca2:	80 f9       	bld	r24, 0
    4ca4:	1f 92       	push	r1
    4ca6:	8f 93       	push	r24
    4ca8:	8f e2       	ldi	r24, 0x2F	; 47
    4caa:	9a e0       	ldi	r25, 0x0A	; 10
    4cac:	9f 93       	push	r25
    4cae:	8f 93       	push	r24
    4cb0:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4cb4:	8d e2       	ldi	r24, 0x2D	; 45
    4cb6:	9a e0       	ldi	r25, 0x0A	; 10
    4cb8:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4cbc:	84 e2       	ldi	r24, 0x24	; 36
    4cbe:	9a e0       	ldi	r25, 0x0A	; 10
    4cc0:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4cc4:	c3 fb       	bst	r28, 3
    4cc6:	cc 27       	eor	r28, r28
    4cc8:	c0 f9       	bld	r28, 0
    4cca:	1f 92       	push	r1
    4ccc:	cf 93       	push	r28
    4cce:	81 e2       	ldi	r24, 0x21	; 33
    4cd0:	9a e0       	ldi	r25, 0x0A	; 10
    4cd2:	9f 93       	push	r25
    4cd4:	8f 93       	push	r24
    4cd6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4cda:	8f e1       	ldi	r24, 0x1F	; 31
    4cdc:	9a e0       	ldi	r25, 0x0A	; 10
    4cde:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4ce2:	0e 94 6e 21 	call	0x42dc	; 0x42dc <eeconfig_read_keymap>
    4ce6:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4ce8:	8b e0       	ldi	r24, 0x0B	; 11
    4cea:	9a e0       	ldi	r25, 0x0A	; 10
    4cec:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4cf0:	1f 92       	push	r1
    4cf2:	cf 93       	push	r28
    4cf4:	86 e0       	ldi	r24, 0x06	; 6
    4cf6:	9a e0       	ldi	r25, 0x0A	; 10
    4cf8:	9f 93       	push	r25
    4cfa:	8f 93       	push	r24
    4cfc:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4d00:	84 e0       	ldi	r24, 0x04	; 4
    4d02:	9a e0       	ldi	r25, 0x0A	; 10
    4d04:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4d08:	8b ee       	ldi	r24, 0xEB	; 235
    4d0a:	99 e0       	ldi	r25, 0x09	; 9
    4d0c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4d10:	8c 2f       	mov	r24, r28
    4d12:	81 70       	andi	r24, 0x01	; 1
    4d14:	1f 92       	push	r1
    4d16:	8f 93       	push	r24
    4d18:	88 ee       	ldi	r24, 0xE8	; 232
    4d1a:	99 e0       	ldi	r25, 0x09	; 9
    4d1c:	9f 93       	push	r25
    4d1e:	8f 93       	push	r24
    4d20:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4d24:	8d b7       	in	r24, 0x3d	; 61
    4d26:	9e b7       	in	r25, 0x3e	; 62
    4d28:	80 96       	adiw	r24, 0x20	; 32
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	9e bf       	out	0x3e, r25	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	8d bf       	out	0x3d, r24	; 61
    4d34:	86 ee       	ldi	r24, 0xE6	; 230
    4d36:	99 e0       	ldi	r25, 0x09	; 9
    4d38:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4d3c:	8f ec       	ldi	r24, 0xCF	; 207
    4d3e:	99 e0       	ldi	r25, 0x09	; 9
    4d40:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4d44:	c1 fb       	bst	r28, 1
    4d46:	88 27       	eor	r24, r24
    4d48:	80 f9       	bld	r24, 0
    4d4a:	1f 92       	push	r1
    4d4c:	8f 93       	push	r24
    4d4e:	8c ec       	ldi	r24, 0xCC	; 204
    4d50:	99 e0       	ldi	r25, 0x09	; 9
    4d52:	9f 93       	push	r25
    4d54:	8f 93       	push	r24
    4d56:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4d5a:	8a ec       	ldi	r24, 0xCA	; 202
    4d5c:	99 e0       	ldi	r25, 0x09	; 9
    4d5e:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4d62:	88 eb       	ldi	r24, 0xB8	; 184
    4d64:	99 e0       	ldi	r25, 0x09	; 9
    4d66:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4d6a:	c2 fb       	bst	r28, 2
    4d6c:	88 27       	eor	r24, r24
    4d6e:	80 f9       	bld	r24, 0
    4d70:	1f 92       	push	r1
    4d72:	8f 93       	push	r24
    4d74:	85 eb       	ldi	r24, 0xB5	; 181
    4d76:	99 e0       	ldi	r25, 0x09	; 9
    4d78:	9f 93       	push	r25
    4d7a:	8f 93       	push	r24
    4d7c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4d80:	83 eb       	ldi	r24, 0xB3	; 179
    4d82:	99 e0       	ldi	r25, 0x09	; 9
    4d84:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4d88:	81 ea       	ldi	r24, 0xA1	; 161
    4d8a:	99 e0       	ldi	r25, 0x09	; 9
    4d8c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4d90:	c3 fb       	bst	r28, 3
    4d92:	88 27       	eor	r24, r24
    4d94:	80 f9       	bld	r24, 0
    4d96:	1f 92       	push	r1
    4d98:	8f 93       	push	r24
    4d9a:	8e e9       	ldi	r24, 0x9E	; 158
    4d9c:	99 e0       	ldi	r25, 0x09	; 9
    4d9e:	9f 93       	push	r25
    4da0:	8f 93       	push	r24
    4da2:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4da6:	8c e9       	ldi	r24, 0x9C	; 156
    4da8:	99 e0       	ldi	r25, 0x09	; 9
    4daa:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4dae:	82 e9       	ldi	r24, 0x92	; 146
    4db0:	99 e0       	ldi	r25, 0x09	; 9
    4db2:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4db6:	c4 fb       	bst	r28, 4
    4db8:	88 27       	eor	r24, r24
    4dba:	80 f9       	bld	r24, 0
    4dbc:	1f 92       	push	r1
    4dbe:	8f 93       	push	r24
    4dc0:	8f e8       	ldi	r24, 0x8F	; 143
    4dc2:	99 e0       	ldi	r25, 0x09	; 9
    4dc4:	9f 93       	push	r25
    4dc6:	8f 93       	push	r24
    4dc8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4dcc:	8d e8       	ldi	r24, 0x8D	; 141
    4dce:	99 e0       	ldi	r25, 0x09	; 9
    4dd0:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4dd4:	8b e7       	ldi	r24, 0x7B	; 123
    4dd6:	99 e0       	ldi	r25, 0x09	; 9
    4dd8:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4ddc:	c5 fb       	bst	r28, 5
    4dde:	88 27       	eor	r24, r24
    4de0:	80 f9       	bld	r24, 0
    4de2:	1f 92       	push	r1
    4de4:	8f 93       	push	r24
    4de6:	88 e7       	ldi	r24, 0x78	; 120
    4de8:	99 e0       	ldi	r25, 0x09	; 9
    4dea:	9f 93       	push	r25
    4dec:	8f 93       	push	r24
    4dee:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4df2:	86 e7       	ldi	r24, 0x76	; 118
    4df4:	99 e0       	ldi	r25, 0x09	; 9
    4df6:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4dfa:	8a e5       	ldi	r24, 0x5A	; 90
    4dfc:	99 e0       	ldi	r25, 0x09	; 9
    4dfe:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4e02:	c6 fb       	bst	r28, 6
    4e04:	88 27       	eor	r24, r24
    4e06:	80 f9       	bld	r24, 0
    4e08:	1f 92       	push	r1
    4e0a:	8f 93       	push	r24
    4e0c:	87 e5       	ldi	r24, 0x57	; 87
    4e0e:	99 e0       	ldi	r25, 0x09	; 9
    4e10:	9f 93       	push	r25
    4e12:	8f 93       	push	r24
    4e14:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4e18:	85 e5       	ldi	r24, 0x55	; 85
    4e1a:	99 e0       	ldi	r25, 0x09	; 9
    4e1c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4e20:	8d e4       	ldi	r24, 0x4D	; 77
    4e22:	99 e0       	ldi	r25, 0x09	; 9
    4e24:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4e28:	c7 fb       	bst	r28, 7
    4e2a:	cc 27       	eor	r28, r28
    4e2c:	c0 f9       	bld	r28, 0
    4e2e:	1f 92       	push	r1
    4e30:	cf 93       	push	r28
    4e32:	8a e4       	ldi	r24, 0x4A	; 74
    4e34:	99 e0       	ldi	r25, 0x09	; 9
    4e36:	9f 93       	push	r25
    4e38:	8f 93       	push	r24
    4e3a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    4e3e:	88 e4       	ldi	r24, 0x48	; 72
    4e40:	99 e0       	ldi	r25, 0x09	; 9
    4e42:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4e46:	8d b7       	in	r24, 0x3d	; 61
    4e48:	9e b7       	in	r25, 0x3e	; 62
    4e4a:	4c 96       	adiw	r24, 0x1c	; 28
    4e4c:	0f b6       	in	r0, 0x3f	; 63
    4e4e:	f8 94       	cli
    4e50:	9e bf       	out	0x3e, r25	; 62
    4e52:	0f be       	out	0x3f, r0	; 63
    4e54:	8d bf       	out	0x3d, r24	; 61
    4e56:	04 c0       	rjmp	.+8      	; 0x4e60 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4e58:	83 ea       	ldi	r24, 0xA3	; 163
    4e5a:	98 e0       	ldi	r25, 0x08	; 8
    4e5c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4e60:	c1 e0       	ldi	r28, 0x01	; 1
    4e62:	ba c0       	rjmp	.+372    	; 0x4fd8 <command_common+0x4e0>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4e64:	80 91 cd 01 	lds	r24, 0x01CD
    4e68:	c8 2f       	mov	r28, r24
    4e6a:	c1 70       	andi	r28, 0x01	; 1
    4e6c:	80 ff       	sbrs	r24, 0
    4e6e:	09 c0       	rjmp	.+18     	; 0x4e82 <command_common+0x38a>
                print("\ndebug: off\n");
    4e70:	8e e8       	ldi	r24, 0x8E	; 142
    4e72:	9c e0       	ldi	r25, 0x0C	; 12
    4e74:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
                debug_matrix   = false;
    4e78:	80 91 cd 01 	lds	r24, 0x01CD
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4e7c:	81 7f       	andi	r24, 0xF1	; 241
    4e7e:	8e 7f       	andi	r24, 0xFE	; 254
    4e80:	47 c0       	rjmp	.+142    	; 0x4f10 <command_common+0x418>
            } else {
                print("\ndebug: on\n");
    4e82:	82 e8       	ldi	r24, 0x82	; 130
    4e84:	9c e0       	ldi	r25, 0x0C	; 12
    4e86:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
                debug_enable   = true;
    4e8a:	80 91 cd 01 	lds	r24, 0x01CD
    4e8e:	81 60       	ori	r24, 0x01	; 1
    4e90:	80 93 cd 01 	sts	0x01CD, r24
    4e94:	e5 cf       	rjmp	.-54     	; 0x4e60 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4e96:	90 91 cd 01 	lds	r25, 0x01CD
    4e9a:	91 fb       	bst	r25, 1
    4e9c:	cc 27       	eor	r28, r28
    4e9e:	c0 f9       	bld	r28, 0
    4ea0:	81 e0       	ldi	r24, 0x01	; 1
    4ea2:	c8 27       	eor	r28, r24
    4ea4:	89 2f       	mov	r24, r25
    4ea6:	c0 fb       	bst	r28, 0
    4ea8:	81 f9       	bld	r24, 1
    4eaa:	80 93 cd 01 	sts	0x01CD, r24
            if (debug_matrix) {
    4eae:	cc 23       	and	r28, r28
    4eb0:	19 f0       	breq	.+6      	; 0x4eb8 <command_common+0x3c0>
                print("\nmatrix: on\n");
    4eb2:	85 e7       	ldi	r24, 0x75	; 117
    4eb4:	9c e0       	ldi	r25, 0x0C	; 12
    4eb6:	27 c0       	rjmp	.+78     	; 0x4f06 <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4eb8:	87 e6       	ldi	r24, 0x67	; 103
    4eba:	9c e0       	ldi	r25, 0x0C	; 12
    4ebc:	cf cf       	rjmp	.-98     	; 0x4e5c <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4ebe:	90 91 cd 01 	lds	r25, 0x01CD
    4ec2:	92 fb       	bst	r25, 2
    4ec4:	cc 27       	eor	r28, r28
    4ec6:	c0 f9       	bld	r28, 0
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	c8 27       	eor	r28, r24
    4ecc:	89 2f       	mov	r24, r25
    4ece:	c0 fb       	bst	r28, 0
    4ed0:	82 f9       	bld	r24, 2
    4ed2:	80 93 cd 01 	sts	0x01CD, r24
            if (debug_keyboard) {
    4ed6:	cc 23       	and	r28, r28
    4ed8:	19 f0       	breq	.+6      	; 0x4ee0 <command_common+0x3e8>
                print("\nkeyboard: on\n");
    4eda:	88 e5       	ldi	r24, 0x58	; 88
    4edc:	9c e0       	ldi	r25, 0x0C	; 12
    4ede:	13 c0       	rjmp	.+38     	; 0x4f06 <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4ee0:	88 e4       	ldi	r24, 0x48	; 72
    4ee2:	9c e0       	ldi	r25, 0x0C	; 12
    4ee4:	bb cf       	rjmp	.-138    	; 0x4e5c <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4ee6:	90 91 cd 01 	lds	r25, 0x01CD
    4eea:	93 fb       	bst	r25, 3
    4eec:	cc 27       	eor	r28, r28
    4eee:	c0 f9       	bld	r28, 0
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
    4ef2:	c8 27       	eor	r28, r24
    4ef4:	89 2f       	mov	r24, r25
    4ef6:	c0 fb       	bst	r28, 0
    4ef8:	83 f9       	bld	r24, 3
    4efa:	80 93 cd 01 	sts	0x01CD, r24
            if (debug_mouse) {
    4efe:	cc 23       	and	r28, r28
    4f00:	51 f0       	breq	.+20     	; 0x4f16 <command_common+0x41e>
                print("\nmouse: on\n");
    4f02:	8c e3       	ldi	r24, 0x3C	; 60
    4f04:	9c e0       	ldi	r25, 0x0C	; 12
    4f06:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
                debug_enable = true;
    4f0a:	80 91 cd 01 	lds	r24, 0x01CD
    4f0e:	81 60       	ori	r24, 0x01	; 1
    4f10:	80 93 cd 01 	sts	0x01CD, r24
    4f14:	61 c0       	rjmp	.+194    	; 0x4fd8 <command_common+0x4e0>
            } else {
                print("\nmouse: off\n");
    4f16:	8f e2       	ldi	r24, 0x2F	; 47
    4f18:	9c e0       	ldi	r25, 0x0C	; 12
    4f1a:	a0 cf       	rjmp	.-192    	; 0x4e5c <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4f1c:	80 e1       	ldi	r24, 0x10	; 16
    4f1e:	9b e0       	ldi	r25, 0x0B	; 11
    4f20:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            print_val_hex8(host_keyboard_leds());
    4f24:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <host_keyboard_leds>
    4f28:	1f 92       	push	r1
    4f2a:	8f 93       	push	r24
    4f2c:	86 ef       	ldi	r24, 0xF6	; 246
    4f2e:	9a e0       	ldi	r25, 0x0A	; 10
    4f30:	9f 93       	push	r25
    4f32:	8f 93       	push	r24
    4f34:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4f38:	80 91 0b 01 	lds	r24, 0x010B
    4f3c:	1f 92       	push	r1
    4f3e:	8f 93       	push	r24
    4f40:	8f ed       	ldi	r24, 0xDF	; 223
    4f42:	9a e0       	ldi	r25, 0x0A	; 10
    4f44:	9f 93       	push	r25
    4f46:	8f 93       	push	r24
    4f48:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
            print_val_hex8(keyboard_idle);
    4f4c:	80 91 66 01 	lds	r24, 0x0166
    4f50:	1f 92       	push	r1
    4f52:	8f 93       	push	r24
    4f54:	8c ec       	ldi	r24, 0xCC	; 204
    4f56:	9a e0       	ldi	r25, 0x0A	; 10
    4f58:	9f 93       	push	r25
    4f5a:	8f 93       	push	r24
    4f5c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4f60:	80 91 0c 01 	lds	r24, 0x010C
    4f64:	1f 92       	push	r1
    4f66:	8f 93       	push	r24
    4f68:	89 eb       	ldi	r24, 0xB9	; 185
    4f6a:	9a e0       	ldi	r25, 0x0A	; 10
    4f6c:	9f 93       	push	r25
    4f6e:	8f 93       	push	r24
    4f70:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    4f74:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <timer_read32>
    4f78:	9f 93       	push	r25
    4f7a:	8f 93       	push	r24
    4f7c:	7f 93       	push	r23
    4f7e:	6f 93       	push	r22
    4f80:	82 ea       	ldi	r24, 0xA2	; 162
    4f82:	9a e0       	ldi	r25, 0x0A	; 10
    4f84:	9f 93       	push	r25
    4f86:	8f 93       	push	r24
    4f88:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4f8c:	8d b7       	in	r24, 0x3d	; 61
    4f8e:	9e b7       	in	r25, 0x3e	; 62
    4f90:	46 96       	adiw	r24, 0x16	; 22
    4f92:	0f b6       	in	r0, 0x3f	; 63
    4f94:	f8 94       	cli
    4f96:	9e bf       	out	0x3e, r25	; 62
    4f98:	0f be       	out	0x3f, r0	; 63
    4f9a:	8d bf       	out	0x3d, r24	; 61
    4f9c:	61 cf       	rjmp	.-318    	; 0x4e60 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4f9e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4fa2:	c0 91 0c 01 	lds	r28, 0x010C
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	c8 27       	eor	r28, r24
    4faa:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    4fae:	cc 23       	and	r28, r28
    4fb0:	29 f0       	breq	.+10     	; 0x4fbc <command_common+0x4c4>
                print("NKRO: on\n");
    4fb2:	88 e9       	ldi	r24, 0x98	; 152
    4fb4:	9a e0       	ldi	r25, 0x0A	; 10
    4fb6:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    4fba:	0e c0       	rjmp	.+28     	; 0x4fd8 <command_common+0x4e0>
            } else {
                print("NKRO: off\n");
    4fbc:	8d e8       	ldi	r24, 0x8D	; 141
    4fbe:	9a e0       	ldi	r25, 0x0A	; 10
    4fc0:	4d cf       	rjmp	.-358    	; 0x4e5c <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	01 c0       	rjmp	.+2      	; 0x4fc8 <command_common+0x4d0>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4fc6:	89 53       	subi	r24, 0x39	; 57
    4fc8:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <switch_default_layer>
    4fcc:	49 cf       	rjmp	.-366    	; 0x4e60 <command_common+0x368>
            break;
        default:
            print("?");
    4fce:	8b e8       	ldi	r24, 0x8B	; 139
    4fd0:	9a e0       	ldi	r25, 0x0A	; 10
    4fd2:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            return false;
    4fd6:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4fd8:	8c 2f       	mov	r24, r28
    4fda:	cf 91       	pop	r28
    4fdc:	08 95       	ret

00004fde <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	08 95       	ret

00004fe2 <command_extra>:
    4fe2:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <command_console_extra>

00004fe6 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4fe6:	cf 93       	push	r28
    4fe8:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4fea:	80 91 dd 01 	lds	r24, 0x01DD
    4fee:	81 30       	cpi	r24, 0x01	; 1
    4ff0:	71 f0       	breq	.+28     	; 0x500e <command_proc+0x28>
    4ff2:	20 f0       	brcs	.+8      	; 0x4ffc <command_proc+0x16>
    4ff4:	82 30       	cpi	r24, 0x02	; 2
    4ff6:	09 f4       	brne	.+2      	; 0x4ffa <command_proc+0x14>
    4ff8:	4b c0       	rjmp	.+150    	; 0x5090 <command_proc+0xaa>
    4ffa:	42 c1       	rjmp	.+644    	; 0x5280 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    4ffc:	e0 91 0d 01 	lds	r30, 0x010D
    5000:	f0 91 0e 01 	lds	r31, 0x010E
    5004:	80 81       	ld	r24, Z
    5006:	82 32       	cpi	r24, 0x22	; 34
    5008:	09 f0       	breq	.+2      	; 0x500c <command_proc+0x26>
    500a:	3c c1       	rjmp	.+632    	; 0x5284 <command_proc+0x29e>
    500c:	07 c0       	rjmp	.+14     	; 0x501c <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    500e:	e0 91 0d 01 	lds	r30, 0x010D
    5012:	f0 91 0e 01 	lds	r31, 0x010E
    5016:	80 81       	ld	r24, Z
    5018:	82 32       	cpi	r24, 0x22	; 34
    501a:	61 f4       	brne	.+24     	; 0x5034 <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    501c:	8c 2f       	mov	r24, r28
    501e:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <command_extra>
    5022:	81 11       	cpse	r24, r1
    5024:	04 c0       	rjmp	.+8      	; 0x502e <command_proc+0x48>
    5026:	8c 2f       	mov	r24, r28
    5028:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <command_common>
    502c:	2f c0       	rjmp	.+94     	; 0x508c <command_proc+0xa6>
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	2c c0       	rjmp	.+88     	; 0x508c <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    5034:	8c 2f       	mov	r24, r28
    5036:	0e 94 ef 27 	call	0x4fde	; 0x4fde <command_console_extra>
    503a:	81 11       	cpse	r24, r1
    503c:	26 c0       	rjmp	.+76     	; 0x508a <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    503e:	c4 31       	cpi	r28, 0x14	; 20
    5040:	e1 f0       	breq	.+56     	; 0x507a <command_proc+0x94>
    5042:	70 f4       	brcc	.+28     	; 0x5060 <command_proc+0x7a>
    5044:	cb 30       	cpi	r28, 0x0B	; 11
    5046:	81 f0       	breq	.+32     	; 0x5068 <command_proc+0x82>
    5048:	c0 31       	cpi	r28, 0x10	; 16
    504a:	d1 f4       	brne	.+52     	; 0x5080 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    504c:	0e 94 24 24 	call	0x4848	; 0x4848 <mousekey_console_help>
            print("M> ");
    5050:	8f e6       	ldi	r24, 0x6F	; 111
    5052:	98 e0       	ldi	r25, 0x08	; 8
    5054:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
            command_state = MOUSEKEY;
    5058:	82 e0       	ldi	r24, 0x02	; 2
    505a:	80 93 dd 01 	sts	0x01DD, r24
    505e:	15 c0       	rjmp	.+42     	; 0x508a <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5060:	c9 32       	cpi	r28, 0x29	; 41
    5062:	59 f0       	breq	.+22     	; 0x507a <command_proc+0x94>
    5064:	c8 33       	cpi	r28, 0x38	; 56
    5066:	61 f4       	brne	.+24     	; 0x5080 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5068:	8c e7       	ldi	r24, 0x7C	; 124
    506a:	98 e0       	ldi	r25, 0x08	; 8
    506c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5070:	83 e7       	ldi	r24, 0x73	; 115
    5072:	98 e0       	ldi	r25, 0x08	; 8
    5074:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    5078:	08 c0       	rjmp	.+16     	; 0x508a <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    507a:	10 92 dd 01 	sts	0x01DD, r1
    507e:	04 c1       	rjmp	.+520    	; 0x5288 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    5080:	8d e6       	ldi	r24, 0x6D	; 109
    5082:	98 e0       	ldi	r25, 0x08	; 8
    5084:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    5088:	ff c0       	rjmp	.+510    	; 0x5288 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    508a:	81 e0       	ldi	r24, 0x01	; 1
    508c:	81 70       	andi	r24, 0x01	; 1
    508e:	fe c0       	rjmp	.+508    	; 0x528c <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5090:	c4 32       	cpi	r28, 0x24	; 36
    5092:	28 f5       	brcc	.+74     	; 0x50de <command_proc+0xf8>
    5094:	ce 31       	cpi	r28, 0x1E	; 30
    5096:	08 f0       	brcs	.+2      	; 0x509a <command_proc+0xb4>
    5098:	c1 c0       	rjmp	.+386    	; 0x521c <command_proc+0x236>
    509a:	cb 30       	cpi	r28, 0x0B	; 11
    509c:	a1 f1       	breq	.+104    	; 0x5106 <command_proc+0x120>
    509e:	d0 f4       	brcc	.+52     	; 0x50d4 <command_proc+0xee>
    50a0:	c7 30       	cpi	r28, 0x07	; 7
    50a2:	09 f0       	breq	.+2      	; 0x50a6 <command_proc+0xc0>
    50a4:	d3 c0       	rjmp	.+422    	; 0x524c <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    50a6:	8e e1       	ldi	r24, 0x1E	; 30
    50a8:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    50ac:	82 e3       	ldi	r24, 0x32	; 50
    50ae:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    50b2:	8a e0       	ldi	r24, 0x0A	; 10
    50b4:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    50b8:	84 e1       	ldi	r24, 0x14	; 20
    50ba:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    50be:	88 e0       	ldi	r24, 0x08	; 8
    50c0:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    50c4:	88 e2       	ldi	r24, 0x28	; 40
    50c6:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    50ca:	83 e1       	ldi	r24, 0x13	; 19
    50cc:	97 e0       	ldi	r25, 0x07	; 7
    50ce:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    50d2:	bf c0       	rjmp	.+382    	; 0x5252 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    50d4:	c3 31       	cpi	r28, 0x13	; 19
    50d6:	49 f1       	breq	.+82     	; 0x512a <command_proc+0x144>
    50d8:	c4 31       	cpi	r28, 0x14	; 20
    50da:	c1 f0       	breq	.+48     	; 0x510c <command_proc+0x126>
    50dc:	b7 c0       	rjmp	.+366    	; 0x524c <command_proc+0x266>
    50de:	cb 34       	cpi	r28, 0x4B	; 75
    50e0:	09 f4       	brne	.+2      	; 0x50e4 <command_proc+0xfe>
    50e2:	a9 c0       	rjmp	.+338    	; 0x5236 <command_proc+0x250>
    50e4:	28 f4       	brcc	.+10     	; 0x50f0 <command_proc+0x10a>
    50e6:	c9 32       	cpi	r28, 0x29	; 41
    50e8:	89 f0       	breq	.+34     	; 0x510c <command_proc+0x126>
    50ea:	c8 33       	cpi	r28, 0x38	; 56
    50ec:	61 f0       	breq	.+24     	; 0x5106 <command_proc+0x120>
    50ee:	ae c0       	rjmp	.+348    	; 0x524c <command_proc+0x266>
    50f0:	c1 35       	cpi	r28, 0x51	; 81
    50f2:	09 f4       	brne	.+2      	; 0x50f6 <command_proc+0x110>
    50f4:	9e c0       	rjmp	.+316    	; 0x5232 <command_proc+0x24c>
    50f6:	c2 35       	cpi	r28, 0x52	; 82
    50f8:	09 f4       	brne	.+2      	; 0x50fc <command_proc+0x116>
    50fa:	99 c0       	rjmp	.+306    	; 0x522e <command_proc+0x248>
    50fc:	ce 34       	cpi	r28, 0x4E	; 78
    50fe:	09 f0       	breq	.+2      	; 0x5102 <command_proc+0x11c>
    5100:	a5 c0       	rjmp	.+330    	; 0x524c <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5102:	6a e0       	ldi	r22, 0x0A	; 10
    5104:	9e c0       	rjmp	.+316    	; 0x5242 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5106:	0e 94 24 24 	call	0x4848	; 0x4848 <mousekey_console_help>
    510a:	a3 c0       	rjmp	.+326    	; 0x5252 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    510c:	80 91 dc 01 	lds	r24, 0x01DC
    5110:	88 23       	and	r24, r24
    5112:	19 f0       	breq	.+6      	; 0x511a <command_proc+0x134>
                mousekey_param = 0;
    5114:	10 92 dc 01 	sts	0x01DC, r1
    5118:	9c c0       	rjmp	.+312    	; 0x5252 <command_proc+0x26c>
            } else {
                print("C> ");
    511a:	80 e2       	ldi	r24, 0x20	; 32
    511c:	97 e0       	ldi	r25, 0x07	; 7
    511e:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
                command_state = CONSOLE;
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	80 93 dd 01 	sts	0x01DD, r24
    5128:	b1 c0       	rjmp	.+354    	; 0x528c <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    512a:	8a ef       	ldi	r24, 0xFA	; 250
    512c:	96 e0       	ldi	r25, 0x06	; 6
    512e:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5132:	88 ee       	ldi	r24, 0xE8	; 232
    5134:	96 e0       	ldi	r25, 0x06	; 6
    5136:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    513a:	80 91 14 01 	lds	r24, 0x0114
    513e:	1f 92       	push	r1
    5140:	8f 93       	push	r24
    5142:	85 ee       	ldi	r24, 0xE5	; 229
    5144:	96 e0       	ldi	r25, 0x06	; 6
    5146:	9f 93       	push	r25
    5148:	8f 93       	push	r24
    514a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    514e:	83 ee       	ldi	r24, 0xE3	; 227
    5150:	96 e0       	ldi	r25, 0x06	; 6
    5152:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5156:	81 ed       	ldi	r24, 0xD1	; 209
    5158:	96 e0       	ldi	r25, 0x06	; 6
    515a:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    515e:	80 91 13 01 	lds	r24, 0x0113
    5162:	1f 92       	push	r1
    5164:	8f 93       	push	r24
    5166:	8e ec       	ldi	r24, 0xCE	; 206
    5168:	96 e0       	ldi	r25, 0x06	; 6
    516a:	9f 93       	push	r25
    516c:	8f 93       	push	r24
    516e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    5172:	8c ec       	ldi	r24, 0xCC	; 204
    5174:	96 e0       	ldi	r25, 0x06	; 6
    5176:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    517a:	8d eb       	ldi	r24, 0xBD	; 189
    517c:	96 e0       	ldi	r25, 0x06	; 6
    517e:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    5182:	80 91 12 01 	lds	r24, 0x0112
    5186:	1f 92       	push	r1
    5188:	8f 93       	push	r24
    518a:	8a eb       	ldi	r24, 0xBA	; 186
    518c:	96 e0       	ldi	r25, 0x06	; 6
    518e:	9f 93       	push	r25
    5190:	8f 93       	push	r24
    5192:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    5196:	88 eb       	ldi	r24, 0xB8	; 184
    5198:	96 e0       	ldi	r25, 0x06	; 6
    519a:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    519e:	87 ea       	ldi	r24, 0xA7	; 167
    51a0:	96 e0       	ldi	r25, 0x06	; 6
    51a2:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    51a6:	80 91 11 01 	lds	r24, 0x0111
    51aa:	1f 92       	push	r1
    51ac:	8f 93       	push	r24
    51ae:	84 ea       	ldi	r24, 0xA4	; 164
    51b0:	96 e0       	ldi	r25, 0x06	; 6
    51b2:	9f 93       	push	r25
    51b4:	8f 93       	push	r24
    51b6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    51ba:	82 ea       	ldi	r24, 0xA2	; 162
    51bc:	96 e0       	ldi	r25, 0x06	; 6
    51be:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    51c2:	8d e8       	ldi	r24, 0x8D	; 141
    51c4:	96 e0       	ldi	r25, 0x06	; 6
    51c6:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    51ca:	80 91 10 01 	lds	r24, 0x0110
    51ce:	1f 92       	push	r1
    51d0:	8f 93       	push	r24
    51d2:	8a e8       	ldi	r24, 0x8A	; 138
    51d4:	96 e0       	ldi	r25, 0x06	; 6
    51d6:	9f 93       	push	r25
    51d8:	8f 93       	push	r24
    51da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    51de:	88 e8       	ldi	r24, 0x88	; 136
    51e0:	96 e0       	ldi	r25, 0x06	; 6
    51e2:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    51e6:	81 e7       	ldi	r24, 0x71	; 113
    51e8:	96 e0       	ldi	r25, 0x06	; 6
    51ea:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    51ee:	80 91 0f 01 	lds	r24, 0x010F
    51f2:	1f 92       	push	r1
    51f4:	8f 93       	push	r24
    51f6:	8e e6       	ldi	r24, 0x6E	; 110
    51f8:	96 e0       	ldi	r25, 0x06	; 6
    51fa:	9f 93       	push	r25
    51fc:	8f 93       	push	r24
    51fe:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    5202:	8c e6       	ldi	r24, 0x6C	; 108
    5204:	96 e0       	ldi	r25, 0x06	; 6
    5206:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
    520a:	8d b7       	in	r24, 0x3d	; 61
    520c:	9e b7       	in	r25, 0x3e	; 62
    520e:	48 96       	adiw	r24, 0x18	; 24
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	f8 94       	cli
    5214:	9e bf       	out	0x3e, r25	; 62
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	8d bf       	out	0x3d, r24	; 61
    521a:	1b c0       	rjmp	.+54     	; 0x5252 <command_proc+0x26c>
    521c:	ce 51       	subi	r28, 0x1E	; 30
    521e:	ec 2f       	mov	r30, r28
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	e2 5d       	subi	r30, 0xD2	; 210
    5224:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5226:	80 81       	ld	r24, Z
    5228:	80 93 dc 01 	sts	0x01DC, r24
    522c:	12 c0       	rjmp	.+36     	; 0x5252 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    522e:	61 e0       	ldi	r22, 0x01	; 1
    5230:	03 c0       	rjmp	.+6      	; 0x5238 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5232:	61 e0       	ldi	r22, 0x01	; 1
    5234:	06 c0       	rjmp	.+12     	; 0x5242 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5236:	6a e0       	ldi	r22, 0x0A	; 10
    5238:	80 91 dc 01 	lds	r24, 0x01DC
    523c:	0e 94 3b 24 	call	0x4876	; 0x4876 <mousekey_param_inc>
    5240:	08 c0       	rjmp	.+16     	; 0x5252 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5242:	80 91 dc 01 	lds	r24, 0x01DC
    5246:	0e 94 de 24 	call	0x49bc	; 0x49bc <mousekey_param_dec>
    524a:	03 c0       	rjmp	.+6      	; 0x5252 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    524c:	81 e1       	ldi	r24, 0x11	; 17
    524e:	97 e0       	ldi	r25, 0x07	; 7
    5250:	13 c0       	rjmp	.+38     	; 0x5278 <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    5252:	80 91 dc 01 	lds	r24, 0x01DC
    5256:	88 23       	and	r24, r24
    5258:	69 f0       	breq	.+26     	; 0x5274 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    525a:	1f 92       	push	r1
    525c:	8f 93       	push	r24
    525e:	8b e0       	ldi	r24, 0x0B	; 11
    5260:	97 e0       	ldi	r25, 0x07	; 7
    5262:	9f 93       	push	r25
    5264:	8f 93       	push	r24
    5266:	0e 94 4c 07 	call	0xe98	; 0xe98 <__xprintf>
    526a:	0f 90       	pop	r0
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	0f 90       	pop	r0
    5272:	04 c0       	rjmp	.+8      	; 0x527c <command_proc+0x296>
    } else {
        print("M>" );
    5274:	88 e0       	ldi	r24, 0x08	; 8
    5276:	97 e0       	ldi	r25, 0x07	; 7
    5278:	0e 94 b3 06 	call	0xd66	; 0xd66 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	06 c0       	rjmp	.+12     	; 0x528c <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5280:	10 92 dd 01 	sts	0x01DD, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5284:	80 e0       	ldi	r24, 0x00	; 0
    5286:	02 c0       	rjmp	.+4      	; 0x528c <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	00 cf       	rjmp	.-512    	; 0x508c <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    528c:	cf 91       	pop	r28
    528e:	08 95       	ret

00005290 <__fixsfsi>:
    5290:	0e 94 4f 29 	call	0x529e	; 0x529e <__fixunssfsi>
    5294:	68 94       	set
    5296:	b1 11       	cpse	r27, r1
    5298:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__fp_szero>
    529c:	08 95       	ret

0000529e <__fixunssfsi>:
    529e:	0e 94 c3 29 	call	0x5386	; 0x5386 <__fp_splitA>
    52a2:	88 f0       	brcs	.+34     	; 0x52c6 <__fixunssfsi+0x28>
    52a4:	9f 57       	subi	r25, 0x7F	; 127
    52a6:	98 f0       	brcs	.+38     	; 0x52ce <__fixunssfsi+0x30>
    52a8:	b9 2f       	mov	r27, r25
    52aa:	99 27       	eor	r25, r25
    52ac:	b7 51       	subi	r27, 0x17	; 23
    52ae:	b0 f0       	brcs	.+44     	; 0x52dc <__fixunssfsi+0x3e>
    52b0:	e1 f0       	breq	.+56     	; 0x52ea <__fixunssfsi+0x4c>
    52b2:	66 0f       	add	r22, r22
    52b4:	77 1f       	adc	r23, r23
    52b6:	88 1f       	adc	r24, r24
    52b8:	99 1f       	adc	r25, r25
    52ba:	1a f0       	brmi	.+6      	; 0x52c2 <__fixunssfsi+0x24>
    52bc:	ba 95       	dec	r27
    52be:	c9 f7       	brne	.-14     	; 0x52b2 <__fixunssfsi+0x14>
    52c0:	14 c0       	rjmp	.+40     	; 0x52ea <__fixunssfsi+0x4c>
    52c2:	b1 30       	cpi	r27, 0x01	; 1
    52c4:	91 f0       	breq	.+36     	; 0x52ea <__fixunssfsi+0x4c>
    52c6:	0e 94 dd 29 	call	0x53ba	; 0x53ba <__fp_zero>
    52ca:	b1 e0       	ldi	r27, 0x01	; 1
    52cc:	08 95       	ret
    52ce:	0c 94 dd 29 	jmp	0x53ba	; 0x53ba <__fp_zero>
    52d2:	67 2f       	mov	r22, r23
    52d4:	78 2f       	mov	r23, r24
    52d6:	88 27       	eor	r24, r24
    52d8:	b8 5f       	subi	r27, 0xF8	; 248
    52da:	39 f0       	breq	.+14     	; 0x52ea <__fixunssfsi+0x4c>
    52dc:	b9 3f       	cpi	r27, 0xF9	; 249
    52de:	cc f3       	brlt	.-14     	; 0x52d2 <__fixunssfsi+0x34>
    52e0:	86 95       	lsr	r24
    52e2:	77 95       	ror	r23
    52e4:	67 95       	ror	r22
    52e6:	b3 95       	inc	r27
    52e8:	d9 f7       	brne	.-10     	; 0x52e0 <__fixunssfsi+0x42>
    52ea:	3e f4       	brtc	.+14     	; 0x52fa <__fixunssfsi+0x5c>
    52ec:	90 95       	com	r25
    52ee:	80 95       	com	r24
    52f0:	70 95       	com	r23
    52f2:	61 95       	neg	r22
    52f4:	7f 4f       	sbci	r23, 0xFF	; 255
    52f6:	8f 4f       	sbci	r24, 0xFF	; 255
    52f8:	9f 4f       	sbci	r25, 0xFF	; 255
    52fa:	08 95       	ret

000052fc <__floatunsisf>:
    52fc:	e8 94       	clt
    52fe:	09 c0       	rjmp	.+18     	; 0x5312 <__floatsisf+0x12>

00005300 <__floatsisf>:
    5300:	97 fb       	bst	r25, 7
    5302:	3e f4       	brtc	.+14     	; 0x5312 <__floatsisf+0x12>
    5304:	90 95       	com	r25
    5306:	80 95       	com	r24
    5308:	70 95       	com	r23
    530a:	61 95       	neg	r22
    530c:	7f 4f       	sbci	r23, 0xFF	; 255
    530e:	8f 4f       	sbci	r24, 0xFF	; 255
    5310:	9f 4f       	sbci	r25, 0xFF	; 255
    5312:	99 23       	and	r25, r25
    5314:	a9 f0       	breq	.+42     	; 0x5340 <__floatsisf+0x40>
    5316:	f9 2f       	mov	r31, r25
    5318:	96 e9       	ldi	r25, 0x96	; 150
    531a:	bb 27       	eor	r27, r27
    531c:	93 95       	inc	r25
    531e:	f6 95       	lsr	r31
    5320:	87 95       	ror	r24
    5322:	77 95       	ror	r23
    5324:	67 95       	ror	r22
    5326:	b7 95       	ror	r27
    5328:	f1 11       	cpse	r31, r1
    532a:	f8 cf       	rjmp	.-16     	; 0x531c <__floatsisf+0x1c>
    532c:	fa f4       	brpl	.+62     	; 0x536c <__floatsisf+0x6c>
    532e:	bb 0f       	add	r27, r27
    5330:	11 f4       	brne	.+4      	; 0x5336 <__floatsisf+0x36>
    5332:	60 ff       	sbrs	r22, 0
    5334:	1b c0       	rjmp	.+54     	; 0x536c <__floatsisf+0x6c>
    5336:	6f 5f       	subi	r22, 0xFF	; 255
    5338:	7f 4f       	sbci	r23, 0xFF	; 255
    533a:	8f 4f       	sbci	r24, 0xFF	; 255
    533c:	9f 4f       	sbci	r25, 0xFF	; 255
    533e:	16 c0       	rjmp	.+44     	; 0x536c <__floatsisf+0x6c>
    5340:	88 23       	and	r24, r24
    5342:	11 f0       	breq	.+4      	; 0x5348 <__floatsisf+0x48>
    5344:	96 e9       	ldi	r25, 0x96	; 150
    5346:	11 c0       	rjmp	.+34     	; 0x536a <__floatsisf+0x6a>
    5348:	77 23       	and	r23, r23
    534a:	21 f0       	breq	.+8      	; 0x5354 <__floatsisf+0x54>
    534c:	9e e8       	ldi	r25, 0x8E	; 142
    534e:	87 2f       	mov	r24, r23
    5350:	76 2f       	mov	r23, r22
    5352:	05 c0       	rjmp	.+10     	; 0x535e <__floatsisf+0x5e>
    5354:	66 23       	and	r22, r22
    5356:	71 f0       	breq	.+28     	; 0x5374 <__floatsisf+0x74>
    5358:	96 e8       	ldi	r25, 0x86	; 134
    535a:	86 2f       	mov	r24, r22
    535c:	70 e0       	ldi	r23, 0x00	; 0
    535e:	60 e0       	ldi	r22, 0x00	; 0
    5360:	2a f0       	brmi	.+10     	; 0x536c <__floatsisf+0x6c>
    5362:	9a 95       	dec	r25
    5364:	66 0f       	add	r22, r22
    5366:	77 1f       	adc	r23, r23
    5368:	88 1f       	adc	r24, r24
    536a:	da f7       	brpl	.-10     	; 0x5362 <__floatsisf+0x62>
    536c:	88 0f       	add	r24, r24
    536e:	96 95       	lsr	r25
    5370:	87 95       	ror	r24
    5372:	97 f9       	bld	r25, 7
    5374:	08 95       	ret

00005376 <__fp_split3>:
    5376:	57 fd       	sbrc	r21, 7
    5378:	90 58       	subi	r25, 0x80	; 128
    537a:	44 0f       	add	r20, r20
    537c:	55 1f       	adc	r21, r21
    537e:	59 f0       	breq	.+22     	; 0x5396 <__fp_splitA+0x10>
    5380:	5f 3f       	cpi	r21, 0xFF	; 255
    5382:	71 f0       	breq	.+28     	; 0x53a0 <__fp_splitA+0x1a>
    5384:	47 95       	ror	r20

00005386 <__fp_splitA>:
    5386:	88 0f       	add	r24, r24
    5388:	97 fb       	bst	r25, 7
    538a:	99 1f       	adc	r25, r25
    538c:	61 f0       	breq	.+24     	; 0x53a6 <__fp_splitA+0x20>
    538e:	9f 3f       	cpi	r25, 0xFF	; 255
    5390:	79 f0       	breq	.+30     	; 0x53b0 <__fp_splitA+0x2a>
    5392:	87 95       	ror	r24
    5394:	08 95       	ret
    5396:	12 16       	cp	r1, r18
    5398:	13 06       	cpc	r1, r19
    539a:	14 06       	cpc	r1, r20
    539c:	55 1f       	adc	r21, r21
    539e:	f2 cf       	rjmp	.-28     	; 0x5384 <__fp_split3+0xe>
    53a0:	46 95       	lsr	r20
    53a2:	f1 df       	rcall	.-30     	; 0x5386 <__fp_splitA>
    53a4:	08 c0       	rjmp	.+16     	; 0x53b6 <__fp_splitA+0x30>
    53a6:	16 16       	cp	r1, r22
    53a8:	17 06       	cpc	r1, r23
    53aa:	18 06       	cpc	r1, r24
    53ac:	99 1f       	adc	r25, r25
    53ae:	f1 cf       	rjmp	.-30     	; 0x5392 <__fp_splitA+0xc>
    53b0:	86 95       	lsr	r24
    53b2:	71 05       	cpc	r23, r1
    53b4:	61 05       	cpc	r22, r1
    53b6:	08 94       	sec
    53b8:	08 95       	ret

000053ba <__fp_zero>:
    53ba:	e8 94       	clt

000053bc <__fp_szero>:
    53bc:	bb 27       	eor	r27, r27
    53be:	66 27       	eor	r22, r22
    53c0:	77 27       	eor	r23, r23
    53c2:	cb 01       	movw	r24, r22
    53c4:	97 f9       	bld	r25, 7
    53c6:	08 95       	ret

000053c8 <__mulsf3>:
    53c8:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsf3x>
    53cc:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__fp_round>
    53d0:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <__fp_pscA>
    53d4:	38 f0       	brcs	.+14     	; 0x53e4 <__mulsf3+0x1c>
    53d6:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__fp_pscB>
    53da:	20 f0       	brcs	.+8      	; 0x53e4 <__mulsf3+0x1c>
    53dc:	95 23       	and	r25, r21
    53de:	11 f0       	breq	.+4      	; 0x53e4 <__mulsf3+0x1c>
    53e0:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__fp_inf>
    53e4:	0c 94 57 2a 	jmp	0x54ae	; 0x54ae <__fp_nan>
    53e8:	11 24       	eor	r1, r1
    53ea:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__fp_szero>

000053ee <__mulsf3x>:
    53ee:	0e 94 bb 29 	call	0x5376	; 0x5376 <__fp_split3>
    53f2:	70 f3       	brcs	.-36     	; 0x53d0 <__mulsf3+0x8>

000053f4 <__mulsf3_pse>:
    53f4:	95 9f       	mul	r25, r21
    53f6:	c1 f3       	breq	.-16     	; 0x53e8 <__mulsf3+0x20>
    53f8:	95 0f       	add	r25, r21
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	55 1f       	adc	r21, r21
    53fe:	62 9f       	mul	r22, r18
    5400:	f0 01       	movw	r30, r0
    5402:	72 9f       	mul	r23, r18
    5404:	bb 27       	eor	r27, r27
    5406:	f0 0d       	add	r31, r0
    5408:	b1 1d       	adc	r27, r1
    540a:	63 9f       	mul	r22, r19
    540c:	aa 27       	eor	r26, r26
    540e:	f0 0d       	add	r31, r0
    5410:	b1 1d       	adc	r27, r1
    5412:	aa 1f       	adc	r26, r26
    5414:	64 9f       	mul	r22, r20
    5416:	66 27       	eor	r22, r22
    5418:	b0 0d       	add	r27, r0
    541a:	a1 1d       	adc	r26, r1
    541c:	66 1f       	adc	r22, r22
    541e:	82 9f       	mul	r24, r18
    5420:	22 27       	eor	r18, r18
    5422:	b0 0d       	add	r27, r0
    5424:	a1 1d       	adc	r26, r1
    5426:	62 1f       	adc	r22, r18
    5428:	73 9f       	mul	r23, r19
    542a:	b0 0d       	add	r27, r0
    542c:	a1 1d       	adc	r26, r1
    542e:	62 1f       	adc	r22, r18
    5430:	83 9f       	mul	r24, r19
    5432:	a0 0d       	add	r26, r0
    5434:	61 1d       	adc	r22, r1
    5436:	22 1f       	adc	r18, r18
    5438:	74 9f       	mul	r23, r20
    543a:	33 27       	eor	r19, r19
    543c:	a0 0d       	add	r26, r0
    543e:	61 1d       	adc	r22, r1
    5440:	23 1f       	adc	r18, r19
    5442:	84 9f       	mul	r24, r20
    5444:	60 0d       	add	r22, r0
    5446:	21 1d       	adc	r18, r1
    5448:	82 2f       	mov	r24, r18
    544a:	76 2f       	mov	r23, r22
    544c:	6a 2f       	mov	r22, r26
    544e:	11 24       	eor	r1, r1
    5450:	9f 57       	subi	r25, 0x7F	; 127
    5452:	50 40       	sbci	r21, 0x00	; 0
    5454:	9a f0       	brmi	.+38     	; 0x547c <__mulsf3_pse+0x88>
    5456:	f1 f0       	breq	.+60     	; 0x5494 <__mulsf3_pse+0xa0>
    5458:	88 23       	and	r24, r24
    545a:	4a f0       	brmi	.+18     	; 0x546e <__mulsf3_pse+0x7a>
    545c:	ee 0f       	add	r30, r30
    545e:	ff 1f       	adc	r31, r31
    5460:	bb 1f       	adc	r27, r27
    5462:	66 1f       	adc	r22, r22
    5464:	77 1f       	adc	r23, r23
    5466:	88 1f       	adc	r24, r24
    5468:	91 50       	subi	r25, 0x01	; 1
    546a:	50 40       	sbci	r21, 0x00	; 0
    546c:	a9 f7       	brne	.-22     	; 0x5458 <__mulsf3_pse+0x64>
    546e:	9e 3f       	cpi	r25, 0xFE	; 254
    5470:	51 05       	cpc	r21, r1
    5472:	80 f0       	brcs	.+32     	; 0x5494 <__mulsf3_pse+0xa0>
    5474:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__fp_inf>
    5478:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__fp_szero>
    547c:	5f 3f       	cpi	r21, 0xFF	; 255
    547e:	e4 f3       	brlt	.-8      	; 0x5478 <__mulsf3_pse+0x84>
    5480:	98 3e       	cpi	r25, 0xE8	; 232
    5482:	d4 f3       	brlt	.-12     	; 0x5478 <__mulsf3_pse+0x84>
    5484:	86 95       	lsr	r24
    5486:	77 95       	ror	r23
    5488:	67 95       	ror	r22
    548a:	b7 95       	ror	r27
    548c:	f7 95       	ror	r31
    548e:	e7 95       	ror	r30
    5490:	9f 5f       	subi	r25, 0xFF	; 255
    5492:	c1 f7       	brne	.-16     	; 0x5484 <__mulsf3_pse+0x90>
    5494:	fe 2b       	or	r31, r30
    5496:	88 0f       	add	r24, r24
    5498:	91 1d       	adc	r25, r1
    549a:	96 95       	lsr	r25
    549c:	87 95       	ror	r24
    549e:	97 f9       	bld	r25, 7
    54a0:	08 95       	ret

000054a2 <__fp_inf>:
    54a2:	97 f9       	bld	r25, 7
    54a4:	9f 67       	ori	r25, 0x7F	; 127
    54a6:	80 e8       	ldi	r24, 0x80	; 128
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	60 e0       	ldi	r22, 0x00	; 0
    54ac:	08 95       	ret

000054ae <__fp_nan>:
    54ae:	9f ef       	ldi	r25, 0xFF	; 255
    54b0:	80 ec       	ldi	r24, 0xC0	; 192
    54b2:	08 95       	ret

000054b4 <__fp_pscA>:
    54b4:	00 24       	eor	r0, r0
    54b6:	0a 94       	dec	r0
    54b8:	16 16       	cp	r1, r22
    54ba:	17 06       	cpc	r1, r23
    54bc:	18 06       	cpc	r1, r24
    54be:	09 06       	cpc	r0, r25
    54c0:	08 95       	ret

000054c2 <__fp_pscB>:
    54c2:	00 24       	eor	r0, r0
    54c4:	0a 94       	dec	r0
    54c6:	12 16       	cp	r1, r18
    54c8:	13 06       	cpc	r1, r19
    54ca:	14 06       	cpc	r1, r20
    54cc:	05 06       	cpc	r0, r21
    54ce:	08 95       	ret

000054d0 <__fp_round>:
    54d0:	09 2e       	mov	r0, r25
    54d2:	03 94       	inc	r0
    54d4:	00 0c       	add	r0, r0
    54d6:	11 f4       	brne	.+4      	; 0x54dc <__fp_round+0xc>
    54d8:	88 23       	and	r24, r24
    54da:	52 f0       	brmi	.+20     	; 0x54f0 <__fp_round+0x20>
    54dc:	bb 0f       	add	r27, r27
    54de:	40 f4       	brcc	.+16     	; 0x54f0 <__fp_round+0x20>
    54e0:	bf 2b       	or	r27, r31
    54e2:	11 f4       	brne	.+4      	; 0x54e8 <__fp_round+0x18>
    54e4:	60 ff       	sbrs	r22, 0
    54e6:	04 c0       	rjmp	.+8      	; 0x54f0 <__fp_round+0x20>
    54e8:	6f 5f       	subi	r22, 0xFF	; 255
    54ea:	7f 4f       	sbci	r23, 0xFF	; 255
    54ec:	8f 4f       	sbci	r24, 0xFF	; 255
    54ee:	9f 4f       	sbci	r25, 0xFF	; 255
    54f0:	08 95       	ret

000054f2 <__udivmodqi4>:
    54f2:	99 1b       	sub	r25, r25
    54f4:	79 e0       	ldi	r23, 0x09	; 9
    54f6:	04 c0       	rjmp	.+8      	; 0x5500 <__udivmodqi4_ep>

000054f8 <__udivmodqi4_loop>:
    54f8:	99 1f       	adc	r25, r25
    54fa:	96 17       	cp	r25, r22
    54fc:	08 f0       	brcs	.+2      	; 0x5500 <__udivmodqi4_ep>
    54fe:	96 1b       	sub	r25, r22

00005500 <__udivmodqi4_ep>:
    5500:	88 1f       	adc	r24, r24
    5502:	7a 95       	dec	r23
    5504:	c9 f7       	brne	.-14     	; 0x54f8 <__udivmodqi4_loop>
    5506:	80 95       	com	r24
    5508:	08 95       	ret

0000550a <__divmodhi4>:
    550a:	97 fb       	bst	r25, 7
    550c:	07 2e       	mov	r0, r23
    550e:	16 f4       	brtc	.+4      	; 0x5514 <__divmodhi4+0xa>
    5510:	00 94       	com	r0
    5512:	07 d0       	rcall	.+14     	; 0x5522 <__divmodhi4_neg1>
    5514:	77 fd       	sbrc	r23, 7
    5516:	09 d0       	rcall	.+18     	; 0x552a <__divmodhi4_neg2>
    5518:	0e 94 9f 2a 	call	0x553e	; 0x553e <__udivmodhi4>
    551c:	07 fc       	sbrc	r0, 7
    551e:	05 d0       	rcall	.+10     	; 0x552a <__divmodhi4_neg2>
    5520:	3e f4       	brtc	.+14     	; 0x5530 <__divmodhi4_exit>

00005522 <__divmodhi4_neg1>:
    5522:	90 95       	com	r25
    5524:	81 95       	neg	r24
    5526:	9f 4f       	sbci	r25, 0xFF	; 255
    5528:	08 95       	ret

0000552a <__divmodhi4_neg2>:
    552a:	70 95       	com	r23
    552c:	61 95       	neg	r22
    552e:	7f 4f       	sbci	r23, 0xFF	; 255

00005530 <__divmodhi4_exit>:
    5530:	08 95       	ret

00005532 <__tablejump2__>:
    5532:	ee 0f       	add	r30, r30
    5534:	ff 1f       	adc	r31, r31
    5536:	05 90       	lpm	r0, Z+
    5538:	f4 91       	lpm	r31, Z
    553a:	e0 2d       	mov	r30, r0
    553c:	09 94       	ijmp

0000553e <__udivmodhi4>:
    553e:	aa 1b       	sub	r26, r26
    5540:	bb 1b       	sub	r27, r27
    5542:	51 e1       	ldi	r21, 0x11	; 17
    5544:	07 c0       	rjmp	.+14     	; 0x5554 <__udivmodhi4_ep>

00005546 <__udivmodhi4_loop>:
    5546:	aa 1f       	adc	r26, r26
    5548:	bb 1f       	adc	r27, r27
    554a:	a6 17       	cp	r26, r22
    554c:	b7 07       	cpc	r27, r23
    554e:	10 f0       	brcs	.+4      	; 0x5554 <__udivmodhi4_ep>
    5550:	a6 1b       	sub	r26, r22
    5552:	b7 0b       	sbc	r27, r23

00005554 <__udivmodhi4_ep>:
    5554:	88 1f       	adc	r24, r24
    5556:	99 1f       	adc	r25, r25
    5558:	5a 95       	dec	r21
    555a:	a9 f7       	brne	.-22     	; 0x5546 <__udivmodhi4_loop>
    555c:	80 95       	com	r24
    555e:	90 95       	com	r25
    5560:	bc 01       	movw	r22, r24
    5562:	cd 01       	movw	r24, r26
    5564:	08 95       	ret

00005566 <eeprom_read_byte>:
    5566:	f9 99       	sbic	0x1f, 1	; 31
    5568:	fe cf       	rjmp	.-4      	; 0x5566 <eeprom_read_byte>
    556a:	92 bd       	out	0x22, r25	; 34
    556c:	81 bd       	out	0x21, r24	; 33
    556e:	f8 9a       	sbi	0x1f, 0	; 31
    5570:	99 27       	eor	r25, r25
    5572:	80 b5       	in	r24, 0x20	; 32
    5574:	08 95       	ret

00005576 <eeprom_read_word>:
    5576:	a8 e1       	ldi	r26, 0x18	; 24
    5578:	b0 e0       	ldi	r27, 0x00	; 0
    557a:	42 e0       	ldi	r20, 0x02	; 2
    557c:	50 e0       	ldi	r21, 0x00	; 0
    557e:	0c 94 d6 2a 	jmp	0x55ac	; 0x55ac <eeprom_read_blraw>

00005582 <eeprom_write_byte>:
    5582:	26 2f       	mov	r18, r22

00005584 <eeprom_write_r18>:
    5584:	f9 99       	sbic	0x1f, 1	; 31
    5586:	fe cf       	rjmp	.-4      	; 0x5584 <eeprom_write_r18>
    5588:	1f ba       	out	0x1f, r1	; 31
    558a:	92 bd       	out	0x22, r25	; 34
    558c:	81 bd       	out	0x21, r24	; 33
    558e:	20 bd       	out	0x20, r18	; 32
    5590:	0f b6       	in	r0, 0x3f	; 63
    5592:	f8 94       	cli
    5594:	fa 9a       	sbi	0x1f, 2	; 31
    5596:	f9 9a       	sbi	0x1f, 1	; 31
    5598:	0f be       	out	0x3f, r0	; 63
    559a:	01 96       	adiw	r24, 0x01	; 1
    559c:	08 95       	ret

0000559e <eeprom_write_word>:
    559e:	0e 94 c1 2a 	call	0x5582	; 0x5582 <eeprom_write_byte>
    55a2:	27 2f       	mov	r18, r23
    55a4:	0c 94 c2 2a 	jmp	0x5584	; 0x5584 <eeprom_write_r18>

000055a8 <eeprom_read_block>:
    55a8:	dc 01       	movw	r26, r24
    55aa:	cb 01       	movw	r24, r22

000055ac <eeprom_read_blraw>:
    55ac:	fc 01       	movw	r30, r24
    55ae:	f9 99       	sbic	0x1f, 1	; 31
    55b0:	fe cf       	rjmp	.-4      	; 0x55ae <eeprom_read_blraw+0x2>
    55b2:	06 c0       	rjmp	.+12     	; 0x55c0 <eeprom_read_blraw+0x14>
    55b4:	f2 bd       	out	0x22, r31	; 34
    55b6:	e1 bd       	out	0x21, r30	; 33
    55b8:	f8 9a       	sbi	0x1f, 0	; 31
    55ba:	31 96       	adiw	r30, 0x01	; 1
    55bc:	00 b4       	in	r0, 0x20	; 32
    55be:	0d 92       	st	X+, r0
    55c0:	41 50       	subi	r20, 0x01	; 1
    55c2:	50 40       	sbci	r21, 0x00	; 0
    55c4:	b8 f7       	brcc	.-18     	; 0x55b4 <eeprom_read_blraw+0x8>
    55c6:	08 95       	ret

000055c8 <_exit>:
    55c8:	f8 94       	cli

000055ca <__stop_program>:
    55ca:	ff cf       	rjmp	.-2      	; 0x55ca <__stop_program>
